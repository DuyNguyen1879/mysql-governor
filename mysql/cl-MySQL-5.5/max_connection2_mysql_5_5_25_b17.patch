diff --git a/Debug/zlib/zutil.o b/Debug/zlib/zutil.o
new file mode 100644
index 0000000..a853884
Binary files /dev/null and b/Debug/zlib/zutil.o differ
diff --git a/sql/lex.h b/sql/lex.h
index 9e90725..3f57f3c 100644
--- a/sql/lex.h
+++ b/sql/lex.h
@@ -191,6 +191,8 @@ static SYMBOL symbols[] = {
   { "ELSE",             SYM(ELSE)},
   { "ELSEIF",           SYM(ELSEIF_SYM)},
   { "ENABLE",		SYM(ENABLE_SYM)},
+  { "ENABLE_GOVERNOR",		SYM(ENABLE_GOVERNOR_SYM)},
+  { "ENABLE_GOVERNOR_RECON",		SYM(ENABLE_GOVERNOR_RECONN_SYM)},
   { "ENCLOSED",		SYM(ENCLOSED)},
   { "END",		SYM(END)},
   { "ENDS",		SYM(ENDS_SYM)},
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 294c3f0..23c993b 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -69,6 +69,9 @@
 #include "debug_sync.h"
 #include "sql_callback.h"
 
+#include <dlfcn.h>
+#include <linux/unistd.h>
+
 #ifdef WITH_PERFSCHEMA_STORAGE_ENGINE
 #include "../storage/perfschema/pfs_server.h"
 #endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */
@@ -186,6 +189,10 @@ typedef fp_except fp_except_t;
 # endif
 #endif
 
+#ifndef GETTID
+pid_t gettid(void) {return syscall(__NR_gettid);}
+#endif
+
 extern "C" my_bool reopen_fstreams(const char *filename,
                                    FILE *outstream, FILE *errstream);
 
@@ -245,6 +252,13 @@ inline void setup_fpu()
 
 } /* cplusplus */
 
+volatile int governor_get_command = 0;
+int (*connect_to_server)() = NULL;
+int (*send_info_begin)(char *) = NULL;
+int (*send_info_end)(char *) = NULL;
+int (*close_sock)() = NULL;
+void * governor_library_handle = NULL;
+
 #define MYSQL_KILL_SIGNAL SIGTERM
 
 #include <my_pthread.h>			// For thr_setconcurency()
@@ -1496,6 +1510,10 @@ void clean_up(bool print_message)
   free_global_thread_stats();
   free_global_table_stats();
   free_global_index_stats();
+
+  if(close_sock){
+  	  (*close_sock)();
+  }
 #ifdef HAVE_REPLICATION
   end_slave_list();
 #endif
@@ -2966,6 +2984,8 @@ SHOW_VAR com_status_vars[]= {
   {"drop_user",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_USER]), SHOW_LONG_STATUS},
   {"drop_view",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_VIEW]), SHOW_LONG_STATUS},
   {"empty_query",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EMPTY_QUERY]), SHOW_LONG_STATUS},
+  {"enable_governor",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR]), SHOW_LONG_STATUS},
   {"execute_sql",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EXECUTE]), SHOW_LONG_STATUS},
   {"flush",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_FLUSH]), SHOW_LONG_STATUS},
   {"grant",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_GRANT]), SHOW_LONG_STATUS},
@@ -6510,6 +6530,7 @@ SHOW_VAR status_vars[]= {
   {"Delayed_errors",           (char*) &delayed_insert_errors,  SHOW_LONG},
   {"Delayed_insert_threads",   (char*) &delayed_insert_threads, SHOW_LONG_NOFLUSH},
   {"Delayed_writes",           (char*) &delayed_insert_writes,  SHOW_LONG},
+  {"Enable_governor",           (char*) &governor_get_command,  SHOW_INT},
   {"Flush_commands",           (char*) &refresh_version,        SHOW_LONG_NOFLUSH},
   {"Handler_commit",           (char*) offsetof(STATUS_VAR, ha_commit_count), SHOW_LONG_STATUS},
   {"Handler_delete",           (char*) offsetof(STATUS_VAR, ha_delete_count), SHOW_LONG_STATUS},
@@ -6931,6 +6952,66 @@ static int mysql_init_variables(void)
     tmpenv = DEFAULT_MYSQL_HOME;
   (void) strmake(mysql_home, tmpenv, sizeof(mysql_home)-1);
 #endif
+
+
+  governor_get_command = 0;
+  connect_to_server = NULL;
+  send_info_begin = NULL;
+  send_info_end = NULL;
+  close_sock = NULL;
+  governor_library_handle = NULL;
+
+  char *error_dl = NULL;
+  governor_library_handle = dlopen("libgovernor.so", RTLD_LAZY);
+  if (governor_library_handle) {
+	  sql_print_information("libgovernor.so found");
+	  while(1){
+		  connect_to_server = (int (*)())dlsym(governor_library_handle, "connect_to_server");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  send_info_begin = (int (*)(char *))dlsym(governor_library_handle, "send_info_begin");
+		  if ((error_dl = dlerror()) != NULL){
+		  	  connect_to_server = NULL;
+		  	  send_info_begin = NULL;
+		  	  send_info_end = NULL;
+		  	  close_sock = NULL;
+		  	  break;
+		  }
+		  send_info_end = (int (*)(char *))dlsym(governor_library_handle, "send_info_end");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  close_sock = (int (*)())dlsym(governor_library_handle, "close_sock");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  sql_print_information("All governors functions found too");
+		  break;
+	  }
+  } else {
+	  sql_print_information("libgovernor.so not found");
+  }
+  if(connect_to_server){
+	  if(!(*connect_to_server)()){
+		  sql_print_information("Governor connected");
+	  } else {
+		  sql_print_error("Governor not connected");
+	  }
+  }
+
   return 0;
 }
 
@@ -7454,6 +7535,7 @@ static void set_server_version(void)
 #endif
   if (opt_log || opt_slow_log || opt_bin_log)
     strmov(end, "-log");                        // This may slow down system
+  end= strmov(end, "-cll");
 }
 
 
diff --git a/sql/mysqld.h b/sql/mysqld.h
index 8537943..72e6702 100644
--- a/sql/mysqld.h
+++ b/sql/mysqld.h
@@ -138,6 +138,14 @@ extern ulong opt_tc_log_size, tc_log_max_pages_used, tc_log_page_size;
 extern ulong tc_log_page_waits;
 extern my_bool relay_log_purge, opt_innodb_safe_binlog, opt_innodb;
 extern my_bool relay_log_recovery;
+
+extern volatile int governor_get_command;
+extern int (*connect_to_server)();
+extern int (*send_info_begin)(char *);
+extern int (*send_info_end)(char *);
+extern int (*close_sock)();
+extern void * governor_library_handle;
+
 extern uint test_flags,select_errors,ha_open_options;
 extern uint protocol_version, mysqld_port, dropping_tables;
 extern ulong delay_key_write_options;
@@ -476,6 +484,11 @@ void free_global_index_stats(void);
 void free_global_client_stats(void);
 void free_global_thread_stats(void);
 
+extern "C" pid_t gettid(void);
+
+void set_governor_variable();
+void set_governor_variable_reconn();
+
 /*
   TODO: Replace this with an inline function.
  */
diff --git a/sql/sql_acl.cc b/sql/sql_acl.cc
index 3438e60..bc8401f 100644
--- a/sql/sql_acl.cc
+++ b/sql/sql_acl.cc
@@ -890,7 +890,7 @@ static my_bool acl_load(THD *thd, TABLE_LIST *tables)
         {
           /* Starting from 5.0.3 we have max_user_connections field */
           ptr= get_field(thd->mem_root, table->field[next_field++]);
-          user.user_resource.user_conn= ptr ? atoi(ptr) : 0;
+          user.user_resource.user_conn= ptr ? atoll(ptr) : 0;
         }
 
         if (table->s->fields >= 41)
@@ -9445,10 +9445,7 @@ acl_authenticate(THD *thd, uint connect_errors, uint com_change_user_pkt_len)
     }
 
     /* Don't allow the user to connect if he has done too many queries */
-    if ((acl_user->user_resource.questions || acl_user->user_resource.updates ||
-         acl_user->user_resource.conn_per_hour ||
-         acl_user->user_resource.user_conn || 
-         global_system_variables.max_user_connections) &&
+    if (
         get_or_create_user_conn(thd,
           (opt_old_style_user_limits ? sctx->user : sctx->priv_user),
           (opt_old_style_user_limits ? sctx->host_or_ip : sctx->priv_host),
diff --git a/sql/sql_class.h b/sql/sql_class.h
index 5cbd81f..8a7deef 100644
--- a/sql/sql_class.h
+++ b/sql/sql_class.h
@@ -3725,6 +3725,7 @@ inline bool add_group_to_list(THD *thd, Item *item, bool asc)
 
 #endif /* MYSQL_SERVER */
 
+
 /**
   The meat of thd_proc_info(THD*, char*), a macro that packs the last
   three calling-info parameters.
diff --git a/sql/sql_connect.cc b/sql/sql_connect.cc
index acac791..84a2023 100644
--- a/sql/sql_connect.cc
+++ b/sql/sql_connect.cc
@@ -81,6 +81,10 @@ extern mysql_mutex_t LOCK_global_index_stats;
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
 static HASH hash_user_connections;
 
+int is_root_access(char *user_name){
+     return !strcmp(user_name,"root")||!strcmp(user_name,"mysql");
+}
+
 int get_or_create_user_conn(THD *thd, const char *user,
                             const char *host,
                             const USER_RESOURCES *mqh)
@@ -735,6 +739,16 @@ int check_for_max_user_connections(THD *thd, USER_CONN *uc)
   DBUG_ENTER("check_for_max_user_connections");
 
   mysql_mutex_lock(&LOCK_user_conn);
+
+
+
+  if (((uc->user_resources.user_conn==(uint)~0) || (global_system_variables.max_user_connections == (uint)~0)) && !is_root_access(uc->user))
+  {
+      my_error(ER_TOO_MANY_USER_CONNECTIONS, MYF(0), uc->user);
+      error=1;
+      goto end;
+  }
+
   if (global_system_variables.max_user_connections &&
       !uc->user_resources.user_conn &&
       global_system_variables.max_user_connections < (uint) uc->connections)
diff --git a/sql/sql_lex.h b/sql/sql_lex.h
index d16166a..1e95a12 100644
--- a/sql/sql_lex.h
+++ b/sql/sql_lex.h
@@ -193,7 +193,7 @@ enum enum_sql_command {
   SQLCOM_SHOW_RELAYLOG_EVENTS, 
   // TODO(mcallaghan): update status_vars in mysqld to export these
   SQLCOM_SHOW_USER_STATS, SQLCOM_SHOW_TABLE_STATS, SQLCOM_SHOW_INDEX_STATS,
-  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_SHOW_THREAD_STATS,
+  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_SHOW_THREAD_STATS, SQLCOM_ENABLE_GOVERNOR, SQLCOM_ENABLE_RECONN_GOVERNOR,
   /*
     When a command is added here, be sure it's also added in mysqld.cc
     in "struct show_var_st status_vars[]= {" ...
diff --git a/sql/sql_list.cc b/sql/sql_list.cc
index 99aeccd..d8bea45 100644
--- a/sql/sql_list.cc
+++ b/sql/sql_list.cc
@@ -39,6 +39,14 @@ void free_list(I_List <i_string> *list)
 }
 
 
+void free_list(I_List <i_thd> *list)
+{
+  i_thd *tmp;
+  while ((tmp= list->get()))
+    delete tmp;
+}
+
+
 base_list::base_list(const base_list &rhs, MEM_ROOT *mem_root)
 {
   if (rhs.elements)
diff --git a/sql/sql_list.h b/sql/sql_list.h
index 769f442..07b8d46 100644
--- a/sql/sql_list.h
+++ b/sql/sql_list.h
@@ -562,6 +562,15 @@ public:
   i_string(const char* s) : ptr(s) {}
 };
 
+/* DB_GOVERNOR ADDITIONS */
+class i_thd: public ilink
+{
+ public:
+   THD* ptr;
+   i_thd():ptr(0) { }
+   i_thd(THD* s) : ptr(s) {}
+};
+
 /* needed for linked list of two strings for replicate-rewrite-db */
 class i_string_pair: public ilink
 {
@@ -711,5 +720,6 @@ list_copy_and_replace_each_value(List<T> &list, MEM_ROOT *mem_root)
 
 void free_list(I_List <i_string_pair> *list);
 void free_list(I_List <i_string> *list);
+void free_list(I_List <i_thd> *list);
 
 #endif // INCLUDES_MYSQL_SQL_LIST_H
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index 58560af..4099230 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -13,6 +13,7 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */
 
+#define HAVE_CLOCK_GETTIME 1
 #define MYSQL_LEX 1
 #include "my_global.h"
 #include "sql_priv.h"
@@ -114,6 +115,7 @@
 
 static bool execute_sqlcom_select(THD *thd, TABLE_LIST *all_tables);
 static void sql_kill(THD *thd, ulong id, bool only_kill_query);
+static void sql_kill_user(THD *thd, char *user, bool only_kill_query);
 
 // Uses the THD to update the global stats by user name and client IP
 void update_global_user_stats(THD* thd, bool create_user, time_t now);
@@ -170,6 +172,27 @@ inline bool all_tables_not_ok(THD *thd, TABLE_LIST *tables)
 }
 #endif
 
+void set_governor_variable(){
+	governor_get_command = 1;
+}
+
+void set_governor_variable_reconn(){
+	governor_get_command = 1;
+	if(close_sock){
+	     (*close_sock)();
+	}
+	if(connect_to_server){
+	     if(!(*connect_to_server)()){
+	             sql_print_information("Governor reconnected");
+	     } else {
+	             sql_print_error("Governor not reconnected. Failed connection");
+	     }
+	}
+}
+
+my_bool chek_governors_avaliable_command(THD *thd){
+	return (thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR);
+}
 
 static bool some_non_temp_table_to_be_updated(THD *thd, TABLE_LIST *tables)
 {
@@ -3716,7 +3739,12 @@ end_with_restore_list:
 		 MYF(0));
       goto error;
     }
-    sql_kill(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    if(it->type()==Item::STRING_ITEM){
+       sql_kill_user(thd, it->val_str(0)->c_ptr(), lex->type & ONLY_KILL_QUERY);
+    } else {
+       sql_kill(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    }
+
     break;
   }
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
@@ -5625,6 +5653,12 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
     }
   }
 
+  if(send_info_begin&&governor_get_command&&chek_governors_avaliable_command(thd)){
+	  if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]){
+		  (*send_info_begin)(thd->security_ctx->user);
+	  }
+  }
+
   if (query_cache_send_result_to_client(thd, rawbuf, length) <= 0)
   {
     LEX *lex= thd->lex;
@@ -5695,6 +5729,13 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
     DBUG_ASSERT(thd->change_list.is_empty());
   }
 
+  if(send_info_end&&governor_get_command&&chek_governors_avaliable_command(thd)){
+    if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]){
+  	  (*send_info_end)(thd->security_ctx->user);
+    }
+  }
+
+
   if (opt_userstat)
   {
     // Gets the end time.
@@ -6602,6 +6643,14 @@ void sql_kill(THD *thd, ulong id, bool only_kill_query)
     my_error(error, MYF(0), id);
 }
 
+static void sql_kill_user(THD *thd, char *user, bool only_kill_query)
+{
+  uint error;
+  if (!(error= kill_user_thread(thd, user, only_kill_query)))
+	  if (! thd->killed) my_ok(thd);
+  else
+    my_error(error, MYF(0), user);
+}
 
 /** If pointer is not a null pointer, append filename to it. */
 
@@ -7517,3 +7566,59 @@ merge_charset_and_collation(CHARSET_INFO *cs, CHARSET_INFO *cl)
   }
   return cs;
 }
+
+
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query)
+{
+  THD *tmp;
+  uint error=0;
+  DBUG_ENTER("kill_user_thread");
+  DBUG_PRINT("enter", ("id=%s only_kill=%d", !user?"nop":user, only_kill_query));
+  i_thd *thd_tmp;
+  I_List<i_thd> threads_tmp;
+  threads_tmp.empty();
+  mysql_mutex_lock(&LOCK_thread_count); // For unlink from list
+  I_List_iterator<THD> it(threads);
+  while ((tmp=it++))
+  {
+	if (tmp->command == COM_DAEMON)
+		continue;
+    if((tmp)&&(user)&&(tmp->user_connect)&&(tmp->user_connect->user)){
+      if (!strncmp(tmp->user_connect->user,user,16))
+      {
+    	mysql_mutex_lock(&tmp->LOCK_thd_data);  // Lock from delete
+        thd_tmp = new i_thd(tmp);
+        if (thd_tmp) threads_tmp.append(thd_tmp);
+        else mysql_mutex_unlock(&tmp->LOCK_thd_data);
+      }
+    }
+  }
+  mysql_mutex_unlock(&LOCK_thread_count);
+
+  if(!threads_tmp.is_empty())
+  {
+	  I_List_iterator<i_thd> it_tmp(threads_tmp);
+	  while ((thd_tmp=it_tmp++)){
+	      tmp=thd_tmp->ptr;
+
+	      if ((tmp)&&(thd->security_ctx->master_access & SUPER_ACL) ||
+	    		  thd->security_ctx->user_matches(tmp->security_ctx))
+	      {
+	    	  tmp->awake(only_kill_query ? THD::KILL_QUERY : THD::KILL_CONNECTION);
+	    	  error=0;
+	      }
+	      else
+    	  error=ER_KILL_DENIED_ERROR;
+	      mysql_mutex_unlock(&tmp->LOCK_thd_data);
+  	  }
+	  free_list(&threads_tmp);
+	  threads_tmp.empty();
+  }
+  DBUG_PRINT("exit", ("%d", error));
+  DBUG_RETURN(error);
+}
+
+
+
+
+
diff --git a/sql/sql_parse.h b/sql/sql_parse.h
index 9a55174..50e7b50 100644
--- a/sql/sql_parse.h
+++ b/sql/sql_parse.h
@@ -50,6 +50,7 @@ bool parse_sql(THD *thd,
                Parser_state *parser_state,
                Object_creation_ctx *creation_ctx);
 
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query);
 uint kill_one_thread(THD *thd, ulong id, bool only_kill_query);
 
 void free_items(Item *item);
diff --git a/sql/sql_yacc.yy b/sql/sql_yacc.yy
index 08a7ecf..ea49a5a 100644
--- a/sql/sql_yacc.yy
+++ b/sql/sql_yacc.yy
@@ -946,6 +946,8 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  ELSE                          /* SQL-2003-R */
 %token  ELSEIF_SYM
 %token  ENABLE_SYM
+%token  ENABLE_GOVERNOR_SYM
+%token  ENABLE_GOVERNOR_RECONN_SYM
 %token  ENCLOSED
 %token  END                           /* SQL-2003-R */
 %token  ENDS_SYM
@@ -1728,6 +1730,8 @@ statement:
         | describe
         | do
         | drop
+        | enable_governor
+        | enable_governor_reconn
         | execute
         | flush
         | grant
@@ -10878,6 +10882,24 @@ opt_profile_args:
     }
   ;
 
+enable_governor:
+          ENABLE_GOVERNOR_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR;
+            set_governor_variable();
+          }
+         ;
+
+enable_governor_reconn:
+          ENABLE_GOVERNOR_RECONN_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR;
+            set_governor_variable_reconn();
+          }
+         ;
+
 /* Show things */
 
 show:
