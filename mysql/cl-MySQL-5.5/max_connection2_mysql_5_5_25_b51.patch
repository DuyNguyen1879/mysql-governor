diff --git a/Debug/zlib/zutil.o b/Debug/zlib/zutil.o
new file mode 100644
index 0000000..a853884
Binary files /dev/null and b/Debug/zlib/zutil.o differ
diff --git a/cmd-line-utils/libedit/terminal.c b/cmd-line-utils/libedit/terminal.c
index 8cfbeac..b1a018d 100644
--- a/cmd-line-utils/libedit/terminal.c
+++ b/cmd-line-utils/libedit/terminal.c
@@ -71,7 +71,7 @@ static char sccsid[] = "@(#)term.c	8.2 (Berkeley) 4/30/95";
 #include <sys/ioctl.h>
 
 #ifdef _REENTRANT
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 #endif
 
 #include "el.h"
diff --git a/configure.cmake b/configure.cmake
index 5b1afd6..0fd6e1d 100644
--- a/configure.cmake
+++ b/configure.cmake
@@ -279,7 +279,7 @@ FUNCTION(MY_CHECK_PTHREAD_ONCE_INIT)
   ENDIF()
   SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -Werror")
   CHECK_C_SOURCE_COMPILES("
-    #include <pthread.h>
+    #include <governor_pthread_wrapper.h>
     void foo(void) {}
     int main()
     {
@@ -292,7 +292,7 @@ FUNCTION(MY_CHECK_PTHREAD_ONCE_INIT)
   # http://bugs.opensolaris.org/bugdatabase/printableBug.do?bug_id=6611808
   IF(NOT HAVE_PTHREAD_ONCE_INIT)
     CHECK_C_SOURCE_COMPILES("
-      #include <pthread.h>
+      #include <governor_pthread_wrapper.h>
       void foo(void) {}
       int main()
       {
@@ -648,7 +648,7 @@ HAVE_SELECT)
 #
 
 CHECK_C_SOURCE_COMPILES("
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 
 int main(int ac, char **av)
 {
@@ -721,7 +721,7 @@ ENDIF()
 ENDIF()
 
 CHECK_CXX_SOURCE_COMPILES("
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 int main()
 {
   pthread_yield();
@@ -911,7 +911,7 @@ CHECK_CXX_SOURCE_COMPILES("
     #if !defined(SCO) && !defined(__osf__) && !defined(_REENTRANT)
     #define _REENTRANT
     #endif
-    #include <pthread.h>
+    #include <governor_pthread_wrapper.h>
     #include <sys/types.h>
     #include <sys/socket.h>
     #include <netinet/in.h>
diff --git a/extra/yassl/include/lock.hpp b/extra/yassl/include/lock.hpp
index ae87500..e4234c0 100644
--- a/extra/yassl/include/lock.hpp
+++ b/extra/yassl/include/lock.hpp
@@ -56,7 +56,7 @@ namespace yaSSL {
             };
         };
     #else  // _WIN32
-        #include <pthread.h>
+        #include <governor_pthread_wrapper.h>
 
         class Mutex {
             pthread_mutex_t mutex_;
diff --git a/extra/yassl/include/yassl_int.hpp b/extra/yassl/include/yassl_int.hpp
index 686e958..ac436ad 100644
--- a/extra/yassl/include/yassl_int.hpp
+++ b/extra/yassl/include/yassl_int.hpp
@@ -40,7 +40,7 @@
 #endif
 
 #ifdef _POSIX_THREADS
-    #include <pthread.h>
+    #include <governor_pthread_wrapper.h>
 #endif
 
 
diff --git a/extra/yassl/testsuite/test.hpp b/extra/yassl/testsuite/test.hpp
index 1f10095..89f787c 100644
--- a/extra/yassl/testsuite/test.hpp
+++ b/extra/yassl/testsuite/test.hpp
@@ -50,7 +50,7 @@
     #ifdef TEST_IPV6
         #include <netdb.h>
     #endif
-    #include <pthread.h>
+    #include <governor_pthread_wrapper.h>
 #ifdef NON_BLOCKING
     #include <fcntl.h>
 #endif
diff --git a/include/governor_pthread_wrapper.h b/include/governor_pthread_wrapper.h
new file mode 100644
index 0000000..61150cb
--- /dev/null
+++ b/include/governor_pthread_wrapper.h
@@ -0,0 +1,31 @@
+/*
+ * governor_pthread_wrapper.h
+ *
+ *  Created on: Sep 26, 2012
+ *      Author: alexey
+ */
+
+#ifndef GOVERNOR_PTHREAD_WRAPPER_H_
+#define GOVERNOR_PTHREAD_WRAPPER_H_
+
+#include <pthread.h>
+
+#ifndef NO_LVE
+#if defined MYSQL_SERVER || MYSQL_DYNAMIC_PLUGIN || FORCE_LVE
+#define LVE_ENABLED
+#include <stdint.h>
+
+extern __thread int is_in_lve;
+extern __thread uint32_t cookie;
+
+extern void * (*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+extern void (*governor_lve_exit)(uint32_t *);
+#endif
+#endif
+
+
+#endif /* GOVERNOR_PTHREAD_WRAPPER_H_ */
diff --git a/include/my_global.h b/include/my_global.h
index 031c42c..4684569 100644
--- a/include/my_global.h
+++ b/include/my_global.h
@@ -268,10 +268,10 @@
 #endif
 #if defined(HPUX10) || defined(HPUX11)
 C_MODE_START			/* HPUX needs this, signal.h bug */
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 C_MODE_END
 #else
-#include <pthread.h>		/* AIX must have this included first */
+#include <governor_pthread_wrapper.h>		/* AIX must have this included first */
 #endif
 #if !defined(SCO) && !defined(_REENTRANT)
 #define _REENTRANT	1	/* Threads requires reentrant code */
diff --git a/include/my_pthread.h b/include/my_pthread.h
index e521564..ca8e6e1 100644
--- a/include/my_pthread.h
+++ b/include/my_pthread.h
@@ -192,7 +192,7 @@ int pthread_cancel(pthread_t thread);
 #include <signal.h>
 #undef sigwait
 #endif
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 #ifndef _REENTRANT
 #define _REENTRANT
 #endif
@@ -542,6 +542,7 @@ void safe_mutex_end(FILE *file);
 #endif /* SAFE_MUTEX */
 
 #if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+#include <governor_pthread_wrapper.h>
 typedef struct st_my_pthread_fastmutex_t
 {
   pthread_mutex_t mutex;
@@ -565,8 +566,15 @@ int my_pthread_fastmutex_lock(my_pthread_fastmutex_t *mp);
 #undef pthread_cond_timedwait
 #undef pthread_mutex_trylock
 #define pthread_mutex_init(A,B) my_pthread_fastmutex_init((A),(B))
+#ifdef LVE_ENABLED
+int my_pthread_lvemutex_unlock(my_pthread_fastmutex_t *mutex);
+int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp);
+#define pthread_mutex_lock(A) my_pthread_lvemutex_lock(A)
+#define pthread_mutex_unlock(A) my_pthread_lvemutex_unlock(A)
+#else
 #define pthread_mutex_lock(A) my_pthread_fastmutex_lock(A)
 #define pthread_mutex_unlock(A) pthread_mutex_unlock(&(A)->mutex)
+#endif
 #define pthread_mutex_destroy(A) pthread_mutex_destroy(&(A)->mutex)
 #define pthread_cond_wait(A,B) pthread_cond_wait((A),&(B)->mutex)
 #define pthread_cond_timedwait(A,B,C) pthread_cond_timedwait((A),&(B)->mutex,(C))
diff --git a/sql/lex.h b/sql/lex.h
index 9e90725..93c4f4e 100644
--- a/sql/lex.h
+++ b/sql/lex.h
@@ -191,6 +191,10 @@ static SYMBOL symbols[] = {
   { "ELSE",             SYM(ELSE)},
   { "ELSEIF",           SYM(ELSEIF_SYM)},
   { "ENABLE",		SYM(ENABLE_SYM)},
+  { "ENABLE_GOVERNOR",		SYM(ENABLE_GOVERNOR_SYM)},
+  { "ENABLE_GOVERNOR_RECON",		SYM(ENABLE_GOVERNOR_RECONN_SYM)},
+  { "ENABLE_GOVERNOR_LVE",             SYM(ENABLE_GOVERNOR_LVE_SYM)},
+  { "ENABLE_GOVERNOR_RECON_LVE",               SYM(ENABLE_GOVERNOR_RECONN_LVE_SYM)},
   { "ENCLOSED",		SYM(ENCLOSED)},
   { "END",		SYM(END)},
   { "ENDS",		SYM(ENDS_SYM)},
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 294c3f0..557a6ca 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -69,6 +69,9 @@
 #include "debug_sync.h"
 #include "sql_callback.h"
 
+#include <dlfcn.h>
+#include <linux/unistd.h>
+
 #ifdef WITH_PERFSCHEMA_STORAGE_ENGINE
 #include "../storage/perfschema/pfs_server.h"
 #endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */
@@ -186,6 +189,10 @@ typedef fp_except fp_except_t;
 # endif
 #endif
 
+#ifndef GETTID
+pid_t gettid(void) {return syscall(__NR_gettid);}
+#endif
+
 extern "C" my_bool reopen_fstreams(const char *filename,
                                    FILE *outstream, FILE *errstream);
 
@@ -245,6 +252,7 @@ inline void setup_fpu()
 
 } /* cplusplus */
 
+
 #define MYSQL_KILL_SIGNAL SIGTERM
 
 #include <my_pthread.h>			// For thr_setconcurency()
@@ -261,6 +269,48 @@ extern "C" sig_handler handle_fatal_signal(int sig);
 #define ENABLE_TEMP_POOL 0
 #endif
 
+
+volatile int governor_get_command = 0;
+int (*connect_to_server)() = NULL;
+int (*send_info_begin)(char *) = NULL;
+int (*send_info_end)(char *) = NULL;
+int (*close_sock)() = NULL;
+void * governor_library_handle = NULL;
+
+void * (*governor_load_lve_library)() = NULL;
+int (*governor_init_lve)() = NULL;
+void (*governor_destroy_lve)() = NULL;
+int (*governor_enter_lve)(uint32_t *, char *) = NULL;
+void (*governor_lve_exit)(uint32_t *) = NULL;
+int (*governor_enter_lve_light)(uint32_t *) = NULL;
+
+__thread int is_in_lve = 0;
+__thread uint32_t cookie = 0;
+
+#if defined(THREAD) && defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+#undef pthread_mutex_unlock
+extern "C" int my_pthread_lvemutex_unlock(my_pthread_fastmutex_t  *mp) {
+    int ret = pthread_mutex_unlock(&mp->mutex);
+    if((is_in_lve == 2) && governor_enter_lve_light){
+        if (!governor_enter_lve_light(&cookie)){
+             is_in_lve = 1;
+        }
+    }
+    return ret;
+}
+#define pthread_mutex_unlock(A) my_pthread_lvemutex_unlock(A)
+
+extern "C" int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp) {
+        if ((is_in_lve == 1) && governor_lve_exit && cookie) {
+                  governor_lve_exit(&cookie);
+                  is_in_lve = 2;
+                  cookie = 0;
+        }
+        return my_pthread_fastmutex_lock(mp);
+}
+#endif
+
+
 /* Constants */
 
 #include <welcome_copyright_notice.h> // ORACLE_WELCOME_COPYRIGHT_NOTICE
@@ -1496,6 +1546,18 @@ void clean_up(bool print_message)
   free_global_thread_stats();
   free_global_table_stats();
   free_global_index_stats();
+
+  if(governor_destroy_lve){
+         governor_destroy_lve();
+  }
+
+  if(close_sock){
+         (*close_sock)();
+  }
+  if (governor_library_handle) {
+         dlclose(governor_library_handle);
+  }
+
 #ifdef HAVE_REPLICATION
   end_slave_list();
 #endif
@@ -2966,6 +3028,10 @@ SHOW_VAR com_status_vars[]= {
   {"drop_user",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_USER]), SHOW_LONG_STATUS},
   {"drop_view",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_VIEW]), SHOW_LONG_STATUS},
   {"empty_query",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EMPTY_QUERY]), SHOW_LONG_STATUS},
+  {"enable_governor",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_lve",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR_LVE]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn_lve",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR_LVE]), SHOW_LONG_STATUS},
   {"execute_sql",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EXECUTE]), SHOW_LONG_STATUS},
   {"flush",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_FLUSH]), SHOW_LONG_STATUS},
   {"grant",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_GRANT]), SHOW_LONG_STATUS},
@@ -6510,6 +6576,7 @@ SHOW_VAR status_vars[]= {
   {"Delayed_errors",           (char*) &delayed_insert_errors,  SHOW_LONG},
   {"Delayed_insert_threads",   (char*) &delayed_insert_threads, SHOW_LONG_NOFLUSH},
   {"Delayed_writes",           (char*) &delayed_insert_writes,  SHOW_LONG},
+  {"Enable_governor",           (char*) &governor_get_command,  SHOW_INT},
   {"Flush_commands",           (char*) &refresh_version,        SHOW_LONG_NOFLUSH},
   {"Handler_commit",           (char*) offsetof(STATUS_VAR, ha_commit_count), SHOW_LONG_STATUS},
   {"Handler_delete",           (char*) offsetof(STATUS_VAR, ha_delete_count), SHOW_LONG_STATUS},
@@ -6931,6 +6998,143 @@ static int mysql_init_variables(void)
     tmpenv = DEFAULT_MYSQL_HOME;
   (void) strmake(mysql_home, tmpenv, sizeof(mysql_home)-1);
 #endif
+
+
+  governor_get_command = 0;
+  connect_to_server = NULL;
+  send_info_begin = NULL;
+  send_info_end = NULL;
+  close_sock = NULL;
+  governor_library_handle = NULL;
+
+  char *error_dl = NULL;
+  governor_library_handle = dlopen("libgovernor.so", RTLD_LAZY);
+  if (governor_library_handle) {
+	  sql_print_information("libgovernor.so found");
+	  while(1){
+		  connect_to_server = (int (*)())dlsym(governor_library_handle, "connect_to_server");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  send_info_begin = (int (*)(char *))dlsym(governor_library_handle, "send_info_begin");
+		  if ((error_dl = dlerror()) != NULL){
+		  	  connect_to_server = NULL;
+		  	  send_info_begin = NULL;
+		  	  send_info_end = NULL;
+		  	  close_sock = NULL;
+		  	  break;
+		  }
+		  send_info_end = (int (*)(char *))dlsym(governor_library_handle, "send_info_end");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  close_sock = (int (*)())dlsym(governor_library_handle, "close_sock");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  sql_print_information("All governors functions found too");
+		  break;
+	  }
+  } else {
+	  sql_print_information("libgovernor.so not found");
+  }
+  if(connect_to_server){
+	  if(!(*connect_to_server)()){
+		  sql_print_information("Governor connected");
+	  } else {
+		  sql_print_error("Governor not connected");
+	  }
+  }
+ if (governor_library_handle){
+
+	  while(1){
+		  governor_load_lve_library = (void * (*)())dlsym(governor_library_handle, "governor_load_lve_library");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+	  	  governor_init_lve = (int (*)())dlsym(governor_library_handle, "governor_init_lve");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+	  	  governor_destroy_lve = (void (*)())dlsym(governor_library_handle, "governor_destroy_lve");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+          		governor_destroy_lve = NULL;
+    	  		governor_enter_lve = NULL;
+  	        	governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  	    break;
+	  	  }
+	  	  governor_enter_lve = (int (*)(uint32_t *, char *))dlsym(governor_library_handle, "governor_enter_lve");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+          		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+
+	  	  governor_lve_exit = (void (*)(uint32_t *))dlsym(governor_library_handle, "governor_lve_exit");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+
+	  	governor_enter_lve_light = (int (*)(uint32_t *))dlsym(governor_library_handle, "governor_enter_lve_light");
+	  	if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+          		governor_enter_lve_light = NULL;
+	  		break;
+	  	}
+
+	  	  sql_print_information("All governors lve functions found too");
+	  	  break;
+	   }
+
+  }
+
+  if(governor_load_lve_library){
+	  if(!governor_load_lve_library()){
+		  sql_print_information("Can't get LVE functions");
+	  }
+  }
+
   return 0;
 }
 
@@ -7454,6 +7658,7 @@ static void set_server_version(void)
 #endif
   if (opt_log || opt_slow_log || opt_bin_log)
     strmov(end, "-log");                        // This may slow down system
+  end= strmov(end, "-cll");
 }
 
 
diff --git a/sql/mysqld.h b/sql/mysqld.h
index 8537943..80d5631 100644
--- a/sql/mysqld.h
+++ b/sql/mysqld.h
@@ -16,6 +16,8 @@
 #ifndef MYSQLD_INCLUDED
 #define MYSQLD_INCLUDED
 
+#include <stdint.h>
+
 #include "my_global.h" /* MYSQL_PLUGIN_IMPORT, FN_REFLEN, FN_EXTLEN */
 #include "sql_bitmap.h"                         /* Bitmap */
 #include "my_decimal.h"                         /* my_decimal */
@@ -138,6 +140,24 @@ extern ulong opt_tc_log_size, tc_log_max_pages_used, tc_log_page_size;
 extern ulong tc_log_page_waits;
 extern my_bool relay_log_purge, opt_innodb_safe_binlog, opt_innodb;
 extern my_bool relay_log_recovery;
+
+extern volatile int governor_get_command;
+extern int (*connect_to_server)();
+extern int (*send_info_begin)(char *);
+extern int (*send_info_end)(char *);
+extern int (*close_sock)();
+extern void * governor_library_handle;
+
+extern void * (*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern void (*governor_lve_exit)(uint32_t *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+
+#include <governor_pthread_wrapper.h>
+
+
 extern uint test_flags,select_errors,ha_open_options;
 extern uint protocol_version, mysqld_port, dropping_tables;
 extern ulong delay_key_write_options;
@@ -476,6 +496,14 @@ void free_global_index_stats(void);
 void free_global_client_stats(void);
 void free_global_thread_stats(void);
 
+extern "C" pid_t gettid(void);
+
+void set_governor_variable();
+void set_governor_variable_reconn();
+void set_governor_variable_lve();
+void set_governor_variable_reconn_lve();
+
+
 /*
   TODO: Replace this with an inline function.
  */
diff --git a/sql/sql_acl.cc b/sql/sql_acl.cc
index 3438e60..bc8401f 100644
--- a/sql/sql_acl.cc
+++ b/sql/sql_acl.cc
@@ -890,7 +890,7 @@ static my_bool acl_load(THD *thd, TABLE_LIST *tables)
         {
           /* Starting from 5.0.3 we have max_user_connections field */
           ptr= get_field(thd->mem_root, table->field[next_field++]);
-          user.user_resource.user_conn= ptr ? atoi(ptr) : 0;
+          user.user_resource.user_conn= ptr ? atoll(ptr) : 0;
         }
 
         if (table->s->fields >= 41)
@@ -9445,10 +9445,7 @@ acl_authenticate(THD *thd, uint connect_errors, uint com_change_user_pkt_len)
     }
 
     /* Don't allow the user to connect if he has done too many queries */
-    if ((acl_user->user_resource.questions || acl_user->user_resource.updates ||
-         acl_user->user_resource.conn_per_hour ||
-         acl_user->user_resource.user_conn || 
-         global_system_variables.max_user_connections) &&
+    if (
         get_or_create_user_conn(thd,
           (opt_old_style_user_limits ? sctx->user : sctx->priv_user),
           (opt_old_style_user_limits ? sctx->host_or_ip : sctx->priv_host),
diff --git a/sql/sql_class.h b/sql/sql_class.h
index 5cbd81f..8a7deef 100644
--- a/sql/sql_class.h
+++ b/sql/sql_class.h
@@ -3725,6 +3725,7 @@ inline bool add_group_to_list(THD *thd, Item *item, bool asc)
 
 #endif /* MYSQL_SERVER */
 
+
 /**
   The meat of thd_proc_info(THD*, char*), a macro that packs the last
   three calling-info parameters.
diff --git a/sql/sql_connect.cc b/sql/sql_connect.cc
index acac791..84a2023 100644
--- a/sql/sql_connect.cc
+++ b/sql/sql_connect.cc
@@ -81,6 +81,10 @@ extern mysql_mutex_t LOCK_global_index_stats;
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
 static HASH hash_user_connections;
 
+int is_root_access(char *user_name){
+     return !strcmp(user_name,"root")||!strcmp(user_name,"mysql");
+}
+
 int get_or_create_user_conn(THD *thd, const char *user,
                             const char *host,
                             const USER_RESOURCES *mqh)
@@ -735,6 +739,16 @@ int check_for_max_user_connections(THD *thd, USER_CONN *uc)
   DBUG_ENTER("check_for_max_user_connections");
 
   mysql_mutex_lock(&LOCK_user_conn);
+
+
+
+  if (((uc->user_resources.user_conn==(uint)~0) || (global_system_variables.max_user_connections == (uint)~0)) && !is_root_access(uc->user))
+  {
+      my_error(ER_TOO_MANY_USER_CONNECTIONS, MYF(0), uc->user);
+      error=1;
+      goto end;
+  }
+
   if (global_system_variables.max_user_connections &&
       !uc->user_resources.user_conn &&
       global_system_variables.max_user_connections < (uint) uc->connections)
diff --git a/sql/sql_lex.h b/sql/sql_lex.h
index d16166a..95a1a57 100644
--- a/sql/sql_lex.h
+++ b/sql/sql_lex.h
@@ -193,7 +193,8 @@ enum enum_sql_command {
   SQLCOM_SHOW_RELAYLOG_EVENTS, 
   // TODO(mcallaghan): update status_vars in mysqld to export these
   SQLCOM_SHOW_USER_STATS, SQLCOM_SHOW_TABLE_STATS, SQLCOM_SHOW_INDEX_STATS,
-  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_SHOW_THREAD_STATS,
+  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_SHOW_THREAD_STATS, SQLCOM_ENABLE_GOVERNOR, SQLCOM_ENABLE_RECONN_GOVERNOR,
+  SQLCOM_ENABLE_GOVERNOR_LVE, SQLCOM_ENABLE_RECONN_GOVERNOR_LVE,
   /*
     When a command is added here, be sure it's also added in mysqld.cc
     in "struct show_var_st status_vars[]= {" ...
diff --git a/sql/sql_list.cc b/sql/sql_list.cc
index 99aeccd..d8bea45 100644
--- a/sql/sql_list.cc
+++ b/sql/sql_list.cc
@@ -39,6 +39,14 @@ void free_list(I_List <i_string> *list)
 }
 
 
+void free_list(I_List <i_thd> *list)
+{
+  i_thd *tmp;
+  while ((tmp= list->get()))
+    delete tmp;
+}
+
+
 base_list::base_list(const base_list &rhs, MEM_ROOT *mem_root)
 {
   if (rhs.elements)
diff --git a/sql/sql_list.h b/sql/sql_list.h
index 769f442..07b8d46 100644
--- a/sql/sql_list.h
+++ b/sql/sql_list.h
@@ -562,6 +562,15 @@ public:
   i_string(const char* s) : ptr(s) {}
 };
 
+/* DB_GOVERNOR ADDITIONS */
+class i_thd: public ilink
+{
+ public:
+   THD* ptr;
+   i_thd():ptr(0) { }
+   i_thd(THD* s) : ptr(s) {}
+};
+
 /* needed for linked list of two strings for replicate-rewrite-db */
 class i_string_pair: public ilink
 {
@@ -711,5 +720,6 @@ list_copy_and_replace_each_value(List<T> &list, MEM_ROOT *mem_root)
 
 void free_list(I_List <i_string_pair> *list);
 void free_list(I_List <i_string> *list);
+void free_list(I_List <i_thd> *list);
 
 #endif // INCLUDES_MYSQL_SQL_LIST_H
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index 58560af..c90dda5 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -13,6 +13,7 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */
 
+#define HAVE_CLOCK_GETTIME 1
 #define MYSQL_LEX 1
 #include "my_global.h"
 #include "sql_priv.h"
@@ -114,6 +115,7 @@
 
 static bool execute_sqlcom_select(THD *thd, TABLE_LIST *all_tables);
 static void sql_kill(THD *thd, ulong id, bool only_kill_query);
+static void sql_kill_user(THD *thd, char *user, bool only_kill_query);
 
 // Uses the THD to update the global stats by user name and client IP
 void update_global_user_stats(THD* thd, bool create_user, time_t now);
@@ -170,6 +172,50 @@ inline bool all_tables_not_ok(THD *thd, TABLE_LIST *tables)
 }
 #endif
 
+void set_governor_variable(){
+	governor_get_command = 1;
+}
+
+void set_governor_variable_reconn(){
+	governor_get_command = 1;
+	if(close_sock){
+	     (*close_sock)();
+	}
+	if(connect_to_server){
+	     if(!(*connect_to_server)()){
+	             sql_print_information("Governor reconnected");
+	     } else {
+	             sql_print_error("Governor not reconnected. Failed connection");
+	     }
+	}
+}
+
+void set_governor_variable_lve(){
+       if(!governor_get_command){
+               if(governor_init_lve){
+                       if(governor_init_lve()){
+                               sql_print_error("Governor LVE initialization error");
+                       }
+               }
+       }
+       governor_get_command = 2;
+}
+
+void set_governor_variable_reconn_lve(){
+       set_governor_variable_reconn();
+       governor_get_command = 2;
+       if(governor_init_lve){
+               if(governor_init_lve()){
+                       sql_print_error("Governor LVE initialization error");
+               }
+       }
+}
+
+my_bool chek_governors_avaliable_command(THD *thd){
+       return (thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR
+                       &&thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR_LVE&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR_LVE);
+}
+
 
 static bool some_non_temp_table_to_be_updated(THD *thd, TABLE_LIST *tables)
 {
@@ -3716,7 +3762,12 @@ end_with_restore_list:
 		 MYF(0));
       goto error;
     }
-    sql_kill(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    if(it->type()==Item::STRING_ITEM){
+       sql_kill_user(thd, it->val_str(0)->c_ptr(), lex->type & ONLY_KILL_QUERY);
+    } else {
+       sql_kill(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    }
+
     break;
   }
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
@@ -5575,6 +5626,7 @@ void mysql_init_multi_delete(LEX *lex)
 void mysql_parse(THD *thd, char *rawbuf, uint length,
                  Parser_state *parser_state)
 {
+  uint32_t cookie = 0;
   int error __attribute__((unused));
   DBUG_ENTER("mysql_parse");
 
@@ -5625,6 +5677,19 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
     }
   }
 
+  if(send_info_begin&&governor_get_command&&chek_governors_avaliable_command(thd)){
+	  if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]){
+		  (*send_info_begin)(thd->security_ctx->user);
+	  }
+  }
+
+  /*if(governor_enter_lve && (governor_get_command==2) && chek_governors_avaliable_command(thd)){
+         if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0])
+                 governor_enter_lve(&cookie, thd->security_ctx->user);
+  }*/
+
+
+
   if (query_cache_send_result_to_client(thd, rawbuf, length) <= 0)
   {
     LEX *lex= thd->lex;
@@ -5673,8 +5738,24 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
                                  &thd->security_ctx->priv_user[0],
                                  (char *) thd->security_ctx->host_or_ip,
                                  0);
+          if(governor_enter_lve && (governor_get_command==2) && chek_governors_avaliable_command(thd)){
+            if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0])
+          	  if (!governor_enter_lve(&cookie, thd->security_ctx->user)){
+          		  is_in_lve = 1;
+          	  }
+          }
 
           error= mysql_execute_command(thd);
+
+          if(governor_lve_exit && (governor_get_command==2) && cookie &&chek_governors_avaliable_command(thd)){
+          	 if (is_in_lve==1) {
+          	  governor_lve_exit(&cookie);
+          	  is_in_lve = 0;
+          	  cookie = 0;
+          	 }
+          }
+
+
           MYSQL_QUERY_EXEC_DONE(error);
 	}
       }
@@ -5695,6 +5776,18 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
     DBUG_ASSERT(thd->change_list.is_empty());
   }
 
+  /*if(governor_lve_exit && (governor_get_command==2) && cookie &&chek_governors_avaliable_command(thd)){
+         governor_lve_exit(&cookie);
+  }*/
+
+
+  if(send_info_end&&governor_get_command&&chek_governors_avaliable_command(thd)){
+    if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]){
+  	  (*send_info_end)(thd->security_ctx->user);
+    }
+  }
+
+
   if (opt_userstat)
   {
     // Gets the end time.
@@ -6602,6 +6695,14 @@ void sql_kill(THD *thd, ulong id, bool only_kill_query)
     my_error(error, MYF(0), id);
 }
 
+static void sql_kill_user(THD *thd, char *user, bool only_kill_query)
+{
+  uint error;
+  if (!(error= kill_user_thread(thd, user, only_kill_query)))
+	  if (! thd->killed) my_ok(thd);
+  else
+    my_error(error, MYF(0), user);
+}
 
 /** If pointer is not a null pointer, append filename to it. */
 
@@ -7517,3 +7618,59 @@ merge_charset_and_collation(CHARSET_INFO *cs, CHARSET_INFO *cl)
   }
   return cs;
 }
+
+
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query)
+{
+  THD *tmp;
+  uint error=0;
+  DBUG_ENTER("kill_user_thread");
+  DBUG_PRINT("enter", ("id=%s only_kill=%d", !user?"nop":user, only_kill_query));
+  i_thd *thd_tmp;
+  I_List<i_thd> threads_tmp;
+  threads_tmp.empty();
+  mysql_mutex_lock(&LOCK_thread_count); // For unlink from list
+  I_List_iterator<THD> it(threads);
+  while ((tmp=it++))
+  {
+	if (tmp->command == COM_DAEMON)
+		continue;
+    if((tmp)&&(user)&&(tmp->user_connect)&&(tmp->user_connect->user)){
+      if (!strncmp(tmp->user_connect->user,user,16))
+      {
+    	mysql_mutex_lock(&tmp->LOCK_thd_data);  // Lock from delete
+        thd_tmp = new i_thd(tmp);
+        if (thd_tmp) threads_tmp.append(thd_tmp);
+        else mysql_mutex_unlock(&tmp->LOCK_thd_data);
+      }
+    }
+  }
+  mysql_mutex_unlock(&LOCK_thread_count);
+
+  if(!threads_tmp.is_empty())
+  {
+	  I_List_iterator<i_thd> it_tmp(threads_tmp);
+	  while ((thd_tmp=it_tmp++)){
+	      tmp=thd_tmp->ptr;
+
+	      if ((tmp)&&(thd->security_ctx->master_access & SUPER_ACL) ||
+	    		  thd->security_ctx->user_matches(tmp->security_ctx))
+	      {
+	    	  tmp->awake(only_kill_query ? THD::KILL_QUERY : THD::KILL_CONNECTION);
+	    	  error=0;
+	      }
+	      else
+    	  error=ER_KILL_DENIED_ERROR;
+	      mysql_mutex_unlock(&tmp->LOCK_thd_data);
+  	  }
+	  free_list(&threads_tmp);
+	  threads_tmp.empty();
+  }
+  DBUG_PRINT("exit", ("%d", error));
+  DBUG_RETURN(error);
+}
+
+
+
+
+
diff --git a/sql/sql_parse.h b/sql/sql_parse.h
index 9a55174..50e7b50 100644
--- a/sql/sql_parse.h
+++ b/sql/sql_parse.h
@@ -50,6 +50,7 @@ bool parse_sql(THD *thd,
                Parser_state *parser_state,
                Object_creation_ctx *creation_ctx);
 
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query);
 uint kill_one_thread(THD *thd, ulong id, bool only_kill_query);
 
 void free_items(Item *item);
diff --git a/sql/sql_yacc.yy b/sql/sql_yacc.yy
index 08a7ecf..9e089d2 100644
--- a/sql/sql_yacc.yy
+++ b/sql/sql_yacc.yy
@@ -946,6 +946,10 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  ELSE                          /* SQL-2003-R */
 %token  ELSEIF_SYM
 %token  ENABLE_SYM
+%token  ENABLE_GOVERNOR_SYM
+%token  ENABLE_GOVERNOR_RECONN_SYM
+%token  ENABLE_GOVERNOR_LVE_SYM
+%token  ENABLE_GOVERNOR_RECONN_LVE_SYM
 %token  ENCLOSED
 %token  END                           /* SQL-2003-R */
 %token  ENDS_SYM
@@ -1728,6 +1732,10 @@ statement:
         | describe
         | do
         | drop
+        | enable_governor
+        | enable_governor_reconn
+        | enable_governor_lve
+        | enable_governor_reconn_lve
         | execute
         | flush
         | grant
@@ -10878,6 +10886,41 @@ opt_profile_args:
     }
   ;
 
+enable_governor:
+          ENABLE_GOVERNOR_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR;
+            set_governor_variable();
+          }
+         ;
+
+enable_governor_reconn:
+          ENABLE_GOVERNOR_RECONN_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR;
+            set_governor_variable_reconn();
+          }
+         ;
+enable_governor_lve:
+          ENABLE_GOVERNOR_LVE_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR_LVE;
+            set_governor_variable_lve();
+          }
+         ;
+
+enable_governor_reconn_lve:
+          ENABLE_GOVERNOR_RECONN_LVE_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR_LVE;
+            set_governor_variable_reconn_lve();
+          }
+         ;
+
 /* Show things */
 
 show:
diff --git a/storage/innobase/CMakeLists.txt b/storage/innobase/CMakeLists.txt
index 01034ee..3003387 100644
--- a/storage/innobase/CMakeLists.txt
+++ b/storage/innobase/CMakeLists.txt
@@ -95,7 +95,7 @@ ENDIF()
 IF(NOT CMAKE_CROSSCOMPILING)
   CHECK_C_SOURCE_RUNS(
   "
-  #include <pthread.h>
+  #include <governor_pthread_wrapper.h>
   #include <string.h>
 
   int main() {
@@ -141,7 +141,7 @@ IF(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
   IF(NOT CMAKE_CROSSCOMPILING)
   # either define HAVE_IB_ATOMIC_PTHREAD_T_SOLARIS or not
   CHECK_C_SOURCE_COMPILES(
-  "   #include <pthread.h>
+  "   #include <governor_pthread_wrapper.h>
       #include <string.h>
 
       int main(int argc, char** argv) {
diff --git a/storage/myisam/CMakeLists.txt b/storage/myisam/CMakeLists.txt
index 487fbde..d21eb9b 100644
--- a/storage/myisam/CMakeLists.txt
+++ b/storage/myisam/CMakeLists.txt
@@ -13,6 +13,9 @@
 # along with this program; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 
+set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFORCE_LVE")
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DFORCE_LVE")
+
 SET(MYISAM_SOURCES  ft_boolean_search.c ft_nlq_search.c ft_parser.c ft_static.c
                                 ha_myisam.cc
 				ft_stopwords.c ft_update.c mi_cache.c mi_changed.c mi_check.c
@@ -24,7 +27,7 @@ SET(MYISAM_SOURCES  ft_boolean_search.c ft_nlq_search.c ft_parser.c ft_static.c
 				mi_rsame.c mi_rsamepos.c mi_scan.c mi_search.c mi_static.c mi_statrec.c
 				mi_unique.c mi_update.c mi_write.c rt_index.c rt_key.c rt_mbr.c
 				rt_split.c sort.c sp_key.c mi_extrafunc.h myisamdef.h
-				rt_index.h mi_rkey.c)
+				rt_index.h mi_rkey.c nolve.c)
 
 MYSQL_ADD_PLUGIN(myisam ${MYISAM_SOURCES} 
   STORAGE_ENGINE 
@@ -33,32 +36,32 @@ MYSQL_ADD_PLUGIN(myisam ${MYISAM_SOURCES}
 
 TARGET_LINK_LIBRARIES(myisam mysys)
 
-MYSQL_ADD_EXECUTABLE(myisam_ftdump myisam_ftdump.c)
+MYSQL_ADD_EXECUTABLE(myisam_ftdump myisam_ftdump.c nolve.c)
 TARGET_LINK_LIBRARIES(myisam_ftdump myisam)
 
-MYSQL_ADD_EXECUTABLE(myisamchk myisamchk.c)
+MYSQL_ADD_EXECUTABLE(myisamchk myisamchk.c nolve.c)
 TARGET_LINK_LIBRARIES(myisamchk myisam)
 
-MYSQL_ADD_EXECUTABLE(myisamlog myisamlog.c)
+MYSQL_ADD_EXECUTABLE(myisamlog myisamlog.c nolve.c)
 TARGET_LINK_LIBRARIES(myisamlog myisam)
 
-MYSQL_ADD_EXECUTABLE(myisampack myisampack.c)
+MYSQL_ADD_EXECUTABLE(myisampack myisampack.c nolve.c)
 TARGET_LINK_LIBRARIES(myisampack myisam)
 
 IF(WITH_UNIT_TESTS AND FALSE)
-  ADD_EXECUTABLE(mi_test1 mi_test1.c)
+  ADD_EXECUTABLE(mi_test1 mi_test1.c nolve.c)
   TARGET_LINK_LIBRARIES(mi_test1 myisam)
 
-  ADD_EXECUTABLE(mi_test2 mi_test2.c)
+  ADD_EXECUTABLE(mi_test2 mi_test2.c nolve.c)
   TARGET_LINK_LIBRARIES(mi_test2 myisam)
 
-  ADD_EXECUTABLE(mi_test3 mi_test3.c)
+  ADD_EXECUTABLE(mi_test3 mi_test3.c nolve.c)
   TARGET_LINK_LIBRARIES(mi_test3  myisam)
 
-  ADD_EXECUTABLE(sp_test sp_test.c)
+  ADD_EXECUTABLE(sp_test sp_test.c nolve.c)
   TARGET_LINK_LIBRARIES(sp_test myisam)
 
-  ADD_EXECUTABLE(rt_test rt_test.c)
+  ADD_EXECUTABLE(rt_test rt_test.c nolve.c)
   TARGET_LINK_LIBRARIES(rt_test myisam)
 ENDIF()
   
diff --git a/storage/myisam/nolve.c b/storage/myisam/nolve.c
new file mode 100644
index 0000000..f5e6364
--- /dev/null
+++ b/storage/myisam/nolve.c
@@ -0,0 +1,14 @@
+#include <my_global.h>
+#include <my_pthread.h>
+#if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+#undef pthread_mutex_unlock
+int my_pthread_lvemutex_unlock(my_pthread_fastmutex_t  *mp) {
+    return  pthread_mutex_unlock(&mp->mutex);
+}
+#define pthread_mutex_unlock(A) my_pthread_lvemutex_unlock(A)
+
+int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp) {
+    return my_pthread_fastmutex_lock(mp);
+}
+#endif
+
diff --git a/storage/ndb/include/portlib/NdbMutex.h b/storage/ndb/include/portlib/NdbMutex.h
index 0f04511..8b13ff3 100644
--- a/storage/ndb/include/portlib/NdbMutex.h
+++ b/storage/ndb/include/portlib/NdbMutex.h
@@ -30,7 +30,7 @@ extern "C" {
 #if defined NDB_WIN32
 typedef CRITICAL_SECTION NdbMutex;
 #else
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 typedef pthread_mutex_t NdbMutex;
 #endif
 
diff --git a/storage/ndb/test/ndbapi/cdrserver.cpp b/storage/ndb/test/ndbapi/cdrserver.cpp
index 1a39edc..353aab1 100644
--- a/storage/ndb/test/ndbapi/cdrserver.cpp
+++ b/storage/ndb/test/ndbapi/cdrserver.cpp
@@ -37,7 +37,7 @@
 #include <NdbApi.hpp>
 /***************************/
 /*#include <sys/shm.h>*/
-#include <pthread.h>
+#include <governor_pthread_wrapper.h>
 #include <sys/sem.h>
 #include <sys/shm.h>
 #include <netinet/in.h>
