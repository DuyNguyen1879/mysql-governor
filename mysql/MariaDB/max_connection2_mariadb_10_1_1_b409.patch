diff -Naur a/include/CMakeLists.txt b/include/CMakeLists.txt
--- a/include/CMakeLists.txt	2014-10-16 01:53:42.000000000 +0300
+++ b/include/CMakeLists.txt	2014-10-28 13:33:26.272671007 +0200
@@ -60,6 +60,7 @@
   my_compiler.h
   handler_state.h
   handler_ername.h
+  governor.h
 )
 
 INSTALL(FILES ${HEADERS} DESTINATION ${INSTALL_INCLUDEDIR} COMPONENT Development)
diff -Naur a/include/governor.h b/include/governor.h
--- a/include/governor.h	1970-01-01 03:00:00.000000000 +0300
+++ b/include/governor.h	2014-10-28 13:33:26.303670951 +0200
@@ -0,0 +1,14 @@
+/*
+ * governor_pthread_wrapper.h
+ *
+ *  Created on: Sep 26, 2012
+ *      Author: alexey
+*/
+
+#ifndef GOVERNOR_PTHREAD_WRAPPER_H_
+#define GOVERNOR_PTHREAD_WRAPPER_H_
+
+#include <stdint.h>
+
+
+#endif /* GOVERNOR_PTHREAD_WRAPPER_H_ */
diff -Naur a/include/m_ctype.h b/include/m_ctype.h
--- a/include/m_ctype.h	2014-10-16 01:53:42.000000000 +0300
+++ b/include/m_ctype.h	2014-10-28 13:33:26.324670914 +0200
@@ -60,12 +60,12 @@
 #define MY_PUT_MB2(s, code)   { (s)[0]= code >> 8; (s)[1]= code & 0xFF; }
 #endif
 
-typedef const struct my_charset_handler_st MY_CHARSET_HANDLER;
-typedef const struct my_collation_handler_st MY_COLLATION_HANDLER;
+typedef struct my_charset_handler_st MY_CHARSET_HANDLER;
+typedef struct my_collation_handler_st MY_COLLATION_HANDLER;
 
-typedef const struct unicase_info_st MY_UNICASE_INFO;
-typedef const struct uni_ctype_st MY_UNI_CTYPE;
-typedef const struct my_uni_idx_st MY_UNI_IDX;
+typedef struct unicase_info_st MY_UNICASE_INFO;
+typedef struct uni_ctype_st MY_UNI_CTYPE;
+typedef struct my_uni_idx_st MY_UNI_IDX;
 
 typedef struct unicase_info_char_st
 {
diff -Naur a/include/my_pthread.h b/include/my_pthread.h
--- a/include/my_pthread.h	2014-10-16 01:53:42.000000000 +0300
+++ b/include/my_pthread.h	2014-10-28 13:33:26.345670877 +0200
@@ -132,9 +132,20 @@
 
 #define pthread_equal(A,B) ((A) == (B))
 #define pthread_mutex_init(A,B)  (InitializeCriticalSection(A),0)
-#define pthread_mutex_lock(A)	 (EnterCriticalSection(A),0)
-#define pthread_mutex_trylock(A) win_pthread_mutex_trylock((A))
-#define pthread_mutex_unlock(A)  (LeaveCriticalSection(A), 0)
+
+int put_in_lve(char *user);
+void lve_thr_exit();
+void governor_setlve_mysql_thread_info(pid_t thread_id);
+void governor_detroy_mysql_thread_info();
+__attribute__ ((noinline)) int my_pthread_lvemutex_unlock(pthread_mutex_t *mutex);
+__attribute__ ((noinline)) int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp);
+__attribute__ ((noinline)) int my_pthread_lvemutex_trylock(pthread_mutex_t *mutex);
+__attribute__((noinline)) void my_release_slot();
+__attribute__((noinline)) void my_reserve_slot();
+#define pthread_mutex_lock(A) my_pthread_lvemutex_lock(A)
+#define pthread_mutex_unlock(A) my_pthread_lvemutex_unlock(&(A)->mutex)
+#define pthread_mutex_trylock(A) my_pthread_lvemutex_trylock(&(A)->mutex)
+
 #define pthread_mutex_destroy(A) (DeleteCriticalSection(A), 0)
 #define pthread_kill(A,B) pthread_dummy((A) ? 0 : ESRCH)
 
@@ -155,6 +166,7 @@
 #include <signal.h>
 #undef sigwait
 #endif
+#include <governor.h>
 #include <pthread.h>
 #ifndef _REENTRANT
 #define _REENTRANT
@@ -398,6 +410,13 @@
 } safe_mutex_info_t;
 #endif /* SAFE_MUTEX_DETECT_DESTROY */
 
+int put_in_lve(char *user);
+void lve_thr_exit();
+void governor_setlve_mysql_thread_info(pid_t thread_id);
+void governor_detroy_mysql_thread_info();
+__attribute__((noinline)) void my_release_slot();
+__attribute__((noinline)) void my_reserve_slot();
+
 int safe_mutex_init(safe_mutex_t *mp, const pthread_mutexattr_t *attr,
                     const char *name, const char *file, uint line);
 int safe_mutex_lock(safe_mutex_t *mp, myf my_flags, const char *file,
diff -Naur a/include/mysql_com.h b/include/mysql_com.h
--- a/include/mysql_com.h	2014-10-16 01:53:42.000000000 +0300
+++ b/include/mysql_com.h	2014-10-28 15:37:22.117472033 +0200
@@ -348,6 +348,8 @@
 #define NET_WRITE_TIMEOUT	60		/* Timeout on write */
 #define NET_WAIT_TIMEOUT	8*60*60		/* Wait for new query */
 
+#define ONLY_KILL_QUERY         1
+
 struct st_vio;					/* Only C */
 typedef struct st_vio Vio;
 
diff -Naur a/mysys/mf_keycache.c b/mysys/mf_keycache.c
--- a/mysys/mf_keycache.c	2014-10-16 01:53:50.000000000 +0300
+++ b/mysys/mf_keycache.c	2014-10-28 13:33:26.364670845 +0200
@@ -2750,6 +2750,7 @@
   my_bool locked_and_incremented= FALSE;
   int error=0;
   uchar *start= buff;
+  my_reserve_slot();
   DBUG_ENTER("simple_key_cache_read");
   DBUG_PRINT("enter", ("fd: %u  pos: %lu  length: %u",
                (uint) file, (ulong) filepos, length));
@@ -2947,6 +2948,7 @@
     dec_counter_for_resize_op(keycache);
     keycache_pthread_mutex_unlock(&keycache->cache_lock);
   }
+  my_release_slot();
   DBUG_PRINT("exit", ("error: %d", error ));
   DBUG_RETURN(error ? (uchar*) 0 : start);
 }
diff -Naur a/mysys/thr_mutex.c b/mysys/thr_mutex.c
--- a/mysys/thr_mutex.c	2014-10-16 01:53:50.000000000 +0300
+++ b/mysys/thr_mutex.c	2014-10-28 13:33:26.385670807 +0200
@@ -27,11 +27,15 @@
 #undef SAFE_MUTEX                       /* Avoid safe_mutex redefinitions */
 #endif
 
+#include <linux/unistd.h>
+
 #include "mysys_priv.h"
 #include "my_static.h"
 #include <m_string.h>
 #include <hash.h>
 
+
+
 #ifndef DO_NOT_REMOVE_THREAD_WRAPPERS
 /* Remove wrappers */
 #undef pthread_mutex_t
@@ -53,6 +57,42 @@
 #endif
 
 #ifdef SAFE_MUTEX_DEFINED
+
+void * (*governor_load_lve_library)() = NULL;
+int (*governor_init_lve)() = NULL;
+void (*governor_destroy_lve)() = NULL;
+int (*governor_enter_lve)(uint32_t *, char *) = NULL;
+void (*governor_lve_exit)(uint32_t *) = NULL;
+int (*governor_enter_lve_light)(uint32_t *) = NULL;
+void (*governor_lve_exit_null)() = NULL;
+int (*governor_lve_enter_pid)(pid_t) = NULL;
+ 
+void governor_setlve_mysql_thread_info(pid_t thread_id) {
+       thread_id = 0;
+       return;
+}
+
+__attribute__((noinline)) int put_in_lve(char *user) {
+       user = NULL;
+       return 0;
+}
+
+__attribute__((noinline)) void lve_thr_exit() {
+       return;
+}
+
+void governor_detroy_mysql_thread_info(){
+       return;
+}
+
+__attribute__((noinline)) void my_release_slot(){
+    return;
+}
+
+__attribute__((noinline)) void my_reserve_slot(){
+    return;
+}
+
 static pthread_mutex_t THR_LOCK_mutex;
 static ulong safe_mutex_count= 0;		/* Number of mutexes created */
 static ulong safe_mutex_id= 0;
@@ -914,6 +954,296 @@
   return pthread_mutex_lock(&mp->mutex);
 }
 
+void * (*governor_load_lve_library)() = NULL;
+int (*governor_init_lve)() = NULL;
+void (*governor_destroy_lve)() = NULL;
+int (*governor_enter_lve)(uint32_t *, char *) = NULL;
+void (*governor_lve_exit)(uint32_t *) = NULL;
+int (*governor_enter_lve_light)(uint32_t *) = NULL;
+void (*governor_lve_exit_null)() = NULL;
+int (*governor_lve_enter_pid)(pid_t) = NULL;
+
+//extern CHARSET_INFO my_charset_latin1_bin;
+CHARSET_INFO governor_charset_bin;
+
+__thread uint32_t lve_cookie = 0;
+
+pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;
+
+typedef struct __mysql_mutex {
+       pid_t *key;
+       int is_in_lve;
+       int is_in_mutex;
+       int put_in_lve;
+} mysql_mutex;
+
+static HASH *mysql_lve_mutex_governor = NULL;
+
+__thread mysql_mutex *mysql_lve_mutex_governor_ptr = 0;
+
+pthread_mutex_t mtx_mysql_lve_mutex_governor_ptr = PTHREAD_MUTEX_INITIALIZER;
+
+void governor_value_destroyed(mysql_mutex *data) {
+       free(data);
+}
+
+uchar *governor_get_key_table_mutex(mysql_mutex *table_mutex, size_t *length,
+               my_bool not_used __attribute__((unused))) {
+       *length = sizeof(table_mutex->key);
+       return (uchar*) table_mutex->key;
+}
+
+/*
+ *   RETURN
+ * < 0 s < t
+ * 0   s == t
+ * > 0 s > t
+*/
+int governor_my_strnncoll_8bit_bin(CHARSET_INFO * cs __attribute__((unused)), const uchar *s,
+               size_t slen, const uchar *t, size_t tlen, my_bool t_is_prefix) {
+       int res = 0;
+       pid_t s1 = (pid_t)s, t1 = (pid_t)t;
+       if (s1 < t1)
+               res = -1;
+       else if (s1 == t1)
+               res = 0;
+       else
+               res = 1;
+       return res;
+}
+
+void governor_hash_sort_8bit_bin(CHARSET_INFO *cs __attribute__((unused)),
+                           const uchar *key, size_t len,
+                           ulong *nr1, ulong *nr2)
+{
+  return;
+}
+
+HASH *governor_create_hash_table() {
+       mysql_lve_mutex_governor = (HASH *) calloc(1, sizeof(HASH));
+       if (mysql_lve_mutex_governor) {
+               memcpy(&governor_charset_bin, &my_charset_latin1_bin,
+                               sizeof(CHARSET_INFO));
+               governor_charset_bin.coll->strnncoll = governor_my_strnncoll_8bit_bin;
+               governor_charset_bin.coll->hash_sort = governor_hash_sort_8bit_bin;
+               if (my_hash_init(mysql_lve_mutex_governor, &governor_charset_bin, 500, 0,
+                               0, (my_hash_get_key) governor_get_key_table_mutex,
+                               (my_hash_free_key) governor_value_destroyed, 0)) {
+                       mysql_lve_mutex_governor = NULL;
+               }
+       }
+       return mysql_lve_mutex_governor;
+}
+
+int governor_add_mysql_thread_info() {
+       pid_t *buf = NULL;
+       pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+       mysql_mutex *mm = NULL;
+       if (!mysql_lve_mutex_governor) {
+               mysql_lve_mutex_governor = governor_create_hash_table();
+               if (!mysql_lve_mutex_governor){
+            	       pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+                       return -1;
+               }
+       }
+       buf = (pid_t *)syscall(__NR_gettid);
+       mm = (mysql_mutex *) my_hash_search(mysql_lve_mutex_governor,
+                       (uchar *) buf, sizeof(buf));
+       if (!mm) {
+               mm = (mysql_mutex *) calloc(1, sizeof(mysql_mutex));
+               if (!mm)
+                       return -1;
+               mm->key = (pid_t *)syscall(__NR_gettid);
+               if (my_hash_insert(mysql_lve_mutex_governor, (uchar *) mm)) {
+                       free(mm);
+                       pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+                       return -1;
+               }
+       }
+       pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+       mysql_lve_mutex_governor_ptr = mm;
+       return 0;
+}
+
+void governor_remove_mysql_thread_info() {
+       pid_t *buf = NULL;
+       pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+       mysql_mutex *mm = NULL;
+       if (mysql_lve_mutex_governor) {
+               buf = (pid_t *)syscall(__NR_gettid);
+               mm = (mysql_mutex *) my_hash_search(mysql_lve_mutex_governor,
+                               (uchar *) buf, sizeof(buf));
+               if (mm)
+                       my_hash_delete(mysql_lve_mutex_governor, (uchar *) mm);
+       }
+       pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+       mysql_lve_mutex_governor_ptr = NULL;
+}
+
+void governor_setlve_mysql_thread_info(pid_t thread_id) {
+       pid_t *buf = NULL;
+       pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+       mysql_mutex *mm = NULL;
+       if (mysql_lve_mutex_governor) {
+               buf = (pid_t *)thread_id;
+               mm = (mysql_mutex *) my_hash_search(mysql_lve_mutex_governor,
+                               (uchar *) buf, sizeof(buf));
+               if (mm) {
+                       if (!mm->is_in_lve) {
+                               mm->put_in_lve = 1;
+                               //if (mm->is_in_mutex) {
+                               //      mm->put_in_lve = 1;
+                               //} else {
+                               //      mm->put_in_lve = 1;
+                               //      governor_lve_enter_pid(thread_id);
+                               //}
+                       }
+               }
+       }
+       pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+}
+
+void governor_detroy_mysql_thread_info() {
+       if (mysql_lve_mutex_governor) {
+               pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+               my_hash_free(mysql_lve_mutex_governor);
+               free(mysql_lve_mutex_governor);
+               pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+       }
+}
+
+__attribute__((noinline)) int put_in_lve(char *user) {
+       if (governor_add_mysql_thread_info()<0) return -1;
+       if (mysql_lve_mutex_governor_ptr) {
+               if (!governor_enter_lve(&lve_cookie, user)) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+               }
+               mysql_lve_mutex_governor_ptr->is_in_mutex = 0;
+       }
+       return 0;
+}
+
+__attribute__((noinline)) void lve_thr_exit() {
+       if (mysql_lve_mutex_governor_ptr && mysql_lve_mutex_governor_ptr->is_in_lve
+                      == 1) {
+               governor_lve_exit(&lve_cookie);
+               mysql_lve_mutex_governor_ptr->is_in_lve = 0;
+       }
+       governor_remove_mysql_thread_info();
+}
+
+__attribute__((noinline)) int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp) {
+       if (mysql_lve_mutex_governor_ptr) {
+               if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+                       governor_lve_exit(&lve_cookie);
+                       mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+               } else if (mysql_lve_mutex_governor_ptr->is_in_lve > 1) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve++;
+               } /*else if (mysql_lve_mutex_governor_ptr->put_in_lve
+                               && !mysql_lve_mutex_governor_ptr->is_in_mutex) {
+                       //governor_lve_exit_null();
+                       mysql_lve_mutex_governor_ptr->put_in_lve = 0;
+                       mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+               }*/
+               mysql_lve_mutex_governor_ptr->is_in_mutex++;
+       }
+       return my_pthread_fastmutex_lock(mp);
+}
+
+__attribute__((noinline)) int my_pthread_lvemutex_trylock(pthread_mutex_t *mutex) {
+       if (mysql_lve_mutex_governor_ptr) {
+               if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+                       governor_lve_exit(&lve_cookie);
+               }
+       }
+       int ret = pthread_mutex_trylock(mutex);
+       if (mysql_lve_mutex_governor_ptr) {
+           if (ret != EBUSY){
+                if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+                } else if (mysql_lve_mutex_governor_ptr->is_in_lve > 1) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve++;
+                }
+                mysql_lve_mutex_governor_ptr->is_in_mutex++;
+               } else {
+                if (mysql_lve_mutex_governor_ptr->is_in_lve == 1){
+                    if (!governor_enter_lve_light(&lve_cookie)) {
+                           mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+                    } else {
+    			   mysql_lve_mutex_governor_ptr->is_in_lve = 0;
+                    }
+                }
+               }
+       }
+       return ret;
+}
+
+
+__attribute__((noinline)) int my_pthread_lvemutex_unlock(
+               pthread_mutex_t *mutex) {
+       int ret = pthread_mutex_unlock(mutex);
+       if (mysql_lve_mutex_governor_ptr) {
+               if ((mysql_lve_mutex_governor_ptr->is_in_lve == 2)
+                               && governor_enter_lve_light) {
+                       if (!governor_enter_lve_light(&lve_cookie)) {
+                               mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+                       }
+               } else if (mysql_lve_mutex_governor_ptr->is_in_lve > 2) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve--;
+               }
+               mysql_lve_mutex_governor_ptr->is_in_mutex--;
+               /*if (mysql_lve_mutex_governor_ptr->put_in_lve
+                               && !mysql_lve_mutex_governor_ptr->is_in_mutex) {
+                       if (governor_enter_lve_light && !governor_enter_lve_light(
+                                       &lve_cookie)) {
+                               mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+                               mysql_lve_mutex_governor_ptr->put_in_lve = 0;
+                       }
+               }*/
+       }
+       return ret;
+}
+
+__attribute__((noinline)) void my_reserve_slot() {
+       if (mysql_lve_mutex_governor_ptr) {
+               if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+                       governor_lve_exit(&lve_cookie);
+                       mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+               } else if (mysql_lve_mutex_governor_ptr->is_in_lve > 1) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve++;
+               } /*else if (mysql_lve_mutex_governor_ptr->put_in_lve
+                               && !mysql_lve_mutex_governor_ptr->is_in_mutex) {
+                       //governor_lve_exit_null();
+                       mysql_lve_mutex_governor_ptr->put_in_lve = 0;
+                       mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+               }*/
+               mysql_lve_mutex_governor_ptr->is_in_mutex++;
+       }
+       return;
+}
+
+__attribute__((noinline)) void my_release_slot() {
+       if (mysql_lve_mutex_governor_ptr) {
+               if ((mysql_lve_mutex_governor_ptr->is_in_lve == 2)
+                               && governor_enter_lve_light) {
+                       if (!governor_enter_lve_light(&lve_cookie)) {
+                               mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+                       }
+               } else if (mysql_lve_mutex_governor_ptr->is_in_lve > 2) {
+                       mysql_lve_mutex_governor_ptr->is_in_lve--;
+               }
+               mysql_lve_mutex_governor_ptr->is_in_mutex--;
+               /*if (mysql_lve_mutex_governor_ptr->put_in_lve
+                               && !mysql_lve_mutex_governor_ptr->is_in_mutex) {
+                       if (governor_enter_lve_light && !governor_enter_lve_light(
+                                       &lve_cookie)) {
+                               mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+                               mysql_lve_mutex_governor_ptr->put_in_lve = 0;
+                       }
+               }*/
+       }
+       return;
+}
 
 void fastmutex_global_init(void)
 {
diff -Naur a/sql/lex.h b/sql/lex.h
--- a/sql/lex.h	2014-10-16 01:53:52.000000000 +0300
+++ b/sql/lex.h	2014-10-28 13:33:26.415670755 +0200
@@ -204,6 +204,10 @@
   { "ELSE",             SYM(ELSE)},
   { "ELSEIF",           SYM(ELSEIF_SYM)},
   { "ENABLE",		SYM(ENABLE_SYM)},
+  { "ENABLE_GOVERNOR",		SYM(ENABLE_GOVERNOR_SYM)},
+  { "ENABLE_GOVERNOR_RECON",	SYM(ENABLE_GOVERNOR_RECONN_SYM)},
+  { "ENABLE_GOVERNOR_LVE",      SYM(ENABLE_GOVERNOR_LVE_SYM)},
+  { "ENABLE_GOVERNOR_RECON_LVE",  SYM(ENABLE_GOVERNOR_RECONN_LVE_SYM)},
   { "ENCLOSED",		SYM(ENCLOSED)},
   { "END",		SYM(END)},
   { "ENDS",		SYM(ENDS_SYM)},
@@ -336,6 +340,7 @@
   { "LONGTEXT",		SYM(LONGTEXT)},
   { "LOOP",             SYM(LOOP_SYM)},
   { "LOW_PRIORITY",	SYM(LOW_PRIORITY)},
+  { "LVECMD",          SYM(LVECMD_SYM)},
   { "MASTER",           SYM(MASTER_SYM)},
   { "MASTER_CONNECT_RETRY",           SYM(MASTER_CONNECT_RETRY_SYM)},
   { "MASTER_GTID_POS",  SYM(MASTER_GTID_POS_SYM)},
diff -Naur a/sql/mysqld.cc b/sql/mysqld.cc
--- a/sql/mysqld.cc	2014-10-16 01:53:52.000000000 +0300
+++ b/sql/mysqld.cc	2014-10-28 13:41:34.517848143 +0200
@@ -79,6 +79,9 @@
 #include "sql_callback.h"
 #include "threadpool.h"
 
+#include <dlfcn.h>
+#include <linux/unistd.h>
+
 #ifdef WITH_PERFSCHEMA_STORAGE_ENGINE
 #include "../storage/perfschema/pfs_server.h"
 #endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */
@@ -204,6 +207,10 @@
 #define fcntl(X,Y,Z) 0
 #endif
 
+#ifndef GETTID
+pid_t gettid(void) {return syscall(__NR_gettid);}
+#endif
+
 extern "C" my_bool reopen_fstreams(const char *filename,
                                    FILE *outstream, FILE *errstream);
 
@@ -263,6 +270,28 @@
 
 } /* cplusplus */
 
+#ifdef  __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+extern void * (*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+extern void (*governor_lve_exit)(uint32_t *);
+extern void (*governor_lve_exit_null)();
+extern int (*governor_lve_enter_pid)(pid_t);
+#ifdef  __cplusplus
+}
+#endif
+
+volatile int governor_get_command = 0;
+int (*connect_to_server)() = NULL;
+int (*send_info_begin)(char *) = NULL;
+int (*send_info_end)(char *) = NULL;
+int (*close_sock)() = NULL;
+void * governor_library_handle = NULL;
+
 #define MYSQL_KILL_SIGNAL SIGTERM
 
 #include <my_pthread.h>			// For thr_setconcurency()
@@ -2117,6 +2146,20 @@
   free_global_index_stats();
   delete_dynamic(&all_options);
   free_all_rpl_filters();
+
+  governor_detroy_mysql_thread_info();
+
+  if(governor_destroy_lve){
+         governor_destroy_lve();
+  }
+
+  if(close_sock){
+         (*close_sock)();
+  }
+  if (governor_library_handle) {
+         dlclose(governor_library_handle);
+  }
+
 #ifdef HAVE_REPLICATION
   end_slave_list();
 #endif
@@ -3761,6 +3804,10 @@
   {"drop_user",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_USER]), SHOW_LONG_STATUS},
   {"drop_view",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_VIEW]), SHOW_LONG_STATUS},
   {"empty_query",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EMPTY_QUERY]), SHOW_LONG_STATUS},
+  {"enable_governor",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_lve",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR_LVE]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn_lve",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR_LVE]), SHOW_LONG_STATUS},
   {"execute_sql",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EXECUTE]), SHOW_LONG_STATUS},
   {"flush",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_FLUSH]), SHOW_LONG_STATUS},
   {"get_diagnostics",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_GET_DIAGNOSTICS]), SHOW_LONG_STATUS},
@@ -3776,6 +3823,7 @@
   {"kill",                 (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_KILL]), SHOW_LONG_STATUS},
   {"load",                 (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_LOAD]), SHOW_LONG_STATUS},
   {"lock_tables",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_LOCK_TABLES]), SHOW_LONG_STATUS},
+  {"lvecmd",               (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_LVECMD]), SHOW_LONG_STATUS},  
   {"optimize",             (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_OPTIMIZE]), SHOW_LONG_STATUS},
   {"preload_keys",         (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_PRELOAD_KEYS]), SHOW_LONG_STATUS},
   {"prepare_sql",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_PREPARE]), SHOW_LONG_STATUS},
@@ -8076,6 +8124,7 @@
   {"Delayed_errors",           (char*) &delayed_insert_errors,  SHOW_LONG},
   {"Delayed_insert_threads",   (char*) &delayed_insert_threads, SHOW_LONG_NOFLUSH},
   {"Delayed_writes",           (char*) &delayed_insert_writes,  SHOW_LONG},
+  {"Enable_governor",           (char*) &governor_get_command,  SHOW_INT},
   {"Empty_queries",            (char*) offsetof(STATUS_VAR, empty_queries), SHOW_LONG_STATUS},
   {"Executed_events",          (char*) &executed_events, SHOW_LONG_NOFLUSH },
   {"Executed_triggers",        (char*) offsetof(STATUS_VAR, executed_triggers), SHOW_LONG_STATUS},
@@ -8355,6 +8404,24 @@
 }
 #endif /*!EMBEDDED_LIBRARY*/
 
+void governor_set_fn_ptr_to_null(){
+       governor_load_lve_library = NULL;
+       governor_init_lve = NULL;
+       governor_destroy_lve = NULL;
+       governor_enter_lve = NULL;
+       governor_lve_exit = NULL;
+       governor_enter_lve_light = NULL;
+       governor_lve_exit_null = NULL;
+       governor_lve_enter_pid = NULL;
+}
+
+void governor_set_fn2_ptr_to_null(){
+       connect_to_server = NULL;
+       send_info_begin = NULL;
+       send_info_end = NULL;
+       close_sock = NULL;
+}
+
 /**
   Initialize MySQL global variables to default values.
 
@@ -8572,6 +8639,111 @@
   if (wsrep_init_vars())
     return 1;
 
+    governor_get_command = 0;
+    connect_to_server = NULL;
+    send_info_begin = NULL;
+    send_info_end = NULL;
+    close_sock = NULL;
+    governor_library_handle = NULL;
+
+    char *error_dl = NULL;
+    governor_library_handle = dlopen("libgovernor.so", RTLD_LAZY);
+    if (governor_library_handle) {
+           sql_print_information("libgovernor.so found");
+           while(1){
+                   connect_to_server = (int (*)())dlsym(governor_library_handle, "connect_to_server");
+                   if ((error_dl = dlerror()) != NULL){
+                           governor_set_fn2_ptr_to_null();
+                           break;
+                   }
+                   send_info_begin = (int (*)(char *))dlsym(governor_library_handle, "send_info_begin");
+                   if ((error_dl = dlerror()) != NULL){
+                           governor_set_fn2_ptr_to_null();
+                           break;
+                   }
+                   send_info_end = (int (*)(char *))dlsym(governor_library_handle, "send_info_end");
+                   if ((error_dl = dlerror()) != NULL){
+                           governor_set_fn2_ptr_to_null();
+                           break;
+                   }
+                   close_sock = (int (*)())dlsym(governor_library_handle, "close_sock");
+                   if ((error_dl = dlerror()) != NULL){
+                           governor_set_fn2_ptr_to_null();
+                           break;
+                   }
+                   sql_print_information("All governors functions found too");
+                   break;
+           }
+    } else {
+           sql_print_information("libgovernor.so not found");
+    }
+    if(connect_to_server){
+           if(!(*connect_to_server)()){
+                   sql_print_information("Governor connected");
+           } else {
+                   sql_print_error("Governor not connected");
+           }
+    }
+    if (governor_library_handle){
+
+           while(1){
+                   governor_load_lve_library = (void * (*)())dlsym(governor_library_handle, "governor_load_lve_library");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+                   governor_init_lve = (int (*)())dlsym(governor_library_handle, "governor_init_lve");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+                   governor_destroy_lve = (void (*)())dlsym(governor_library_handle, "governor_destroy_lve");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                     break;
+                   }
+                   governor_enter_lve = (int (*)(uint32_t *, char *))dlsym(governor_library_handle, "governor_enter_lve");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+
+                   governor_lve_exit = (void (*)(uint32_t *))dlsym(governor_library_handle, "governor_lve_exit");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+
+                   governor_enter_lve_light = (int (*)(uint32_t *))dlsym(governor_library_handle, "governor_enter_lve_light");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+
+                   governor_lve_exit_null = (void (*)(void))dlsym(governor_library_handle, "governor_lve_exit_null");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+
+                   governor_lve_enter_pid = (int (*)(pid_t))dlsym(governor_library_handle, "governor_lve_enter_pid");
+                   if ((error_dl = dlerror()) != NULL){
+                         governor_set_fn_ptr_to_null();
+                         break;
+                   }
+
+                   sql_print_information("All governors lve functions found too");
+                   break;
+            }
+
+    }
+
+    if(governor_load_lve_library){
+           if(!governor_load_lve_library()){
+                   sql_print_information("Can't get LVE functions");
+           }
+    }
+
   return 0;
 }
 
@@ -9304,6 +9476,7 @@
 #endif
   if (opt_log || global_system_variables.sql_log_slow || opt_bin_log)
     strmov(end, "-log");                        // This may slow down system
+  end= strmov(end, "-cll-lve");
 }
 
 
diff -Naur a/sql/mysqld.h b/sql/mysqld.h
--- a/sql/mysqld.h	2014-10-16 01:53:52.000000000 +0300
+++ b/sql/mysqld.h	2014-10-28 13:33:26.470670657 +0200
@@ -16,6 +16,8 @@
 #ifndef MYSQLD_INCLUDED
 #define MYSQLD_INCLUDED
 
+#include <stdint.h>
+
 #include "my_global.h" /* MYSQL_PLUGIN_IMPORT, FN_REFLEN, FN_EXTLEN */
 #include "sql_bitmap.h"                         /* Bitmap */
 #include "my_decimal.h"                         /* my_decimal */
@@ -132,6 +134,14 @@
 extern ulong tc_log_page_waits;
 extern my_bool relay_log_purge, opt_innodb_safe_binlog, opt_innodb;
 extern my_bool relay_log_recovery;
+
+extern volatile int governor_get_command;
+extern int (*connect_to_server)();
+extern int (*send_info_begin)(char *);
+extern int (*send_info_end)(char *);
+extern int (*close_sock)();
+extern void * governor_library_handle;
+
 extern uint test_flags,select_errors,ha_open_options;
 extern uint protocol_version, mysqld_port, dropping_tables;
 extern ulong delay_key_write_options;
@@ -642,6 +652,14 @@
 }
 
 
+extern "C" pid_t gettid(void);
+
+void set_governor_variable();
+void set_governor_variable_reconn();
+void set_governor_variable_lve();
+void set_governor_variable_reconn_lve();
+
+
 /*
   TODO: Replace this with an inline function.
  */
diff -Naur a/sql/sql_acl.cc b/sql/sql_acl.cc
--- a/sql/sql_acl.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_acl.cc	2014-10-28 13:33:26.494670614 +0200
@@ -1301,7 +1301,7 @@
         {
           /* Starting from 5.0.3 we have max_user_connections field */
           ptr= get_field(thd->mem_root, table->field[next_field++]);
-          user.user_resource.user_conn= ptr ? atoi(ptr) : 0;
+          user.user_resource.user_conn= ptr ? atoll(ptr) : 0;
         }
 
         if (!is_role && table->s->fields >= 41)
@@ -12273,6 +12273,7 @@
       can't let the user change max_user_connections from 0 in the server
       without a restart as it would lead to wrong connect counting.
     */
+    
     if ((acl_user->user_resource.questions ||
          acl_user->user_resource.updates ||
          acl_user->user_resource.conn_per_hour ||
diff -Naur a/sql/sql_class.cc b/sql/sql_class.cc
--- a/sql/sql_class.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_class.cc	2014-10-28 13:33:26.519670570 +0200
@@ -927,6 +927,8 @@
 {
   ulong tmp;
 
+  thread_tid_cll = 0;
+
   mdl_context.init(this);
   /*
     We set THR_THD to temporally point to this THD to register all the
@@ -1527,6 +1529,7 @@
 
 void THD::init_for_queries()
 {
+  thread_tid_cll = gettid();
   set_time(); 
   ha_enable_transaction(this,TRUE);
 
diff -Naur a/sql/sql_class.h b/sql/sql_class.h
--- a/sql/sql_class.h	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_class.h	2014-10-28 13:33:26.551670515 +0200
@@ -2506,6 +2506,9 @@
       killed= ABORT_QUERY;
   }
 
+  const USER_CONN* get_user_connect()
+  { return user_connect; }
+
   USER_CONN *user_connect;
   CHARSET_INFO *db_charset;
 #if defined(ENABLED_PROFILING)
@@ -2542,6 +2545,7 @@
   ulong      query_plan_flags; 
   ulong      query_plan_fsort_passes; 
   pthread_t  real_id;                           /* For debugging */
+  pid_t      thread_tid_cll;
   my_thread_id  thread_id;
   uint	     tmp_table, global_disable_checkpoint;
   uint	     server_status,open_options;
diff -Naur a/sql/sql_cmd.h b/sql/sql_cmd.h
--- a/sql/sql_cmd.h	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_cmd.h	2014-10-28 13:44:20.387245303 +0200
@@ -88,6 +88,8 @@
   SQLCOM_SIGNAL, SQLCOM_RESIGNAL,
   SQLCOM_SHOW_RELAYLOG_EVENTS,
   SQLCOM_GET_DIAGNOSTICS,
+  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_SHOW_THREAD_STATS, SQLCOM_ENABLE_GOVERNOR, SQLCOM_ENABLE_RECONN_GOVERNOR,
+  SQLCOM_ENABLE_GOVERNOR_LVE, SQLCOM_ENABLE_RECONN_GOVERNOR_LVE, SQLCOM_LVECMD,
   SQLCOM_SLAVE_ALL_START, SQLCOM_SLAVE_ALL_STOP,
   SQLCOM_SHOW_EXPLAIN, SQLCOM_SHUTDOWN,
   SQLCOM_CREATE_ROLE, SQLCOM_DROP_ROLE, SQLCOM_GRANT_ROLE, SQLCOM_REVOKE_ROLE,
diff -Naur a/sql/sql_connect.cc b/sql/sql_connect.cc
--- a/sql/sql_connect.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_connect.cc	2014-10-28 13:33:26.585670454 +0200
@@ -1256,6 +1256,7 @@
 pthread_handler_t handle_one_connection(void *arg)
 {
   THD *thd= (THD*) arg;
+  thd->thread_tid_cll = gettid();
 
   mysql_thread_set_psi_id(thd->thread_id);
 
diff -Naur a/sql/sql_list.cc b/sql/sql_list.cc
--- a/sql/sql_list.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_list.cc	2014-10-28 13:33:26.602670424 +0200
@@ -38,6 +38,14 @@
 }
 
 
+void free_list(I_List <i_thd> *list)
+{
+  i_thd *tmp;
+  while ((tmp= list->get()))
+    delete tmp;
+}
+
+
 base_list::base_list(const base_list &rhs, MEM_ROOT *mem_root)
 {
   if (rhs.elements)
diff -Naur a/sql/sql_list.h b/sql/sql_list.h
--- a/sql/sql_list.h	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_list.h	2014-10-28 13:33:26.633670369 +0200
@@ -658,6 +658,15 @@
   i_string(const char* s) : ptr(s) {}
 };
 
+/* DB_GOVERNOR ADDITIONS */
+class i_thd: public ilink
+{
+ public:
+   THD* ptr;
+   i_thd():ptr(0) { }
+   i_thd(THD* s) : ptr(s) {}
+};
+
 /* needed for linked list of two strings for replicate-rewrite-db */
 class i_string_pair: public ilink
 {
@@ -811,5 +820,6 @@
 
 void free_list(I_List <i_string_pair> *list);
 void free_list(I_List <i_string> *list);
+void free_list(I_List <i_thd> *list);
 
 #endif // INCLUDES_MYSQL_SQL_LIST_H
diff -Naur a/sql/sql_parse.cc b/sql/sql_parse.cc
--- a/sql/sql_parse.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_parse.cc	2014-10-28 13:33:26.652670336 +0200
@@ -14,6 +14,7 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA */
 
+#define HAVE_CLOCK_GETTIME 1
 #define MYSQL_LEX 1
 #include "my_global.h"
 #include "sql_priv.h"
@@ -97,6 +98,21 @@
 #include "log_slow.h"
 #include "sql_bootstrap.h"
 
+#ifdef  __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+extern void * (*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+extern void (*governor_lve_exit)(uint32_t *);
+
+#ifdef  __cplusplus
+}
+#endif
+
 #define FLAGSTR(V,F) ((V)&(F)?#F" ":"")
 
 #ifdef WITH_ARIA_STORAGE_ENGINE
@@ -127,6 +143,8 @@
 static bool execute_sqlcom_select(THD *thd, TABLE_LIST *all_tables);
 static void sql_kill(THD *thd, longlong id, killed_state state, killed_type type);
 static void sql_kill_user(THD *thd, LEX_USER *user, killed_state state);
+static void sql_kill_user(THD *thd, char *user, bool only_kill_query);
+static void sql_kill_user_lve(THD *thd, char *user, bool only_kill_query);
 static bool lock_tables_precheck(THD *thd, TABLE_LIST *tables);
 static bool execute_show_status(THD *, TABLE_LIST *);
 static bool execute_rename_table(THD *, TABLE_LIST *, TABLE_LIST *);
@@ -183,6 +201,52 @@
 }
 #endif
 
+void set_governor_variable(){
+	governor_get_command = 1;
+}
+
+void set_governor_variable_reconn(){
+	governor_get_command = 1;
+	if(close_sock){
+	     (*close_sock)();
+	}
+	if(connect_to_server){
+	     if(!(*connect_to_server)()){
+	             sql_print_information("Governor reconnected");
+	     } else {
+	             sql_print_error("Governor not reconnected. Failed connection");
+	     }
+	}
+}
+
+void set_governor_variable_lve(){
+       if(!governor_get_command){
+               if(governor_init_lve){
+                       if(governor_init_lve()){
+                               sql_print_error("Governor LVE initialization error");
+                       }
+               }
+       }
+       governor_get_command = 2;
+}
+
+void set_governor_variable_reconn_lve(){
+       set_governor_variable_reconn();
+       governor_get_command = 2;
+       if(governor_init_lve){
+               if(governor_init_lve()){
+                       sql_print_error("Governor LVE initialization error");
+               }
+       }
+}
+
+
+my_bool chek_governors_avaliable_command(THD *thd){
+       return (thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR
+                       &&thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR_LVE&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR_LVE)&&
+                       (thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]);
+}
+
 
 static bool some_non_temp_table_to_be_updated(THD *thd, TABLE_LIST *tables)
 {
@@ -4676,7 +4740,11 @@
                    MYF(0));
         goto error;
       }
-      sql_kill(thd, it->val_int(), lex->kill_signal, lex->kill_type);
+      if(it->type()==Item::STRING_ITEM){
+         sql_kill_user(thd, it->val_str(0)->c_ptr(), lex->type & ONLY_KILL_QUERY);
+      } else {
+         sql_kill(thd, (ulong)it->val_int(), lex->kill_signal, KILL_TYPE_ID);
+      }
     }
     else
       sql_kill_user(thd, get_current_user(thd, lex->users_list.head()),
@@ -4693,6 +4761,33 @@
     my_error(ER_NOT_SUPPORTED_YET, MYF(0), "embedded server");
 #endif
     break;
+  case SQLCOM_LVECMD:
+      {
+        Item *it= (Item *)lex->value_list.head();
+
+        if (lex->table_or_sp_used())
+        {
+          my_error(ER_NOT_SUPPORTED_YET, MYF(0), "Usage of subqueries or stored "
+                   "function calls as part of this statement");
+          break;
+        }
+
+        if ((!it->fixed && it->fix_fields(lex->thd, &it)) || it->check_cols(1))
+        {
+          my_message(ER_SET_CONSTANTS_ONLY, ER(ER_SET_CONSTANTS_ONLY),
+                  MYF(0));
+          goto error;
+        }
+
+        if(it->type()==Item::STRING_ITEM){
+           sql_kill_user_lve(thd, it->val_str(0)->c_ptr(), lex->type & ONLY_KILL_QUERY);
+        } else {
+           my_error(ER_NOT_SUPPORTED_YET, MYF(0), "LVE by thread ID is not supported yet");
+        }
+
+
+        break;
+      }
 
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
   case SQLCOM_SHOW_GRANTS:
@@ -6885,6 +6980,16 @@
   lex_start(thd);
   mysql_reset_thd_for_next_command(thd);
 
+  if(send_info_begin&&governor_get_command&&chek_governors_avaliable_command(thd)){
+       (*send_info_begin)(thd->security_ctx->user);
+  }
+
+/*  if(governor_enter_lve && (governor_get_command==2) && chek_governors_avaliable_command(thd)){
+         if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0])
+                 governor_enter_lve(&cookie, thd->security_ctx->user);
+  }*/
+
+
   if (query_cache_send_result_to_client(thd, rawbuf, length) <= 0)
   {
     LEX *lex= thd->lex;
@@ -6937,8 +7042,13 @@
                                  &thd->security_ctx->priv_user[0],
                                  (char *) thd->security_ctx->host_or_ip,
                                  0);
-
+          if(governor_enter_lve && (governor_get_command==2) && chek_governors_avaliable_command(thd)){
+        	  if(put_in_lve(thd->security_ctx->user)<0){
+        	       my_error(ER_GET_ERRNO, MYF(0), "Can't enter into LVE");
+        	  }
+          }
           error= mysql_execute_command(thd);
+          lve_thr_exit();
           MYSQL_QUERY_EXEC_DONE(error);
 	}
       }
@@ -6972,6 +7082,15 @@
     status_var_increment(thd->status_var.com_stat[SQLCOM_SELECT]);
     thd->update_stats();
   }
+
+/*  if(governor_lve_exit && (governor_get_command==2) && cookie &&chek_governors_avaliable_command(thd)){
+         governor_lve_exit(&cookie);
+  }*/
+
+  if(send_info_end&&governor_get_command&&chek_governors_avaliable_command(thd)){
+         (*send_info_end)(thd->security_ctx->user);
+  }
+
   DBUG_VOID_RETURN;
 }
 
@@ -8009,6 +8128,24 @@
   }
 }
 
+static void sql_kill_user(THD *thd, char *user, bool only_kill_query)
+{
+  uint error;
+  if (!(error= kill_user_thread(thd, user, only_kill_query))){
+	  if (! thd->killed) my_ok(thd);
+  } else
+    my_error(error, MYF(0), user);
+}
+
+void sql_kill_user_lve(THD *thd, char *user, bool only_kill_query)
+{
+  uint error;
+  if (!(error= kill_user_thread_lve(thd, user, only_kill_query)))
+    my_ok(thd);
+  else
+    my_error(error, MYF(0), user);
+}
+
 
 /** If pointer is not a null pointer, append filename to it. */
 
@@ -9048,3 +9185,106 @@
   }
   return cs;
 }
+
+
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query)
+{
+  THD *tmp;
+  uint error=0;
+  DBUG_ENTER("kill_user_thread");
+  DBUG_PRINT("enter", ("id=%s only_kill=%d", !user?"nop":user, only_kill_query));
+  i_thd *thd_tmp;
+  I_List<i_thd> threads_tmp;
+  threads_tmp.empty();
+  mysql_mutex_lock(&LOCK_thread_count); // For unlink from list
+  I_List_iterator<THD> it(threads);
+  while ((tmp=it++))
+  {
+	if (tmp->get_command() == COM_DAEMON)
+		continue;
+    if((tmp)&&(user)&&(tmp->get_user_connect())&&(tmp->get_user_connect()->user)){
+      if (!strncmp(tmp->get_user_connect()->user,user,16))
+      {
+    	mysql_mutex_lock(&tmp->LOCK_thd_data);  // Lock from delete
+        thd_tmp = new i_thd(tmp);
+        if (thd_tmp) threads_tmp.append(thd_tmp);
+        else mysql_mutex_unlock(&tmp->LOCK_thd_data);
+      }
+    }
+  }
+  mysql_mutex_unlock(&LOCK_thread_count);
+
+  if(!threads_tmp.is_empty())
+  {
+	  I_List_iterator<i_thd> it_tmp(threads_tmp);
+	  while ((thd_tmp=it_tmp++)){
+	      tmp=thd_tmp->ptr;
+
+	      if ((tmp)&&((thd->security_ctx->master_access & SUPER_ACL) ||
+	    		  thd->security_ctx->user_matches(tmp->security_ctx)))
+	      {
+	    	  tmp->awake(only_kill_query ? KILL_QUERY : KILL_CONNECTION);
+	    	  error=0;
+	      }
+	      else
+    	  error=ER_KILL_DENIED_ERROR;
+	      mysql_mutex_unlock(&tmp->LOCK_thd_data);
+  	  }
+	  free_list(&threads_tmp);
+	  threads_tmp.empty();
+  }
+  DBUG_PRINT("exit", ("%d", error));
+  DBUG_RETURN(error);
+}
+
+uint kill_user_thread_lve(THD *thd, char *user, bool only_kill_query)
+{
+
+  DBUG_ENTER("kill_user_thread_lve");
+  THD *tmp;
+  i_thd *thd_tmp;
+  I_List<i_thd> threads_tmp;
+  threads_tmp.empty();
+  uint error=0;//ER_NO_SUCH_THREAD_USER;
+  mysql_mutex_lock(&LOCK_thread_count); // For unlink from list
+  I_List_iterator<THD> it(threads);
+  while ((tmp=it++))
+  {
+    if((tmp)&&(user)&&(tmp->get_user_connect())&&(tmp->get_user_connect()->user)){
+      if (!strncmp(tmp->get_user_connect()->user,user,16))
+      {
+    	  mysql_mutex_lock(&tmp->LOCK_thd_data);  // Lock from delete
+        thd_tmp = new i_thd(tmp);
+        if (thd_tmp) threads_tmp.append(thd_tmp);
+        else mysql_mutex_unlock(&tmp->LOCK_thd_data);
+      }
+    }
+  }
+  mysql_mutex_unlock(&LOCK_thread_count);
+
+  if(!threads_tmp.is_empty()){
+         I_List_iterator<i_thd> it_tmp(threads_tmp);
+         while ((thd_tmp=it_tmp++)){
+                  tmp=thd_tmp->ptr;
+                 if ((tmp)&&((thd->security_ctx->master_access & SUPER_ACL) ||
+                      thd->security_ctx->user_matches(tmp->security_ctx)))
+                 {
+                   if(tmp->thread_tid_cll){
+                       governor_setlve_mysql_thread_info(tmp->thread_tid_cll);
+                   }
+                 } else {
+                         error=ER_KILL_DENIED_ERROR;
+                 }
+                 mysql_mutex_unlock(&tmp->LOCK_thd_data);
+
+         }
+         free_list(&threads_tmp);
+         threads_tmp.empty();
+  }
+
+  DBUG_RETURN(error);
+
+}
+
+
+
diff -Naur a/sql/sql_parse.h b/sql/sql_parse.h
--- a/sql/sql_parse.h	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_parse.h	2014-10-28 13:33:26.669670305 +0200
@@ -50,6 +50,9 @@
 bool parse_sql(THD *thd, Parser_state *parser_state,
                Object_creation_ctx *creation_ctx, bool do_pfs_digest=false);
 
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query);
+uint kill_user_thread_lve(THD *thd, char *user, bool only_kill_query);
+
 void free_items(Item *item);
 void cleanup_items(Item *item);
 
diff -Naur a/sql/sql_prepare.cc b/sql/sql_prepare.cc
--- a/sql/sql_prepare.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_prepare.cc	2014-10-28 13:33:26.691670267 +0200
@@ -2238,6 +2238,7 @@
   case SQLCOM_KILL:
   case SQLCOM_COMPOUND:
   case SQLCOM_SHUTDOWN:
+  case SQLCOM_LVECMD:
     break;
 
   case SQLCOM_PREPARE:
diff -Naur a/sql/sql_select.cc b/sql/sql_select.cc
--- a/sql/sql_select.cc	2014-10-16 01:53:53.000000000 +0300
+++ b/sql/sql_select.cc	2014-10-28 13:33:26.724670208 +0200
@@ -17032,6 +17032,7 @@
 
   save_proc_info=thd->proc_info;
   THD_STAGE_INFO(thd, stage_converting_heap_to_myisam);
+  my_reserve_slot();
 
   new_table.no_rows= table->no_rows;
   if (create_internal_tmp_table(&new_table, table->key_info, start_recinfo,
@@ -17106,10 +17107,12 @@
   if (save_proc_info)
     thd_proc_info(thd, (!strcmp(save_proc_info,"Copying to tmp table") ?
                   "Copying to tmp table on disk" : save_proc_info));
+  my_release_slot();
   DBUG_RETURN(0);
 
  err:
   DBUG_PRINT("error",("Got error: %d",write_err));
+  my_release_slot();
   table->file->print_error(write_err, MYF(0));
 err_killed:
   (void) table->file->ha_rnd_end();
diff -Naur a/sql/sql_yacc.yy b/sql/sql_yacc.yy
--- a/sql/sql_yacc.yy	2014-10-16 01:53:54.000000000 +0300
+++ b/sql/sql_yacc.yy	2014-10-28 13:33:26.744670173 +0200
@@ -1110,6 +1110,10 @@
 %token  ELSE                          /* SQL-2003-R */
 %token  ELSEIF_SYM
 %token  ENABLE_SYM
+%token  ENABLE_GOVERNOR_SYM
+%token  ENABLE_GOVERNOR_RECONN_SYM
+%token  ENABLE_GOVERNOR_LVE_SYM
+%token  ENABLE_GOVERNOR_RECONN_LVE_SYM
 %token  ENCLOSED
 %token  END                           /* SQL-2003-R */
 %token  ENDS_SYM
@@ -1246,6 +1250,7 @@
 %token  LOOP_SYM
 %token  LOW_PRIORITY
 %token  LT                            /* OPERATOR */
+%token  LVECMD_SYM
 %token  MASTER_CONNECT_RETRY_SYM
 %token  MASTER_GTID_POS_SYM
 %token  MASTER_HOST_SYM
@@ -1790,7 +1795,7 @@
         persistent_column_stat_spec persistent_index_stat_spec
         table_column_list table_index_list table_index_name
         check start checksum
-        field_list field_list_item field_spec kill column_def key_def
+        field_list field_list_item field_spec kill lvecmd column_def key_def
         keycache_list keycache_list_or_parts assign_to_keycache
         assign_to_keycache_parts
         preload_list preload_list_or_parts preload_keys preload_keys_parts
@@ -1978,6 +1983,10 @@
         | describe
         | do
         | drop
+        | enable_governor
+        | enable_governor_reconn
+        | enable_governor_lve
+        | enable_governor_reconn_lve
         | execute
         | flush
         | get_diagnostics
@@ -1991,6 +2000,7 @@
         | kill
         | load
         | lock
+        | lvecmd
         | optimize
         | parse_vcol_expr
         | partition_entry
@@ -8106,6 +8116,20 @@
         | CHANGED             { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
         | FOR_SYM UPGRADE_SYM { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
         ;
+       
+lvecmd:
+          LVECMD_SYM lvecmd_option expr
+          {
+            LEX *lex=Lex;
+            lex->value_list.empty();
+            lex->value_list.push_front($3);
+            lex->sql_command= SQLCOM_LVECMD;
+          }
+        ;
+
+lvecmd_option:
+          /* empty */ { Lex->type= ONLY_KILL_QUERY; }
+        ;
 
 optimize:
           OPTIMIZE opt_no_write_to_binlog table_or_tables
@@ -12326,6 +12350,41 @@
     }
   ;
 
+enable_governor:
+          ENABLE_GOVERNOR_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR;
+            set_governor_variable();
+          }
+         ;
+
+enable_governor_reconn:
+          ENABLE_GOVERNOR_RECONN_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR;
+            set_governor_variable_reconn();
+          }
+         ;
+enable_governor_lve:
+          ENABLE_GOVERNOR_LVE_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR_LVE;
+            set_governor_variable_lve();
+          }
+         ;
+
+enable_governor_reconn_lve:
+          ENABLE_GOVERNOR_RECONN_LVE_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR_LVE;
+            set_governor_variable_reconn_lve();
+          }
+         ;
+
 /* Show things */
 
 show:
diff -Naur a/storage/innobase/include/os0file.h b/storage/innobase/include/os0file.h
--- a/storage/innobase/include/os0file.h	2014-10-16 01:54:01.000000000 +0300
+++ b/storage/innobase/include/os0file.h	2014-10-28 13:33:26.764670139 +0200
@@ -223,6 +223,7 @@
 # define register_pfs_file_open_begin(state, locker, key, op, name,	\
 				      src_file, src_line)		\
 do {									\
+        my_reserve_slot();					        \
 	locker = PSI_FILE_CALL(get_thread_file_name_locker)(		\
 		state, key, op, name, &locker);				\
 	if (UNIV_LIKELY(locker != NULL)) {				\
@@ -237,11 +238,13 @@
 		PSI_FILE_CALL(end_file_open_wait_and_bind_to_descriptor)(\
 			locker, file);					\
 	}								\
+	my_release_slot();						\
 } while (0)
 
 # define register_pfs_file_close_begin(state, locker, key, op, name,	\
 				      src_file, src_line)		\
 do {									\
+        my_reserve_slot();					        \
 	locker = PSI_FILE_CALL(get_thread_file_name_locker)(		\
 		state, key, op, name, &locker);				\
 	if (UNIV_LIKELY(locker != NULL)) {				\
@@ -256,11 +259,13 @@
 		PSI_FILE_CALL(end_file_close_wait)(			\
 			locker, result);				\
 	}								\
+	my_release_slot();						\
 } while (0)
 
 # define register_pfs_file_io_begin(state, locker, file, count, op,	\
 				    src_file, src_line)			\
 do {									\
+        my_reserve_slot();					        \
 	locker = PSI_FILE_CALL(get_thread_file_descriptor_locker)(	\
 		state, file, op);					\
 	if (UNIV_LIKELY(locker != NULL)) {				\
@@ -274,6 +279,7 @@
 	if (UNIV_LIKELY(locker != NULL)) {				\
 		PSI_FILE_CALL(end_file_wait)(locker, count);		\
 	}								\
+	my_release_slot();						\
 } while (0)
 #endif /* UNIV_PFS_IO  */
 
diff -Naur a/support-files/mysql.server.sh b/support-files/mysql.server.sh
--- a/support-files/mysql.server.sh	2014-10-16 01:54:07.000000000 +0300
+++ b/support-files/mysql.server.sh	2014-10-28 13:33:26.780670110 +0200
@@ -59,6 +59,20 @@
 
 # The following variables are only set for letting mysql.server find things.
 
+if [ -e /usr/share/lve/dbgovernor/utils/mysql_export ]; then
+. /usr/share/lve/dbgovernor/utils/mysql_export
+else
+get_limit(){
+    return
+}
+set_big_limit(){
+    return
+}
+set_old_limit(){
+    return
+}
+fi
+
 # Set some defaults
 mysqld_pid_file_path=
 if test -z "$basedir"
@@ -323,6 +337,11 @@
   'stop')
     # Stop daemon. We use a signal here to avoid having to know the
     # root password.
+    
+    get_limit
+    set_big_limit
+    sleep 2
+    
 
     if test -s "$mysqld_pid_file_path"
     then
@@ -344,10 +363,12 @@
       then
         rm -f "$lock_file_path"
       fi
+      set_old_limit
       exit $return_value
     else
       log_failure_msg "MySQL server PID file could not be found!"
     fi
+    set_old_limit
     ;;
 
   'restart')
@@ -365,14 +386,19 @@
     ;;
 
   'reload'|'force-reload')
+    get_limit
+    set_big_limit
+    sleep 2
     if test -s "$mysqld_pid_file_path" ; then
       read mysqld_pid <  "$mysqld_pid_file_path"
       kill -HUP $mysqld_pid && log_success_msg "Reloading service MySQL"
       touch "$mysqld_pid_file_path"
     else
       log_failure_msg "MySQL PID file could not be found!"
+      set_old_limit
       exit 1
     fi
+    set_old_limit
     ;;
   'status')
     # First, check to see if pid file exists
