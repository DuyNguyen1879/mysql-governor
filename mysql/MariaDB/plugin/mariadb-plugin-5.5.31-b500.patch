diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index 95850da..c1140d3 100644
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -52,6 +52,7 @@ SET(HEADERS
   my_attribute.h 
   my_compiler.h
   handler_state.h
+  governor.h
 )
 
 INSTALL(FILES ${HEADERS} DESTINATION ${INSTALL_INCLUDEDIR} COMPONENT Development)
diff --git a/include/governor.h b/include/governor.h
new file mode 100644
index 0000000..a274cca
--- /dev/null
+++ b/include/governor.h
@@ -0,0 +1,35 @@
+/*
+ * governor_pthread_wrapper.h
+ *
+ *  Created on: Sep 26, 2012
+ *      Author: alexey
+*/
+
+#ifndef GOVERNOR_PTHREAD_WRAPPER_H_
+#define GOVERNOR_PTHREAD_WRAPPER_H_
+
+#include <stdint.h>
+#include <linux/unistd.h>
+
+__attribute__((noinline)) void governor_release_slot();
+__attribute__((noinline)) void governor_reserve_slot();
+
+#if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+
+#undef pthread_mutex_t
+#undef pthread_mutex_lock
+#undef pthread_mutex_unlock
+#undef pthread_mutex_trylock
+
+__attribute__ ((noinline)) int my_pthread_lvemutex_unlock(pthread_mutex_t *mutex);
+__attribute__ ((noinline)) int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp);
+__attribute__ ((noinline)) int my_pthread_lvemutex_trylock(pthread_mutex_t *mutex);
+#define pthread_mutex_lock(A) my_pthread_lvemutex_lock(A)
+#define pthread_mutex_unlock(A) my_pthread_lvemutex_unlock(&(A)->mutex)
+#define pthread_mutex_trylock(A) my_pthread_lvemutex_trylock(&(A)->mutex)
+#define pthread_mutex_t my_pthread_fastmutex_t
+
+#endif
+
+
+#endif /* GOVERNOR_PTHREAD_WRAPPER_H_ */
diff --git a/include/my_pthread.h b/include/my_pthread.h
index 5a921fe..c80c336 100644
--- a/include/my_pthread.h
+++ b/include/my_pthread.h
@@ -860,4 +860,7 @@ extern uint thd_lib_detected;
 #ifdef  __cplusplus
 }
 #endif
+
+#include <governor.h>
+
 #endif /* _my_ptread_h */
diff --git a/mysys/CMakeLists.txt b/mysys/CMakeLists.txt
index 832cd01..06b8abe 100644
--- a/mysys/CMakeLists.txt
+++ b/mysys/CMakeLists.txt
@@ -37,7 +37,7 @@ SET(MYSYS_SOURCES  array.c charset-def.c charset.c checksum.c default.c
                 safemalloc.c my_new.cc
 				my_atomic.c my_getncpus.c my_safehash.c my_chmod.c my_rnd.c
                                 my_uuid.c wqueue.c waiting_threads.c ma_dyncol.c
-				my_rdtsc.c my_context.c)
+				my_rdtsc.c my_context.c governor.c)
 
 IF (WIN32)
  SET (MYSYS_SOURCES ${MYSYS_SOURCES} my_winthread.c my_wincond.c my_winerr.c my_winfile.c my_windac.c my_conio.c)
diff --git a/mysys/governor.c b/mysys/governor.c
new file mode 100644
index 0000000..d664ad9
--- /dev/null
+++ b/mysys/governor.c
@@ -0,0 +1,93 @@
+/*
+ * governor.c
+ *
+ *  Created on: Aug 9, 2013
+ *      Author: alexey
+ */
+#include <stdio.h>
+#include <string.h>
+#include <dlfcn.h>
+
+#include <my_global.h>
+#if defined(TARGET_OS_LINUX) && !defined (__USE_UNIX98)
+#define __USE_UNIX98			/* To get rw locks under Linux */
+#endif
+
+#include "mysys_priv.h"
+#include "my_static.h"
+#include <m_string.h>
+#include <hash.h>
+
+#include <linux/unistd.h>
+
+#include <my_pthread.h>
+
+#undef pthread_mutex_t
+#undef pthread_mutex_init
+#undef pthread_mutex_lock
+#undef pthread_mutex_unlock
+#undef pthread_mutex_trylock
+#undef pthread_mutex_destroy
+#undef pthread_cond_wait
+#undef pthread_cond_timedwait
+#undef safe_mutex_free_deadlock_data
+
+void (*governor_reserve_slot_external)() = NULL;
+void (*governor_release_slot_external)() = NULL;
+int (*my_pthread_lvemutex_lock_external)(void *) = NULL;
+int (*my_pthread_lvemutex_trylock_external)(pthread_mutex_t *) = NULL;
+int (*my_pthread_lvemutex_unlock_external)(pthread_mutex_t *) = NULL;
+
+#if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+__attribute__((noinline)) int my_pthread_lvemutex_lock(
+		my_pthread_fastmutex_t *mp) {
+	if(my_pthread_lvemutex_lock_external){
+		my_pthread_lvemutex_lock_external((void*)mp);
+	}
+	return my_pthread_fastmutex_lock(mp);
+}
+
+__attribute__((noinline)) int my_pthread_lvemutex_trylock(
+		pthread_mutex_t *mutex) {
+	if(my_pthread_lvemutex_trylock_external){
+		return my_pthread_lvemutex_trylock_external(mutex);
+	} else {
+		return pthread_mutex_trylock(mutex);
+	}
+}
+
+__attribute__((noinline)) int my_pthread_lvemutex_unlock(
+		pthread_mutex_t *mutex) {
+
+	int ret = pthread_mutex_unlock(mutex);
+	if(my_pthread_lvemutex_unlock_external){
+		my_pthread_lvemutex_unlock_external(mutex);
+	}
+	return ret;
+}
+
+#endif
+
+__attribute__((noinline)) void governor_reserve_slot() {
+#if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+	if(governor_reserve_slot_external){
+		governor_reserve_slot_external();
+	}
+#endif
+	return;
+}
+
+__attribute__((noinline)) void governor_release_slot() {
+#if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
+	if(governor_release_slot_external){
+		governor_release_slot_external();
+	}
+#endif
+	return;
+}
+
+
+
+
+
+
diff --git a/plugin/governor/CMakeLists.txt b/plugin/governor/CMakeLists.txt
new file mode 100644
index 0000000..cd8067f
--- /dev/null
+++ b/plugin/governor/CMakeLists.txt
@@ -0,0 +1,10 @@
+LINK_LIBRARIES(dl)
+
+SET( governor_plugin_src plugin_governor.c
+                         plugin_governor.h
+                         plugin_governor_system.c
+                         plugin_governor_system.h
+)
+
+MYSQL_ADD_PLUGIN(governor ${governor_plugin_src}
+  MODULE_ONLY MODULE_OUTPUT_NAME "governor")
diff --git a/plugin/governor/plugin_governor.c b/plugin/governor/plugin_governor.c
new file mode 100644
index 0000000..abd8582
--- /dev/null
+++ b/plugin/governor/plugin_governor.c
@@ -0,0 +1,405 @@
+/* Copyright Cloud Linux Inc 2010-2013 All Rights Reserved
+*
+* Licensed under CLOUD LINUX LICENSE AGREEMENT
+* http://cloudlinux.com/docs/LICENSE.TXT
+*
+*/
+
+#include <stdio.h>
+#include <string.h>
+#include <dlfcn.h>
+
+#include <stdio.h>
+#include <pthread.h>
+#include <mysql/plugin.h>
+#include <mysql/plugin_audit.h>
+#include <mysql/mysqld_error.h>
+#include <mysql/my_global.h>
+
+#include "plugin_governor_system.h"
+#include "plugin_governor.h"
+
+
+#if !defined(__attribute__) && (defined(__cplusplus) || !defined(__GNUC__)  || __GNUC__ == 2 && __GNUC_MINOR__ < 8)
+#define __attribute__(A)
+#endif
+
+#define USERNAMEMAXLEN 16*4
+
+void *(*governor_load_lve_library)();
+int (*governor_init_lve)();
+void (*governor_destroy_lve)();
+int (*governor_enter_lve)(uint32_t *, char *);
+void (*governor_lve_exit)(uint32_t *);
+int (*governor_enter_lve_light)(uint32_t *);
+void (*governor_lve_exit_null)();
+int (*governor_lve_enter_pid)(pid_t);
+
+int (*connect_to_server)();
+int (*send_info_begin)(char *);
+int (*send_info_end)(char *);
+int (*close_sock)();
+void *governor_library_handle;
+
+//----------------------------------------------------------------------
+static volatile long number_governor_of_calls;
+static volatile long number_governor_of_calls_connect;
+static volatile long number_governor_of_calls_disconnect;
+static volatile long number_governor_of_calls_change;
+static volatile int enable_governor = 0;
+
+static int enable_governor_recon_lve_value;
+static int governor_get_command_value;
+
+//----------------------------------------------------------------------
+static MYSQL_SYSVAR_INT
+(
+		enable_governor_recon_lve,
+		enable_governor_recon_lve_value,
+		PLUGIN_VAR_RQCMDARG,
+		"governor var recon status",
+		NULL, NULL, 0, 0, 0L, 0
+);
+
+static MYSQL_SYSVAR_INT
+(
+		governor_get_command,
+		governor_get_command_value,
+		PLUGIN_VAR_RQCMDARG,
+		"governor var command status",
+		NULL, NULL, 0L, 0, 0L, 0
+);
+
+#ifndef GETTID
+static pid_t gettid(void) {return syscall(__NR_gettid);}
+#endif
+
+pid_t governor_gettid(){
+	return gettid();
+}
+
+static void governor_set_fn_ptr_to_null() {
+	governor_load_lve_library = NULL;
+	governor_init_lve = NULL;
+	governor_destroy_lve = NULL;
+	governor_enter_lve = NULL;
+	governor_lve_exit = NULL;
+	governor_enter_lve_light = NULL;
+	governor_lve_exit_null = NULL;
+	governor_lve_enter_pid = NULL;
+}
+
+static void governor_set_fn2_ptr_to_null() {
+	connect_to_server = NULL;
+	send_info_begin = NULL;
+	send_info_end = NULL;
+	close_sock = NULL;
+}
+
+static void governor_write_log(char *msg) {
+	my_printf_error( 0, "%s", MYF(0), msg );
+}
+
+void write_log( char *msg )
+{
+  FILE *gov_plugin;
+
+    gov_plugin = fopen( "/tmp/gov_plugin.log", "a+");
+    if( gov_plugin != NULL )
+    {
+      fprintf( gov_plugin, "%s\n", msg );
+      fclose( gov_plugin );
+    }
+}
+
+int governor_open_library() {
+	int _ret = 0;
+	governor_set_fn2_ptr_to_null();
+	governor_library_handle = NULL;
+	SYSVAR( governor_get_command ) = 0;
+
+	char *error_dl = NULL;
+	governor_library_handle = dlopen("libgovernor.so", RTLD_LAZY);
+	if (governor_library_handle) {
+		//governor_write_log("libgovernor.so found (in plugin)");
+		governor_set_fn2_ptr_to_null();
+		while (1) {
+			connect_to_server = (int(*)()) dlsym(governor_library_handle,
+					"connect_to_server");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn2_ptr_to_null();
+				break;
+			}
+			send_info_begin = (int(*)(char *)) dlsym(governor_library_handle,
+					"send_info_begin");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn2_ptr_to_null();
+				break;
+			}
+			send_info_end = (int(*)(char *)) dlsym(governor_library_handle,
+					"send_info_end");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn2_ptr_to_null();
+				break;
+			}
+			close_sock
+					= (int(*)()) dlsym(governor_library_handle, "close_sock");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn2_ptr_to_null();
+				break;
+			}
+			governor_write_log("All governors functions found too");
+			_ret = 1;
+			break;
+		}
+	} else {
+		governor_write_log("libgovernor.so not found");
+	}
+
+	if (governor_library_handle) {
+		while (1) {
+			governor_load_lve_library = (void * (*)()) dlsym(
+					governor_library_handle, "governor_load_lve_library");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_init_lve = (int(*)()) dlsym(governor_library_handle,
+					"governor_init_lve");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_destroy_lve = (void(*)()) dlsym(governor_library_handle,
+					"governor_destroy_lve");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_enter_lve = (int(*)(uint32_t *, char *)) dlsym(
+					governor_library_handle, "governor_enter_lve");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_lve_exit = (void(*)(uint32_t *)) dlsym(
+					governor_library_handle, "governor_lve_exit");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_enter_lve_light = (int(*)(uint32_t *)) dlsym(
+					governor_library_handle, "governor_enter_lve_light");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_lve_exit_null = (void(*)(void)) dlsym(
+					governor_library_handle, "governor_lve_exit_null");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_lve_enter_pid = (int(*)(pid_t)) dlsym(
+					governor_library_handle, "governor_lve_enter_pid");
+			if ((error_dl = dlerror()) != NULL) {
+				governor_set_fn_ptr_to_null();
+				break;
+			}
+			governor_write_log("All governors lve functions found too");
+			_ret = 1;
+			break;
+		}
+	}
+
+	if (!governor_load_lve_library()) {
+		governor_write_log("Can't get LVE functions");
+	} else {
+		governor_reserve_slot_external = &governor_reserve_slot_plugin;
+		governor_release_slot_external = &governor_release_slot_plugin;
+		my_pthread_lvemutex_lock_external = &governor_my_pthread_lvemutex_lock_plugin;
+		my_pthread_lvemutex_trylock_external = &governor_my_pthread_lvemutex_trylock_plugin;
+		my_pthread_lvemutex_unlock_external = &governor_my_pthread_lvemutex_unlock_plugin;
+
+
+		if(governor_init_lve && governor_init_lve()){
+		          governor_write_log("Governor LVE initialization error");
+		} else {
+			  governor_write_log("Governor LVE initialization complete");
+		}
+	}
+
+
+	return (_ret);
+}
+
+int governor_close_library() {
+
+	governor_detroy_mysql_thread_info();
+
+	if (governor_destroy_lve) {
+		governor_destroy_lve();
+	}
+
+	if (close_sock) {
+		(*close_sock)();
+	}
+
+	if (governor_library_handle) {
+		dlclose(governor_library_handle);
+	}
+
+	governor_set_fn_ptr_to_null();
+	return (0);
+}
+
+//----------------------------------------------------------------------
+static int governor_plugin_init(void *arg __attribute__( (unused) ) ) {
+
+	SYSVAR( enable_governor_recon_lve ) = 0;
+	SYSVAR( governor_get_command ) = 0;
+
+	enable_governor = governor_open_library();
+	return (0);
+}
+
+static int governor_plugin_deinit(void *arg __attribute__( (unused) ) ) {
+
+	governor_reserve_slot_external = NULL;
+	governor_release_slot_external = NULL;
+	my_pthread_lvemutex_lock_external = NULL;
+	my_pthread_lvemutex_trylock_external = NULL;
+	my_pthread_lvemutex_unlock_external = NULL;
+
+	SYSVAR( governor_get_command ) = 0;
+	SYSVAR( enable_governor_recon_lve ) = 0;
+
+	governor_close_library();
+
+	return (0);
+}
+
+void set_governor_variable(){
+       SYSVAR( governor_get_command ) = 1;
+}
+
+void set_governor_variable_reconn(){
+       //SYSVAR( governor_get_command ) = 1;
+       if(close_sock){
+            (*close_sock)();
+       }
+       if(connect_to_server){
+            if(!(*connect_to_server)()){
+            	governor_write_log("Governor reconnected");
+            } else {
+            	governor_write_log("Governor not reconnected. Failed connection");
+            }
+       }
+}
+
+void set_governor_variable_lve(){
+       SYSVAR( governor_get_command ) = 2;
+}
+
+void set_governor_variable_reconn_lve(){
+       set_governor_variable_reconn();
+       //SYSVAR( governor_get_command ) = 2;
+
+}
+
+
+static void governor_notify(MYSQL_THD thd __attribute__( (unused) ), unsigned int event_class,
+		const void *event) {
+	static __thread char lve_user_therad[ USERNAMEMAXLEN ];
+
+	if (event_class == MYSQL_AUDIT_CONNECTION_CLASS) {
+		const struct mysql_event_connection *event_connection =
+				(const struct mysql_event_connection *) event;
+
+		number_governor_of_calls++;
+		if(( governor_get_command_value > 0 ) && ( enable_governor_recon_lve_value == 0 )) {
+		
+			SYSVAR( enable_governor_recon_lve ) = 1;
+			if(governor_get_command_value == 2)
+			    set_governor_variable_reconn_lve();
+			else
+			    set_governor_variable_reconn();
+		}
+
+
+		switch (event_connection->event_subclass) {
+		case MYSQL_AUDIT_CONNECTION_CONNECT:
+		{
+			number_governor_of_calls_connect++;
+			if (send_info_begin && governor_get_command_value) {
+				(*send_info_begin)(event_connection->user);
+				strcpy( lve_user_therad, event_connection->user );
+			}
+
+			if (governor_enter_lve && (governor_get_command_value == 2)) {
+				if (put_in_lve(event_connection->user) < 0) {
+					governor_write_log("Can't enter into LVE");
+				}
+			}
+		}
+			break;
+		case MYSQL_AUDIT_CONNECTION_DISCONNECT:
+		{
+			number_governor_of_calls_disconnect++;
+			lve_thr_exit();
+			if(send_info_end&& governor_get_command_value){
+			         (*send_info_end)(lve_user_therad);
+			 }
+		}
+			break;
+		case MYSQL_AUDIT_CONNECTION_CHANGE_USER:
+		{
+			number_governor_of_calls_change++;
+		}
+			break;
+		default:
+			break;
+		}
+	}
+}
+
+static struct st_mysql_audit governor_descriptor = {
+		MYSQL_AUDIT_INTERFACE_VERSION, /* interface version    */
+		NULL, /* release_thd function */
+		governor_notify, /* notify function      */
+		{ (unsigned long) MYSQL_AUDIT_GENERAL_CLASSMASK | /* class mask           */
+		MYSQL_AUDIT_CONNECTION_CLASSMASK } };
+
+
+static struct st_mysql_show_var governor_vars[] = { 
+		{ "governor_called", (char *) &number_governor_of_calls, SHOW_LONG },
+		{ "governor_called_connect", (char *) &number_governor_of_calls_connect, SHOW_LONG }, 
+		{ "governor_called_disconnect", (char *) &number_governor_of_calls_disconnect, SHOW_LONG },
+		{ "governor_called_change", (char *) &number_governor_of_calls_change, SHOW_LONG },
+		{"governor_enable", (char *) & governor_get_command_value, SHOW_INT },
+		{"governor_ll_status", (char *) & enable_governor, SHOW_INT },
+		{"governor_recon_status", (char *) & enable_governor_recon_lve_value, SHOW_INT },
+		{ 0, 0, 0 } };
+
+static struct st_mysql_sys_var* governor_system_vars[] = {
+		MYSQL_SYSVAR( enable_governor_recon_lve ),
+		MYSQL_SYSVAR( governor_get_command ),
+		NULL };
+
+mysql_declare_plugin( governor )
+{ MYSQL_AUDIT_PLUGIN, /* type                            */
+&governor_descriptor, /* descriptor                      */
+"GOVERNOR", /* name                            */
+"Cloud Linux Inc", /* author                          */
+"Governor connection", /* description                     */
+PLUGIN_LICENSE_GPL,
+governor_plugin_init, /* init function (when loaded)     */
+governor_plugin_deinit, /* deinit function (when unloaded) */
+0x0002, /* version                         */
+governor_vars, /* status variables                */
+governor_system_vars, /* system variables                */
+NULL,
+0,
+}
+
+mysql_declare_plugin_end;
diff --git a/plugin/governor/plugin_governor.h b/plugin/governor/plugin_governor.h
new file mode 100644
index 0000000..b74e56d
--- /dev/null
+++ b/plugin/governor/plugin_governor.h
@@ -0,0 +1,17 @@
+/* Copyright Cloud Linux Inc 2010-2013 All Rights Reserved
+*
+* Licensed under CLOUD LINUX LICENSE AGREEMENT
+* http://cloudlinux.com/docs/LICENSE.TXT
+*
+* plugin_governor.h
+*
+* Created on: Jul 26, 2013
+*/
+
+#ifndef PLUGIN_GOVERNOR_H
+#define PLUGIN_GOVERNOR_H
+
+int governor_open_library();
+int governor_close_library();
+
+#endif /* PLUGIN_GOVERNOR_H */
diff --git a/plugin/governor/plugin_governor_system.c b/plugin/governor/plugin_governor_system.c
new file mode 100644
index 0000000..95d3f08
--- /dev/null
+++ b/plugin/governor/plugin_governor_system.c
@@ -0,0 +1,271 @@
+/* Copyright Cloud Linux Inc 2010-2013 All Rights Reserved
+*
+* Licensed under CLOUD LINUX LICENSE AGREEMENT
+* http://cloudlinux.com/docs/LICENSE.TXT
+*
+*/
+
+/*
+ * governor.c
+ *
+ *  Created on: Aug 9, 2013
+ *      Author: alexey
+ */
+#include <stdio.h>
+#include <string.h>
+#include <dlfcn.h>
+
+#include <my_global.h>
+#if defined(TARGET_OS_LINUX) && !defined (__USE_UNIX98)
+#define __USE_UNIX98			/* To get rw locks under Linux */
+#endif
+
+#include "../../mysys/mysys_priv.h"
+#include "../../mysys/my_static.h"
+#include <my_pthread.h>
+#include <m_string.h>
+#include <hash.h>
+
+#include <linux/unistd.h>
+
+
+
+#include <my_pthread.h>
+
+
+
+#undef pthread_mutex_t
+#undef pthread_mutex_init
+#undef pthread_mutex_lock
+#undef pthread_mutex_unlock
+#undef pthread_mutex_trylock
+#undef pthread_mutex_destroy
+#undef pthread_cond_wait
+#undef pthread_cond_timedwait
+#undef safe_mutex_free_deadlock_data
+
+#include "plugin_governor_system.h"
+#include "plugin_governor.h"
+
+extern void *(*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern void (*governor_lve_exit)(uint32_t *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+extern void (*governor_lve_exit_null)();
+extern int (*governor_lve_enter_pid)(pid_t);
+
+extern int (*connect_to_server)();
+extern int (*send_info_begin)(char *);
+extern int (*send_info_end)(char *);
+extern int (*close_sock)();
+
+
+//LVE functions for thr_mutex
+__thread uint32_t lve_cookie = 0;
+
+pthread_mutex_t mtx = PTHREAD_MUTEX_INITIALIZER;
+
+typedef struct __mysql_mutex {
+	pid_t key;
+	int8 is_in_lve;
+	int8 is_in_mutex;
+	int8 put_in_lve;
+} mysql_mutex;
+
+static HASH mysql_lve_mutex_governor;
+
+__thread mysql_mutex *mysql_lve_mutex_governor_ptr = 0;
+
+pthread_mutex_t mtx_mysql_lve_mutex_governor_ptr = PTHREAD_MUTEX_INITIALIZER;
+
+static void governor_value_destroyed(void *ptr) {
+	free(ptr);
+}
+
+int governor_add_mysql_thread_info() {
+	pid_t buf = 0;
+	pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+	mysql_mutex *mm = NULL;
+
+	if (!my_hash_inited(&mysql_lve_mutex_governor)) {
+		my_hash_init2(&mysql_lve_mutex_governor, 64, &my_charset_bin, 64,
+				offsetof(mysql_mutex, key), sizeof(pid_t),
+				(my_hash_get_key) 0, governor_value_destroyed, HASH_UNIQUE);
+		if (!my_hash_inited(&mysql_lve_mutex_governor)) {
+			pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+			return -1;
+		}
+
+	}
+
+	buf = syscall(__NR_gettid);
+	mm = (mysql_mutex *) my_hash_search(&mysql_lve_mutex_governor,
+			(uchar *) &buf, sizeof(buf));
+	if (!mm) {
+		mm = (mysql_mutex *) calloc(1, sizeof(mysql_mutex));
+		if (!mm)
+			return -1;
+		mm->key = syscall(__NR_gettid);
+		if (my_hash_insert(&mysql_lve_mutex_governor, (uchar *) mm)) {
+			free(mm);
+			pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+			return -1;
+		}
+	}
+	pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+	mysql_lve_mutex_governor_ptr = mm;
+	return 0;
+}
+
+void governor_remove_mysql_thread_info() {
+	pid_t buf = 0;
+	pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+	mysql_mutex *mm = NULL;
+	if (my_hash_inited(&mysql_lve_mutex_governor)) {
+		buf = syscall(__NR_gettid);
+		mm = (mysql_mutex *) my_hash_search(&mysql_lve_mutex_governor,
+				(uchar *) &buf, sizeof(buf));
+		if (mm)
+			my_hash_delete(&mysql_lve_mutex_governor, (uchar *) mm);
+	}
+	pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+	mysql_lve_mutex_governor_ptr = NULL;
+}
+
+void governor_setlve_mysql_thread_info(pid_t thread_id) {
+	pid_t buf = 0;
+	pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+	mysql_mutex *mm = NULL;
+	if (my_hash_inited(&mysql_lve_mutex_governor)) {
+		buf = thread_id;
+		mm = (mysql_mutex *) my_hash_search(&mysql_lve_mutex_governor,
+				(uchar *) &buf, sizeof(buf));
+		if (mm) {
+			if (!mm->is_in_lve) {
+				mm->put_in_lve = 1;
+			}
+		}
+	}
+	pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+	thread_id = 0;
+	return;
+}
+
+void governor_detroy_mysql_thread_info() {
+	if (my_hash_inited(&mysql_lve_mutex_governor)) {
+		pthread_mutex_lock(&mtx_mysql_lve_mutex_governor_ptr);
+		my_hash_free(&mysql_lve_mutex_governor);
+		pthread_mutex_unlock(&mtx_mysql_lve_mutex_governor_ptr);
+	}
+	return;
+}
+
+__attribute__((noinline)) int put_in_lve(char *user) {
+	if (governor_add_mysql_thread_info() < 0)
+		return -1;
+	if (mysql_lve_mutex_governor_ptr) {
+		int res = -1;
+		res = governor_enter_lve(&lve_cookie, user);
+		if (!res) {
+			mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+		}
+		mysql_lve_mutex_governor_ptr->is_in_mutex = 0;
+	}
+	return 0;
+}
+
+__attribute__((noinline)) void lve_thr_exit() {
+	if (mysql_lve_mutex_governor_ptr && mysql_lve_mutex_governor_ptr->is_in_lve
+			== 1) {
+		governor_lve_exit(&lve_cookie);
+		mysql_lve_mutex_governor_ptr->is_in_lve = 0;
+	}
+	governor_remove_mysql_thread_info();
+	return;
+}
+
+__attribute__((noinline)) int governor_my_pthread_lvemutex_lock_plugin(
+		void *mp) {
+	if (mysql_lve_mutex_governor_ptr) {
+		if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+			governor_lve_exit(&lve_cookie);
+			mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+		} else if (mysql_lve_mutex_governor_ptr->is_in_lve > 1) {
+			mysql_lve_mutex_governor_ptr->is_in_lve++;
+		}
+		mysql_lve_mutex_governor_ptr->is_in_mutex++;
+	}
+	return 0;
+}
+
+__attribute__((noinline)) int governor_my_pthread_lvemutex_trylock_plugin(
+		pthread_mutex_t *mutex) {
+	if (mysql_lve_mutex_governor_ptr) {
+		if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+			governor_lve_exit(&lve_cookie);
+		}
+	}
+	int ret = pthread_mutex_trylock(mutex);
+	if (mysql_lve_mutex_governor_ptr) {
+		if (ret != EBUSY) {
+			if (mysql_lve_mutex_governor_ptr->is_in_lve >= 1) {
+				mysql_lve_mutex_governor_ptr->is_in_lve++;
+			}
+			mysql_lve_mutex_governor_ptr->is_in_mutex++;
+		} else {
+			if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+				if (governor_enter_lve_light(&lve_cookie)) {
+					mysql_lve_mutex_governor_ptr->is_in_lve = 0;
+				}
+			}
+		}
+	}
+	return ret;
+}
+
+__attribute__((noinline)) int governor_my_pthread_lvemutex_unlock_plugin(
+		pthread_mutex_t *mutex) {
+	if (mysql_lve_mutex_governor_ptr) {
+		if ((mysql_lve_mutex_governor_ptr->is_in_lve == 2)
+				&& governor_enter_lve_light) {
+			if (!governor_enter_lve_light(&lve_cookie)) {
+				mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+			}
+		} else if (mysql_lve_mutex_governor_ptr->is_in_lve > 2) {
+			mysql_lve_mutex_governor_ptr->is_in_lve--;
+		}
+		mysql_lve_mutex_governor_ptr->is_in_mutex--;
+	}
+	return 0;
+}
+
+
+__attribute__((noinline)) void governor_reserve_slot_plugin() {
+	if (mysql_lve_mutex_governor_ptr) {
+		if (mysql_lve_mutex_governor_ptr->is_in_lve == 1) {
+			governor_lve_exit(&lve_cookie);
+			mysql_lve_mutex_governor_ptr->is_in_lve = 2;
+		} else if (mysql_lve_mutex_governor_ptr->is_in_lve > 1) {
+			mysql_lve_mutex_governor_ptr->is_in_lve++;
+		}
+		mysql_lve_mutex_governor_ptr->is_in_mutex++;
+	}
+	return;
+}
+
+__attribute__((noinline)) void governor_release_slot_plugin() {
+	if (mysql_lve_mutex_governor_ptr) {
+		if ((mysql_lve_mutex_governor_ptr->is_in_lve == 2)
+				&& governor_enter_lve_light) {
+			if (!governor_enter_lve_light(&lve_cookie)) {
+				mysql_lve_mutex_governor_ptr->is_in_lve = 1;
+			}
+		} else if (mysql_lve_mutex_governor_ptr->is_in_lve > 2) {
+			mysql_lve_mutex_governor_ptr->is_in_lve--;
+		}
+		mysql_lve_mutex_governor_ptr->is_in_mutex--;
+	}
+	return;
+}
diff --git a/plugin/governor/plugin_governor_system.h b/plugin/governor/plugin_governor_system.h
new file mode 100644
index 0000000..888aaf5
--- /dev/null
+++ b/plugin/governor/plugin_governor_system.h
@@ -0,0 +1,45 @@
+/* Copyright Cloud Linux Inc 2010-2013 All Rights Reserved
+*
+* Licensed under CLOUD LINUX LICENSE AGREEMENT
+* http://cloudlinux.com/docs/LICENSE.TXT
+*
+*/
+
+#ifndef PLUGIN_GOVERNOR_SYSTEM_H_
+#define PLUGIN_GOVERNOR_SYSTEM_H_
+
+#include <stdint.h>
+#include <linux/unistd.h>
+
+void set_governor_variable();
+void set_governor_variable_reconn();
+void set_governor_variable_lve();
+void set_governor_variable_reconn_lve();
+
+pid_t governor_gettid();
+
+void send_info_governor_end(void *thd, char *user);
+void enter_lve_governor_end();
+void enter_lve_governor_begin(void *thd, char *user);
+void send_info_governor_begin(void *thd, char *user);
+
+int put_in_lve(char *user);
+void lve_thr_exit();
+void governor_setlve_mysql_thread_info(pid_t thread_id);
+void governor_detroy_mysql_thread_info();
+__attribute__((noinline)) void governor_release_slot_plugin();
+__attribute__((noinline)) void governor_reserve_slot_plugin();
+
+
+__attribute__ ((noinline)) int governor_my_pthread_lvemutex_unlock_plugin(pthread_mutex_t *mutex);
+__attribute__ ((noinline)) int governor_my_pthread_lvemutex_lock_plugin(void *mp);
+__attribute__ ((noinline)) int governor_my_pthread_lvemutex_trylock_plugin(pthread_mutex_t *mutex);
+
+extern void (*governor_reserve_slot_external)();
+extern void (*governor_release_slot_external)();
+extern int (*my_pthread_lvemutex_lock_external)(void *);
+//extern int (*my_pthread_lvemutex_lock_external)(my_pthread_fastmutex_t *mp);
+extern int (*my_pthread_lvemutex_trylock_external)(pthread_mutex_t *);
+extern int (*my_pthread_lvemutex_unlock_external)(pthread_mutex_t *);
+
+#endif /* PLUGIN_GOVERNOR_SYSTEM_H_ */
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index d743be0..2fcac41 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -8065,6 +8065,7 @@ void set_server_version(void)
 #endif
   if (opt_log || opt_slow_log || opt_bin_log)
     strmov(end, "-log");                        // This may slow down system
+  end= strmov(end, "-cll-lve-plg");
 }
 
 
diff --git a/sql/sql_select.cc b/sql/sql_select.cc
index 3951203..063f6b2 100644
--- a/sql/sql_select.cc
+++ b/sql/sql_select.cc
@@ -15677,6 +15677,7 @@ create_internal_tmp_table_from_heap2(THD *thd, TABLE *table,
 
   save_proc_info=thd->proc_info;
   thd_proc_info(thd, proc_info);
+  governor_reserve_slot();
 
   new_table.no_rows= table->no_rows;
   if (create_internal_tmp_table(&new_table, table->key_info, start_recinfo,
@@ -15745,10 +15746,12 @@ create_internal_tmp_table_from_heap2(THD *thd, TABLE *table,
   if (save_proc_info)
     thd_proc_info(thd, save_proc_info == copy_to_tmp_table ?
                   "Copying to tmp table on disk" : save_proc_info);
+  governor_release_slot();
   DBUG_RETURN(0);
 
  err:
   DBUG_PRINT("error",("Got error: %d",write_err));
+  governor_release_slot();
   table->file->print_error(write_err, MYF(0));
 err_killed:
   (void) table->file->ha_rnd_end();
diff --git a/storage/innobase/include/os0file.h b/storage/innobase/include/os0file.h
index 8ef0906..b8a9a35 100644
--- a/storage/innobase/include/os0file.h
+++ b/storage/innobase/include/os0file.h
@@ -204,6 +204,7 @@ used to register actual file read, write and flush */
 # define register_pfs_file_open_begin(state, locker, key, op, name,	\
 				      src_file, src_line)		\
 do {									\
+    governor_reserve_slot();					\
 	if (PSI_server) {						\
 		locker = PSI_server->get_thread_file_name_locker(	\
 			state, key, op, name, &locker);			\
@@ -220,11 +221,13 @@ do {									\
 		PSI_server->end_file_open_wait_and_bind_to_descriptor(	\
 			locker, file);					\
 	}								\
+	governor_release_slot();						\
 } while (0)
 
 # define register_pfs_file_io_begin(state, locker, file, count, op,	\
 				    src_file, src_line)			\
 do {									\
+	governor_reserve_slot();					\
 	if (PSI_server) {						\
 		locker = PSI_server->get_thread_file_descriptor_locker(	\
 			state, file, op);				\
@@ -240,6 +243,7 @@ do {									\
 	if (locker) {							\
 		PSI_server->end_file_wait(locker, count);		\
 	}								\
+	governor_release_slot();						\
 } while (0)
 #endif /* UNIV_PFS_IO  */
 
diff --git a/storage/innobase/os/os0file.c b/storage/innobase/os/os0file.c
index 0d036f6..e2c01cd 100644
--- a/storage/innobase/os/os0file.c
+++ b/storage/innobase/os/os0file.c
@@ -3834,6 +3834,7 @@ os_aio_array_reserve_slot(
 				offset */
 	ulint		len)	/*!< in: length of the block to read or write */
 {
+    governor_reserve_slot();
 	os_aio_slot_t*	slot = NULL;
 #ifdef WIN_ASYNC_IO
 	OVERLAPPED*	control;
@@ -3977,6 +3978,7 @@ os_aio_array_free_slot(
 	os_aio_array_t*	array,	/*!< in: aio array */
 	os_aio_slot_t*	slot)	/*!< in: pointer to slot */
 {
+    governor_release_slot();
 	ut_ad(array);
 	ut_ad(slot);
 
diff --git a/storage/innobase/srv/srv0srv.c b/storage/innobase/srv/srv0srv.c
index 86caf9d..198cfdb 100644
--- a/storage/innobase/srv/srv0srv.c
+++ b/storage/innobase/srv/srv0srv.c
@@ -1148,6 +1148,7 @@ srv_conc_enter_innodb(
 	ibool			has_slept = FALSE;
 	srv_conc_slot_t*	slot	  = NULL;
 	ulint			i;
+    governor_reserve_slot();
 
 #ifdef UNIV_SYNC_DEBUG
 	ut_ad(!sync_thread_levels_nonempty_trx(trx->has_search_latch));
@@ -1315,6 +1316,7 @@ srv_conc_force_enter_innodb(
 	trx_t*	trx)	/*!< in: transaction object associated with the
 			thread */
 {
+    governor_reserve_slot();
 #ifdef UNIV_SYNC_DEBUG
 	ut_ad(!sync_thread_levels_nonempty_trx(trx->has_search_latch));
 #endif /* UNIV_SYNC_DEBUG */
@@ -1346,6 +1348,7 @@ srv_conc_force_exit_innodb(
 			thread */
 {
 	srv_conc_slot_t*	slot	= NULL;
+    governor_release_slot();
 
 	if (trx->mysql_thd != NULL
 	    && thd_is_replication_slave_thread(trx->mysql_thd)) {
@@ -1405,6 +1408,7 @@ srv_conc_exit_innodb(
 	trx_t*	trx)	/*!< in: transaction object associated with the
 			thread */
 {
+    governor_release_slot();
 #ifdef UNIV_SYNC_DEBUG
 	ut_ad(!sync_thread_levels_nonempty_trx(trx->has_search_latch));
 #endif /* UNIV_SYNC_DEBUG */
diff --git a/support-files/mysql.server.sh b/support-files/mysql.server.sh
index 545831f..6507581 100644
--- a/support-files/mysql.server.sh
+++ b/support-files/mysql.server.sh
@@ -59,6 +59,33 @@ lock_file_path="$lockdir/mysql"
 
 # The following variables are only set for letting mysql.server find things.
 
+cpu_limit=
+io_limit=
+
+get_limit(){
+  if [ -e /usr/sbin/lvectl ]; then
+        LVE_VER=`/usr/sbin/lvectl --lve-version`
+        if [ "$LVE_VER" == "4" ]; then
+            io_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $6}'`
+        else
+            io_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $8}'`
+        fi
+        cpu_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $2}'`
+  fi
+}
+
+set_big_limit(){
+    if [ -e /usr/sbin/lvectl ]; then
+	/usr/sbin/lvectl set 3 --cpu=100 --io=0 --save-all-parameters
+    fi
+}
+
+set_old_limit(){
+    if [ -e /usr/sbin/lvectl ]; then
+	/usr/sbin/lvectl set 3 --cpu=$cpu_limit --io=$io_limit --save-all-parameters
+    fi
+}
+
 # Set some defaults
 mysqld_pid_file_path=
 if test -z "$basedir"
@@ -309,6 +336,11 @@ case "$mode" in
   'stop')
     # Stop daemon. We use a signal here to avoid having to know the
     # root password.
+    
+    get_limit
+    set_big_limit
+    sleep 2
+    
 
     if test -s "$mysqld_pid_file_path"
     then
@@ -330,10 +362,12 @@ case "$mode" in
       then
         rm -f "$lock_file_path"
       fi
+      set_old_limit
       exit $return_value
     else
       log_failure_msg "MySQL server PID file could not be found!"
     fi
+    set_old_limit
     ;;
 
   'restart')
@@ -348,14 +382,19 @@ case "$mode" in
     ;;
 
   'reload'|'force-reload')
+    get_limit
+    set_big_limit
+    sleep 2
     if test -s "$mysqld_pid_file_path" ; then
       read mysqld_pid <  "$mysqld_pid_file_path"
       kill -HUP $mysqld_pid && log_success_msg "Reloading service MySQL"
       touch "$mysqld_pid_file_path"
     else
       log_failure_msg "MySQL PID file could not be found!"
+      set_old_limit
       exit 1
     fi
+    set_old_limit
     ;;
   'status')
     # First, check to see if pid file exists
