diff --git a/BUILD/Makefile.in b/BUILD/Makefile.in
index 65cc0ba..1a271bb 100644
--- a/BUILD/Makefile.in
+++ b/BUILD/Makefile.in
@@ -146,6 +146,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/Docs/Makefile.in b/Docs/Makefile.in
index a1d6447..73ca223 100644
--- a/Docs/Makefile.in
+++ b/Docs/Makefile.in
@@ -144,6 +144,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/Makefile.in b/Makefile.in
index c4a404e..733b013 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -171,6 +171,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/SSL/Makefile.in b/SSL/Makefile.in
index 22f9073..b3f2ccc 100644
--- a/SSL/Makefile.in
+++ b/SSL/Makefile.in
@@ -144,6 +144,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/client/Makefile.in b/client/Makefile.in
index 0a09a16..a4f02cf 100644
--- a/client/Makefile.in
+++ b/client/Makefile.in
@@ -248,6 +248,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @CLIENT_LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/cmd-line-utils/Makefile.in b/cmd-line-utils/Makefile.in
index 4493701..9a228b5 100644
--- a/cmd-line-utils/Makefile.in
+++ b/cmd-line-utils/Makefile.in
@@ -157,6 +157,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/cmd-line-utils/libedit/Makefile.in b/cmd-line-utils/libedit/Makefile.in
index b7fefb4..8b4ecb5 100644
--- a/cmd-line-utils/libedit/Makefile.in
+++ b/cmd-line-utils/libedit/Makefile.in
@@ -166,6 +166,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/cmd-line-utils/readline/Makefile.in b/cmd-line-utils/readline/Makefile.in
index 70276bf..65dde67 100644
--- a/cmd-line-utils/readline/Makefile.in
+++ b/cmd-line-utils/readline/Makefile.in
@@ -173,6 +173,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/configure b/configure
index de21e54..14d99ec 100755
--- a/configure
+++ b/configure
@@ -35724,7 +35724,91 @@ case "$target" in
 	# We also disable for SCO for the time being, the headers for the
 	# thread library we use conflicts with other headers.
     ;;
- *)
+*)
+   # most systems require the program be linked with librt library to use
+   # the function clock_gettime
+   my_save_LIBS="$LIBS"
+   LIBS=""
+
+echo "$as_me:$LINENO: checking for clock_gettime in -lrt" >&5
+echo $ECHO_N "checking for clock_gettime in -lrt... $ECHO_C" >&6
+if test "${ac_cv_lib_rt_clock_gettime+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lrt  $LIBS"
+cat >conftest.$ac_ext <<_ACEOF
+/* confdefs.h.  */
+_ACEOF
+cat confdefs.h >>conftest.$ac_ext
+cat >>conftest.$ac_ext <<_ACEOF
+/* end confdefs.h.  */
+
+/* Override any gcc2 internal prototype to avoid an error.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+/* We use char because int might match the return type of a gcc2
+   builtin and then its argument prototype would still apply.  */
+char clock_gettime ();
+int
+main ()
+{
+clock_gettime ();
+  ;
+  return 0;
+}
+_ACEOF
+rm -f conftest.$ac_objext conftest$ac_exeext
+if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
+  (eval $ac_link) 2>conftest.er1
+  ac_status=$?
+  grep -v '^ *+' conftest.er1 >conftest.err
+  rm -f conftest.er1
+  cat conftest.err >&5
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); } &&
+	 { ac_try='test -z "$ac_c_werror_flag"
+			 || test ! -s conftest.err'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; } &&
+	 { ac_try='test -s conftest$ac_exeext'
+  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
+  (eval $ac_try) 2>&5
+  ac_status=$?
+  echo "$as_me:$LINENO: \$? = $ac_status" >&5
+  (exit $ac_status); }; }; then
+  ac_cv_lib_rt_clock_gettime=yes
+else
+  echo "$as_me: failed program was:" >&5
+sed 's/^/| /' conftest.$ac_ext >&5
+
+ac_cv_lib_rt_clock_gettime=no
+fi
+rm -f conftest.err conftest.$ac_objext \
+      conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+echo "$as_me:$LINENO: result: $ac_cv_lib_rt_clock_gettime" >&5
+echo "${ECHO_T}$ac_cv_lib_rt_clock_gettime" >&6
+if test $ac_cv_lib_rt_clock_gettime = yes; then
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_LIBRT 1
+_ACEOF
+
+  LIBS="-lrt $LIBS"
+
+fi
+
+   LIBRT=$LIBS
+   LIBS="$my_save_LIBS"
+
+
+   LIBS="$LIBS $LIBRT"
+
 for ac_func in clock_gettime
 do
 as_ac_var=`$as_echo "ac_cv_func_$ac_func" | $as_tr_sh`
@@ -39174,7 +39258,7 @@ _ACEOF
 
 fi
 
-CLIENT_LIBS="$NON_THREADED_LIBS $openssl_libs $ZLIB_LIBS $STATIC_NSS_FLAGS"
+CLIENT_LIBS="$NON_THREADED_LIBS $openssl_libs $ZLIB_LIBS $STATIC_NSS_FLAGS $LIBRT"
 
 
 
diff --git a/configure.in b/configure.in
index afd5e25..e063642 100644
--- a/configure.in
+++ b/configure.in
@@ -2107,7 +2107,18 @@ case "$target" in
 	# We also disable for SCO for the time being, the headers for the
 	# thread library we use conflicts with other headers.
     ;;
- *) AC_CHECK_FUNCS(clock_gettime)
+*) 
+   # most systems require the program be linked with librt library to use
+   # the function clock_gettime 
+   my_save_LIBS="$LIBS"
+   LIBS=""
+   AC_CHECK_LIB(rt,clock_gettime)
+   LIBRT=$LIBS
+   LIBS="$my_save_LIBS"
+   AC_SUBST(LIBRT)
+
+   LIBS="$LIBS $LIBRT"
+   AC_CHECK_FUNCS(clock_gettime)
     ;;
 esac
 
@@ -2743,7 +2754,7 @@ else
   AC_DEFINE([THREAD_SAFE_CLIENT], [1], [Should be client be thread safe])
 fi
 
-CLIENT_LIBS="$NON_THREADED_LIBS $openssl_libs $ZLIB_LIBS $STATIC_NSS_FLAGS"
+CLIENT_LIBS="$NON_THREADED_LIBS $openssl_libs $ZLIB_LIBS $STATIC_NSS_FLAGS $LIBRT"
 
 AC_SUBST(CLIENT_LIBS)
 AC_SUBST(NON_THREADED_LIBS)
diff --git a/configure.in.orig b/configure.in.orig
index a06f726..afd5e25 100644
--- a/configure.in.orig
+++ b/configure.in.orig
@@ -963,48 +963,6 @@ struct request_info *req;
 AC_SUBST(WRAPLIBS)
 
 if test "$TARGET_LINUX" = "true"; then
-  AC_MSG_CHECKING([for atomic operations])
-
-  AC_LANG_SAVE
-  AC_LANG_CPLUSPLUS
-
-  atom_ops=
-  AC_TRY_RUN([
-#include <asm/atomic.h>
-int main()
-{
-  atomic_t v;
-
-  atomic_set(&v, 23);
-  atomic_add(5, &v);
-  return atomic_read(&v) == 28 ? 0 : -1;
-}
-  ],
-  [AC_DEFINE([HAVE_ATOMIC_ADD], [1],
-             [atomic_add() from <asm/atomic.h> (Linux only)])
-   atom_ops="${atom_ops}atomic_add "],
-  )
-  AC_TRY_RUN([
-#include <asm/atomic.h>
-int main()
-{
-  atomic_t v;
-
-  atomic_set(&v, 23);
-  atomic_sub(5, &v);
-  return atomic_read(&v) == 18 ? 0 : -1;
-}
-  ],
-  [AC_DEFINE([HAVE_ATOMIC_SUB], [1],
-             [atomic_sub() from <asm/atomic.h> (Linux only)])
-   atom_ops="${atom_ops}atomic_sub "],
-  )
-
-  if test -z "$atom_ops"; then atom_ops="no"; fi
-  AC_MSG_RESULT($atom_ops)
-
-  AC_LANG_RESTORE
-
   AC_ARG_WITH(pstack,
     [  --with-pstack           Use the pstack backtrace library],
     [ USE_PSTACK=$withval ],
diff --git a/dbug/Makefile.in b/dbug/Makefile.in
index 6588289..8922b79 100644
--- a/dbug/Makefile.in
+++ b/dbug/Makefile.in
@@ -192,6 +192,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/Makefile.in b/extra/Makefile.in
index acbfd0f..41dfd56 100644
--- a/extra/Makefile.in
+++ b/extra/Makefile.in
@@ -240,6 +240,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/Makefile.in b/extra/yassl/Makefile.in
index eb46ee0..1e77cb4 100644
--- a/extra/yassl/Makefile.in
+++ b/extra/yassl/Makefile.in
@@ -157,6 +157,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/src/Makefile.in b/extra/yassl/src/Makefile.in
index 9f438df..5116b21 100644
--- a/extra/yassl/src/Makefile.in
+++ b/extra/yassl/src/Makefile.in
@@ -166,6 +166,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/taocrypt/Makefile.in b/extra/yassl/taocrypt/Makefile.in
index b54bf2a..6e00af6 100644
--- a/extra/yassl/taocrypt/Makefile.in
+++ b/extra/yassl/taocrypt/Makefile.in
@@ -157,6 +157,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/taocrypt/benchmark/Makefile.in b/extra/yassl/taocrypt/benchmark/Makefile.in
index eb61791..0e1b6c5 100644
--- a/extra/yassl/taocrypt/benchmark/Makefile.in
+++ b/extra/yassl/taocrypt/benchmark/Makefile.in
@@ -168,6 +168,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/taocrypt/src/Makefile.in b/extra/yassl/taocrypt/src/Makefile.in
index 7a076b6..42e92db 100644
--- a/extra/yassl/taocrypt/src/Makefile.in
+++ b/extra/yassl/taocrypt/src/Makefile.in
@@ -179,6 +179,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/taocrypt/test/Makefile.in b/extra/yassl/taocrypt/test/Makefile.in
index a90600b..56affd0 100644
--- a/extra/yassl/taocrypt/test/Makefile.in
+++ b/extra/yassl/taocrypt/test/Makefile.in
@@ -168,6 +168,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/extra/yassl/testsuite/Makefile.in b/extra/yassl/testsuite/Makefile.in
index abd565a..d080460 100644
--- a/extra/yassl/testsuite/Makefile.in
+++ b/extra/yassl/testsuite/Makefile.in
@@ -171,6 +171,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/heap/Makefile.in b/heap/Makefile.in
index 14f285c..01f5b3f 100644
--- a/heap/Makefile.in
+++ b/heap/Makefile.in
@@ -202,6 +202,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/include/Makefile.in b/include/Makefile.in
index aeb36ae..08065dd 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -160,6 +160,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/include/mysql_com.h b/include/mysql_com.h
index b3fadb9..2befe88 100644
--- a/include/mysql_com.h
+++ b/include/mysql_com.h
@@ -25,6 +25,7 @@
 #define USERNAME_LENGTH 16
 #define SERVER_VERSION_LENGTH 60
 #define SQLSTATE_LENGTH 5
+#define LIST_PROCESS_HOST_LEN 64
 
 /*
   USER_HOST_BUFF_SIZE -- length of string buffer, that is enough to contain
@@ -106,6 +107,11 @@ enum enum_server_command
 					   thread */
 #define REFRESH_MASTER          128     /* Remove all bin logs in the index
 					   and truncate the index */
+#define REFRESH_TABLE_STATS     256     /* Refresh table stats hash table */
+#define REFRESH_INDEX_STATS     512     /* Refresh index stats hash table */
+#define REFRESH_USER_STATS      1024    /* Refresh user stats hash table */
+#define REFRESH_SLOW_QUERY_LOG  4096    /* Flush slow query log and rotate*/
+#define REFRESH_CLIENT_STATS    8192    /* Refresh client stats hash table */
 
 /* The following can't be set with mysql_refresh() */
 #define REFRESH_READ_LOCK	16384	/* Lock tables for read */
@@ -219,7 +225,7 @@ typedef struct st_net {
 
   my_bool report_error; /* We should report error (we have unreported error) */
   my_bool return_errno;
-#if defined(MYSQL_SERVER) && !defined(EMBEDDED_LIBRARY)
+#if defined(MYSQL_SERVER)
   /*
     Controls whether a big packet should be skipped.
 
diff --git a/libmysql/Makefile.in b/libmysql/Makefile.in
index 73290cf..8ac415e 100644
--- a/libmysql/Makefile.in
+++ b/libmysql/Makefile.in
@@ -222,6 +222,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @CLIENT_LIBS@ 
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/libmysql_r/Makefile.in b/libmysql_r/Makefile.in
index 5312715..c751f58 100644
--- a/libmysql_r/Makefile.in
+++ b/libmysql_r/Makefile.in
@@ -219,6 +219,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@ @ZLIB_LIBS@ @openssl_libs@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/libmysqld/Makefile.in b/libmysqld/Makefile.in
index 33a957b..cc3fe90 100644
--- a/libmysqld/Makefile.in
+++ b/libmysqld/Makefile.in
@@ -247,6 +247,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/libmysqld/examples/Makefile.in b/libmysqld/examples/Makefile.in
index 07658f5..ae9a611 100644
--- a/libmysqld/examples/Makefile.in
+++ b/libmysqld/examples/Makefile.in
@@ -192,6 +192,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@ @WRAPLIBS@ @CLIENT_LIBS@ $(yassl_libs)
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/man/Makefile.in b/man/Makefile.in
index 9ce7566..56ea613 100644
--- a/man/Makefile.in
+++ b/man/Makefile.in
@@ -151,6 +151,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/myisam/Makefile.in b/myisam/Makefile.in
index 716f3ba..97372ed 100644
--- a/myisam/Makefile.in
+++ b/myisam/Makefile.in
@@ -235,6 +235,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/myisammrg/Makefile.in b/myisammrg/Makefile.in
index ad7b516..33d179c 100644
--- a/myisammrg/Makefile.in
+++ b/myisammrg/Makefile.in
@@ -183,6 +183,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/mysql-test/Makefile.in b/mysql-test/Makefile.in
index 8e69d6f..9518517 100644
--- a/mysql-test/Makefile.in
+++ b/mysql-test/Makefile.in
@@ -162,6 +162,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/mysql-test/ndb/Makefile.in b/mysql-test/ndb/Makefile.in
index 9ec0589..0a6108f 100644
--- a/mysql-test/ndb/Makefile.in
+++ b/mysql-test/ndb/Makefile.in
@@ -162,6 +162,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/mysql-test/r/information_schema.result b/mysql-test/r/information_schema.result
index 9c3d9e0..bdb3fe9 100644
--- a/mysql-test/r/information_schema.result
+++ b/mysql-test/r/information_schema.result
@@ -37,10 +37,12 @@ create view v1 (c) as select table_name from information_schema.TABLES;
 select * from v1;
 c
 CHARACTER_SETS
+CLIENT_STATISTICS
 COLLATIONS
 COLLATION_CHARACTER_SET_APPLICABILITY
 COLUMNS
 COLUMN_PRIVILEGES
+INDEX_STATISTICS
 KEY_COLUMN_USAGE
 PROFILING
 ROUTINES
@@ -50,8 +52,10 @@ STATISTICS
 TABLES
 TABLE_CONSTRAINTS
 TABLE_PRIVILEGES
+TABLE_STATISTICS
 TRIGGERS
 USER_PRIVILEGES
+USER_STATISTICS
 VIEWS
 columns_priv
 db
@@ -83,6 +87,7 @@ c	table_name
 TABLES	TABLES
 TABLE_CONSTRAINTS	TABLE_CONSTRAINTS
 TABLE_PRIVILEGES	TABLE_PRIVILEGES
+TABLE_STATISTICS	TABLE_STATISTICS
 TRIGGERS	TRIGGERS
 tables_priv	tables_priv
 time_zone	time_zone
@@ -102,6 +107,7 @@ c	table_name
 TABLES	TABLES
 TABLE_CONSTRAINTS	TABLE_CONSTRAINTS
 TABLE_PRIVILEGES	TABLE_PRIVILEGES
+TABLE_STATISTICS	TABLE_STATISTICS
 TRIGGERS	TRIGGERS
 tables_priv	tables_priv
 time_zone	time_zone
@@ -121,6 +127,7 @@ c	table_name
 TABLES	TABLES
 TABLE_CONSTRAINTS	TABLE_CONSTRAINTS
 TABLE_PRIVILEGES	TABLE_PRIVILEGES
+TABLE_STATISTICS	TABLE_STATISTICS
 TRIGGERS	TRIGGERS
 tables_priv	tables_priv
 time_zone	time_zone
@@ -594,12 +601,13 @@ from information_schema.tables
 where table_schema='information_schema' limit 2;
 TABLE_NAME	TABLE_TYPE	ENGINE
 CHARACTER_SETS	SYSTEM VIEW	MEMORY
-COLLATIONS	SYSTEM VIEW	MEMORY
+CLIENT_STATISTICS	SYSTEM VIEW	MEMORY
 show tables from information_schema like "T%";
 Tables_in_information_schema (T%)
 TABLES
 TABLE_CONSTRAINTS
 TABLE_PRIVILEGES
+TABLE_STATISTICS
 TRIGGERS
 create database information_schema;
 ERROR 42000: Access denied for user 'root'@'localhost' to database 'information_schema'
@@ -609,6 +617,7 @@ Tables_in_information_schema (T%)	Table_type
 TABLES	SYSTEM VIEW
 TABLE_CONSTRAINTS	SYSTEM VIEW
 TABLE_PRIVILEGES	SYSTEM VIEW
+TABLE_STATISTICS	SYSTEM VIEW
 TRIGGERS	SYSTEM VIEW
 create table t1(a int);
 ERROR 42S02: Unknown table 't1' in information_schema
@@ -621,6 +630,7 @@ Tables_in_information_schema (T%)
 TABLES
 TABLE_CONSTRAINTS
 TABLE_PRIVILEGES
+TABLE_STATISTICS
 TRIGGERS
 select table_name from tables where table_name='user';
 table_name
@@ -730,7 +740,7 @@ CREATE TABLE t_crashme ( f1 BIGINT);
 CREATE VIEW a1 (t_CRASHME) AS SELECT f1 FROM t_crashme GROUP BY f1;
 CREATE VIEW a2 AS SELECT t_CRASHME FROM a1;
 count(*)
-102
+106
 drop view a2, a1;
 drop table t_crashme;
 select table_schema,table_name, column_name from
@@ -790,18 +800,20 @@ where COLUMN_NAME='TABLE_NAME';
 TABLE_NAME	COLUMN_NAME	PRIVILEGES
 COLUMNS	TABLE_NAME	select
 COLUMN_PRIVILEGES	TABLE_NAME	select
+INDEX_STATISTICS	TABLE_NAME	select
 KEY_COLUMN_USAGE	TABLE_NAME	select
 STATISTICS	TABLE_NAME	select
 TABLES	TABLE_NAME	select
 TABLE_CONSTRAINTS	TABLE_NAME	select
 TABLE_PRIVILEGES	TABLE_NAME	select
+TABLE_STATISTICS	TABLE_NAME	select
 VIEWS	TABLE_NAME	select
 delete from mysql.user where user='mysqltest_4';
 delete from mysql.db where user='mysqltest_4';
 flush privileges;
 SELECT table_schema, count(*) FROM information_schema.TABLES GROUP BY TABLE_SCHEMA;
 table_schema	count(*)
-information_schema	17
+information_schema	21
 mysql	17
 create table t1 (i int, j int);
 create trigger trg1 before insert on t1 for each row
@@ -1189,10 +1201,12 @@ c2.column_name LIKE '%SCHEMA%'
         );
 table_name	column_name
 CHARACTER_SETS	CHARACTER_SET_NAME
+CLIENT_STATISTICS	CLIENT
 COLLATIONS	COLLATION_NAME
 COLLATION_CHARACTER_SET_APPLICABILITY	COLLATION_NAME
 COLUMNS	TABLE_SCHEMA
 COLUMN_PRIVILEGES	TABLE_SCHEMA
+INDEX_STATISTICS	TABLE_SCHEMA
 KEY_COLUMN_USAGE	CONSTRAINT_SCHEMA
 PROFILING	QUERY_ID
 ROUTINES	ROUTINE_SCHEMA
@@ -1202,8 +1216,10 @@ STATISTICS	TABLE_SCHEMA
 TABLES	TABLE_SCHEMA
 TABLE_CONSTRAINTS	CONSTRAINT_SCHEMA
 TABLE_PRIVILEGES	TABLE_SCHEMA
+TABLE_STATISTICS	TABLE_SCHEMA
 TRIGGERS	TRIGGER_SCHEMA
 USER_PRIVILEGES	GRANTEE
+USER_STATISTICS	USER
 VIEWS	TABLE_SCHEMA
 SELECT t.table_name, c1.column_name
 FROM information_schema.tables t
@@ -1221,10 +1237,12 @@ c2.column_name LIKE '%SCHEMA%'
         );
 table_name	column_name
 CHARACTER_SETS	CHARACTER_SET_NAME
+CLIENT_STATISTICS	CLIENT
 COLLATIONS	COLLATION_NAME
 COLLATION_CHARACTER_SET_APPLICABILITY	COLLATION_NAME
 COLUMNS	TABLE_SCHEMA
 COLUMN_PRIVILEGES	TABLE_SCHEMA
+INDEX_STATISTICS	TABLE_SCHEMA
 KEY_COLUMN_USAGE	CONSTRAINT_SCHEMA
 PROFILING	QUERY_ID
 ROUTINES	ROUTINE_SCHEMA
@@ -1234,8 +1252,10 @@ STATISTICS	TABLE_SCHEMA
 TABLES	TABLE_SCHEMA
 TABLE_CONSTRAINTS	CONSTRAINT_SCHEMA
 TABLE_PRIVILEGES	TABLE_SCHEMA
+TABLE_STATISTICS	TABLE_SCHEMA
 TRIGGERS	TRIGGER_SCHEMA
 USER_PRIVILEGES	GRANTEE
+USER_STATISTICS	USER
 VIEWS	TABLE_SCHEMA
 SELECT MAX(table_name) FROM information_schema.tables;
 MAX(table_name)
@@ -1304,10 +1324,12 @@ group by c2.column_type order by num limit 1)
 group by t.table_name order by num1, t.table_name;
 table_name	group_concat(t.table_schema, '.', t.table_name)	num1
 CHARACTER_SETS	information_schema.CHARACTER_SETS	1
+CLIENT_STATISTICS	information_schema.CLIENT_STATISTICS	1
 COLLATIONS	information_schema.COLLATIONS	1
 COLLATION_CHARACTER_SET_APPLICABILITY	information_schema.COLLATION_CHARACTER_SET_APPLICABILITY	1
 COLUMNS	information_schema.COLUMNS	1
 COLUMN_PRIVILEGES	information_schema.COLUMN_PRIVILEGES	1
+INDEX_STATISTICS	information_schema.INDEX_STATISTICS	1
 KEY_COLUMN_USAGE	information_schema.KEY_COLUMN_USAGE	1
 PROFILING	information_schema.PROFILING	1
 ROUTINES	information_schema.ROUTINES	1
@@ -1317,8 +1339,10 @@ STATISTICS	information_schema.STATISTICS	1
 TABLES	information_schema.TABLES	1
 TABLE_CONSTRAINTS	information_schema.TABLE_CONSTRAINTS	1
 TABLE_PRIVILEGES	information_schema.TABLE_PRIVILEGES	1
+TABLE_STATISTICS	information_schema.TABLE_STATISTICS	1
 TRIGGERS	information_schema.TRIGGERS	1
 USER_PRIVILEGES	information_schema.USER_PRIVILEGES	1
+USER_STATISTICS	information_schema.USER_STATISTICS	1
 VIEWS	information_schema.VIEWS	1
 create table t1(f1 int);
 create view v1 as select f1+1 as a from t1;
diff --git a/mysql-test/r/information_schema_db.result b/mysql-test/r/information_schema_db.result
index 5521148..9e6c84a 100644
--- a/mysql-test/r/information_schema_db.result
+++ b/mysql-test/r/information_schema_db.result
@@ -6,10 +6,12 @@ use INFORMATION_SCHEMA;
 show tables;
 Tables_in_information_schema
 CHARACTER_SETS
+CLIENT_STATISTICS
 COLLATIONS
 COLLATION_CHARACTER_SET_APPLICABILITY
 COLUMNS
 COLUMN_PRIVILEGES
+INDEX_STATISTICS
 KEY_COLUMN_USAGE
 PROFILING
 ROUTINES
@@ -19,14 +21,17 @@ STATISTICS
 TABLES
 TABLE_CONSTRAINTS
 TABLE_PRIVILEGES
+TABLE_STATISTICS
 TRIGGERS
 USER_PRIVILEGES
+USER_STATISTICS
 VIEWS
 show tables from INFORMATION_SCHEMA like 'T%';
 Tables_in_information_schema (T%)
 TABLES
 TABLE_CONSTRAINTS
 TABLE_PRIVILEGES
+TABLE_STATISTICS
 TRIGGERS
 create database `inf%`;
 create database mbase;
diff --git a/mysql-test/r/mysqlshow.result b/mysql-test/r/mysqlshow.result
index 31b4940..3cbb377 100644
--- a/mysql-test/r/mysqlshow.result
+++ b/mysql-test/r/mysqlshow.result
@@ -80,10 +80,12 @@ Database: information_schema
 |                Tables                 |
 +---------------------------------------+
 | CHARACTER_SETS                        |
+| CLIENT_STATISTICS                     |
 | COLLATIONS                            |
 | COLLATION_CHARACTER_SET_APPLICABILITY |
 | COLUMNS                               |
 | COLUMN_PRIVILEGES                     |
+| INDEX_STATISTICS                      |
 | KEY_COLUMN_USAGE                      |
 | PROFILING                             |
 | ROUTINES                              |
@@ -93,8 +95,10 @@ Database: information_schema
 | TABLES                                |
 | TABLE_CONSTRAINTS                     |
 | TABLE_PRIVILEGES                      |
+| TABLE_STATISTICS                      |
 | TRIGGERS                              |
 | USER_PRIVILEGES                       |
+| USER_STATISTICS                       |
 | VIEWS                                 |
 +---------------------------------------+
 Database: INFORMATION_SCHEMA
@@ -102,10 +106,12 @@ Database: INFORMATION_SCHEMA
 |                Tables                 |
 +---------------------------------------+
 | CHARACTER_SETS                        |
+| CLIENT_STATISTICS                     |
 | COLLATIONS                            |
 | COLLATION_CHARACTER_SET_APPLICABILITY |
 | COLUMNS                               |
 | COLUMN_PRIVILEGES                     |
+| INDEX_STATISTICS                      |
 | KEY_COLUMN_USAGE                      |
 | PROFILING                             |
 | ROUTINES                              |
@@ -115,8 +121,10 @@ Database: INFORMATION_SCHEMA
 | TABLES                                |
 | TABLE_CONSTRAINTS                     |
 | TABLE_PRIVILEGES                      |
+| TABLE_STATISTICS                      |
 | TRIGGERS                              |
 | USER_PRIVILEGES                       |
+| USER_STATISTICS                       |
 | VIEWS                                 |
 +---------------------------------------+
 Wildcard: inf_rmation_schema
diff --git a/mysys/Makefile.in b/mysys/Makefile.in
index 4a9bb30..ef91f7a 100644
--- a/mysys/Makefile.in
+++ b/mysys/Makefile.in
@@ -227,6 +227,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/Makefile.in b/ndb/Makefile.in
index baf53f5..2a4742f 100644
--- a/ndb/Makefile.in
+++ b/ndb/Makefile.in
@@ -171,6 +171,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/docs/Makefile.in b/ndb/docs/Makefile.in
index daa6810..e82b7c5 100644
--- a/ndb/docs/Makefile.in
+++ b/ndb/docs/Makefile.in
@@ -149,6 +149,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/include/Makefile.in b/ndb/include/Makefile.in
index be3d67d..21b0142 100644
--- a/ndb/include/Makefile.in
+++ b/ndb/include/Makefile.in
@@ -179,6 +179,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/Makefile.in b/ndb/src/Makefile.in
index cac7b5b..c10e2aa 100644
--- a/ndb/src/Makefile.in
+++ b/ndb/src/Makefile.in
@@ -204,6 +204,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/Makefile.in b/ndb/src/common/Makefile.in
index 21a1ea6..eba0ca4 100644
--- a/ndb/src/common/Makefile.in
+++ b/ndb/src/common/Makefile.in
@@ -174,6 +174,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/debugger/Makefile.in b/ndb/src/common/debugger/Makefile.in
index fba4961..b75ff3a 100644
--- a/ndb/src/common/debugger/Makefile.in
+++ b/ndb/src/common/debugger/Makefile.in
@@ -206,6 +206,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/debugger/signaldata/Makefile.in b/ndb/src/common/debugger/signaldata/Makefile.in
index c10bdd8..8d64ee6 100644
--- a/ndb/src/common/debugger/signaldata/Makefile.in
+++ b/ndb/src/common/debugger/signaldata/Makefile.in
@@ -211,6 +211,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/logger/Makefile.in b/ndb/src/common/logger/Makefile.in
index 2df03d6..22d6e86 100644
--- a/ndb/src/common/logger/Makefile.in
+++ b/ndb/src/common/logger/Makefile.in
@@ -197,6 +197,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/mgmcommon/Makefile.in b/ndb/src/common/mgmcommon/Makefile.in
index 25b67ff..b1c5446 100644
--- a/ndb/src/common/mgmcommon/Makefile.in
+++ b/ndb/src/common/mgmcommon/Makefile.in
@@ -211,6 +211,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/portlib/Makefile.in b/ndb/src/common/portlib/Makefile.in
index 490a3db..94d8c06 100644
--- a/ndb/src/common/portlib/Makefile.in
+++ b/ndb/src/common/portlib/Makefile.in
@@ -222,6 +222,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/transporter/Makefile.in b/ndb/src/common/transporter/Makefile.in
index 934a28c..197db34 100644
--- a/ndb/src/common/transporter/Makefile.in
+++ b/ndb/src/common/transporter/Makefile.in
@@ -197,6 +197,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/common/util/Makefile.in b/ndb/src/common/util/Makefile.in
index 4b868ab..a94e253 100644
--- a/ndb/src/common/util/Makefile.in
+++ b/ndb/src/common/util/Makefile.in
@@ -217,6 +217,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/cw/Makefile.in b/ndb/src/cw/Makefile.in
index 6e7f407..d0a127f 100644
--- a/ndb/src/cw/Makefile.in
+++ b/ndb/src/cw/Makefile.in
@@ -156,6 +156,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/cw/cpcd/Makefile.in b/ndb/src/cw/cpcd/Makefile.in
index c9e0427..bd4ef7f 100644
--- a/ndb/src/cw/cpcd/Makefile.in
+++ b/ndb/src/cw/cpcd/Makefile.in
@@ -207,6 +207,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/Makefile.in b/ndb/src/kernel/Makefile.in
index 5e28329..f63e41a 100644
--- a/ndb/src/kernel/Makefile.in
+++ b/ndb/src/kernel/Makefile.in
@@ -227,6 +227,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/Makefile.in b/ndb/src/kernel/blocks/Makefile.in
index 32810a5..5c9c19d 100644
--- a/ndb/src/kernel/blocks/Makefile.in
+++ b/ndb/src/kernel/blocks/Makefile.in
@@ -156,6 +156,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/backup/Makefile.in b/ndb/src/kernel/blocks/backup/Makefile.in
index bcfa9e3..6371f7c 100644
--- a/ndb/src/kernel/blocks/backup/Makefile.in
+++ b/ndb/src/kernel/blocks/backup/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/cmvmi/Makefile.in b/ndb/src/kernel/blocks/cmvmi/Makefile.in
index 5dc3443..5893ead 100644
--- a/ndb/src/kernel/blocks/cmvmi/Makefile.in
+++ b/ndb/src/kernel/blocks/cmvmi/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbacc/Makefile.in b/ndb/src/kernel/blocks/dbacc/Makefile.in
index 174d8c7..4e0d0d6 100644
--- a/ndb/src/kernel/blocks/dbacc/Makefile.in
+++ b/ndb/src/kernel/blocks/dbacc/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbdict/Makefile.in b/ndb/src/kernel/blocks/dbdict/Makefile.in
index f1e6ceb..a8e3d6d 100644
--- a/ndb/src/kernel/blocks/dbdict/Makefile.in
+++ b/ndb/src/kernel/blocks/dbdict/Makefile.in
@@ -206,6 +206,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbdih/Makefile.in b/ndb/src/kernel/blocks/dbdih/Makefile.in
index ee61b87..9bed6fe 100644
--- a/ndb/src/kernel/blocks/dbdih/Makefile.in
+++ b/ndb/src/kernel/blocks/dbdih/Makefile.in
@@ -203,6 +203,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dblqh/Makefile.in b/ndb/src/kernel/blocks/dblqh/Makefile.in
index de67374..909daff 100644
--- a/ndb/src/kernel/blocks/dblqh/Makefile.in
+++ b/ndb/src/kernel/blocks/dblqh/Makefile.in
@@ -204,6 +204,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbtc/Makefile.in b/ndb/src/kernel/blocks/dbtc/Makefile.in
index 09eb7be..f5d5d6e 100644
--- a/ndb/src/kernel/blocks/dbtc/Makefile.in
+++ b/ndb/src/kernel/blocks/dbtc/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbtup/Makefile.in b/ndb/src/kernel/blocks/dbtup/Makefile.in
index 0276c66..138693a 100644
--- a/ndb/src/kernel/blocks/dbtup/Makefile.in
+++ b/ndb/src/kernel/blocks/dbtup/Makefile.in
@@ -204,6 +204,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbtux/Makefile.in b/ndb/src/kernel/blocks/dbtux/Makefile.in
index c6c6b98..e6b3311 100644
--- a/ndb/src/kernel/blocks/dbtux/Makefile.in
+++ b/ndb/src/kernel/blocks/dbtux/Makefile.in
@@ -199,6 +199,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/dbutil/Makefile.in b/ndb/src/kernel/blocks/dbutil/Makefile.in
index 16ba1be..fcc243e 100644
--- a/ndb/src/kernel/blocks/dbutil/Makefile.in
+++ b/ndb/src/kernel/blocks/dbutil/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/ndbcntr/Makefile.in b/ndb/src/kernel/blocks/ndbcntr/Makefile.in
index 4891d9c..cd3dbe2 100644
--- a/ndb/src/kernel/blocks/ndbcntr/Makefile.in
+++ b/ndb/src/kernel/blocks/ndbcntr/Makefile.in
@@ -197,6 +197,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/ndbfs/Makefile.in b/ndb/src/kernel/blocks/ndbfs/Makefile.in
index eb6cecf..53308fb 100644
--- a/ndb/src/kernel/blocks/ndbfs/Makefile.in
+++ b/ndb/src/kernel/blocks/ndbfs/Makefile.in
@@ -197,6 +197,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/qmgr/Makefile.in b/ndb/src/kernel/blocks/qmgr/Makefile.in
index 51bd625..1ae436d 100644
--- a/ndb/src/kernel/blocks/qmgr/Makefile.in
+++ b/ndb/src/kernel/blocks/qmgr/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/suma/Makefile.in b/ndb/src/kernel/blocks/suma/Makefile.in
index 762d19e..417ac1f 100644
--- a/ndb/src/kernel/blocks/suma/Makefile.in
+++ b/ndb/src/kernel/blocks/suma/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/blocks/trix/Makefile.in b/ndb/src/kernel/blocks/trix/Makefile.in
index b47c9f6..921eafe 100644
--- a/ndb/src/kernel/blocks/trix/Makefile.in
+++ b/ndb/src/kernel/blocks/trix/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/error/Makefile.in b/ndb/src/kernel/error/Makefile.in
index 2038c7a..6af29ab 100644
--- a/ndb/src/kernel/error/Makefile.in
+++ b/ndb/src/kernel/error/Makefile.in
@@ -206,6 +206,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/kernel/vm/Makefile.in b/ndb/src/kernel/vm/Makefile.in
index 21c25cd..879ceb1 100644
--- a/ndb/src/kernel/vm/Makefile.in
+++ b/ndb/src/kernel/vm/Makefile.in
@@ -207,6 +207,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/mgmapi/Makefile.in b/ndb/src/mgmapi/Makefile.in
index eaa21e8..80fc61b 100644
--- a/ndb/src/mgmapi/Makefile.in
+++ b/ndb/src/mgmapi/Makefile.in
@@ -205,6 +205,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/mgmclient/Makefile.in b/ndb/src/mgmclient/Makefile.in
index a17def6..146f1d9 100644
--- a/ndb/src/mgmclient/Makefile.in
+++ b/ndb/src/mgmclient/Makefile.in
@@ -216,6 +216,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/mgmsrv/Makefile.in b/ndb/src/mgmsrv/Makefile.in
index 1e081ad..926e77c 100644
--- a/ndb/src/mgmsrv/Makefile.in
+++ b/ndb/src/mgmsrv/Makefile.in
@@ -214,6 +214,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/src/ndbapi/Makefile.in b/ndb/src/ndbapi/Makefile.in
index fec8e6c..bab25d5 100644
--- a/ndb/src/ndbapi/Makefile.in
+++ b/ndb/src/ndbapi/Makefile.in
@@ -215,6 +215,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/test/Makefile.in b/ndb/test/Makefile.in
index d033659..5c6d958 100644
--- a/ndb/test/Makefile.in
+++ b/ndb/test/Makefile.in
@@ -156,6 +156,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/test/ndbapi/Makefile.in b/ndb/test/ndbapi/Makefile.in
index 79f52fe..748663b 100644
--- a/ndb/test/ndbapi/Makefile.in
+++ b/ndb/test/ndbapi/Makefile.in
@@ -595,6 +595,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/test/ndbapi/bank/Makefile.in b/ndb/test/ndbapi/bank/Makefile.in
index 7e76e8f..a270c36 100644
--- a/ndb/test/ndbapi/bank/Makefile.in
+++ b/ndb/test/ndbapi/bank/Makefile.in
@@ -282,6 +282,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/test/run-test/Makefile.in b/ndb/test/run-test/Makefile.in
index 0d2a64f..937bee8 100644
--- a/ndb/test/run-test/Makefile.in
+++ b/ndb/test/run-test/Makefile.in
@@ -243,6 +243,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/test/src/Makefile.in b/ndb/test/src/Makefile.in
index 7fcabd9..224e8bd 100644
--- a/ndb/test/src/Makefile.in
+++ b/ndb/test/src/Makefile.in
@@ -213,6 +213,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/test/tools/Makefile.in b/ndb/test/tools/Makefile.in
index 9741771..df615f7 100644
--- a/ndb/test/tools/Makefile.in
+++ b/ndb/test/tools/Makefile.in
@@ -325,6 +325,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/ndb/tools/Makefile.in b/ndb/tools/Makefile.in
index 0f63dba..33e80eb 100644
--- a/ndb/tools/Makefile.in
+++ b/ndb/tools/Makefile.in
@@ -344,6 +344,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/netware/Makefile.in b/netware/Makefile.in
index b929607..b237f42 100644
--- a/netware/Makefile.in
+++ b/netware/Makefile.in
@@ -199,6 +199,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/patch_info/userstats.info b/patch_info/userstats.info
new file mode 100644
index 0000000..b93ca36
--- /dev/null
+++ b/patch_info/userstats.info
@@ -0,0 +1,14 @@
+File=userstatsv2.patch
+Name=SHOW USER/TABLE/INDEX statistics
+Version=V2
+Author=Google
+License=GPL
+Comment=Added INFORMATION_SCHEMA.*_STATISTICS
+2008-12-01
+YK: fix behavior for prepared statements
+
+2008-11-26
+YK: add switch variable "userstat_running" to control INFORMATION_SCHEMA.*_STATISTICS (default:OFF)
+
+2008-12-09
+YK: fixed "Row_sent: 0" problem at microslow_innodb.patch
diff --git a/pstack/Makefile.in b/pstack/Makefile.in
index 2a7b9e7..c2bc884 100644
--- a/pstack/Makefile.in
+++ b/pstack/Makefile.in
@@ -196,6 +196,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/pstack/aout/Makefile.in b/pstack/aout/Makefile.in
index 58c1ce5..6213cb2 100644
--- a/pstack/aout/Makefile.in
+++ b/pstack/aout/Makefile.in
@@ -134,6 +134,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/regex/Makefile.in b/regex/Makefile.in
index ba8e624..31aead3 100644
--- a/regex/Makefile.in
+++ b/regex/Makefile.in
@@ -180,6 +180,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/scripts/Makefile.in b/scripts/Makefile.in
index 77f8e3d..af2f9f8 100644
--- a/scripts/Makefile.in
+++ b/scripts/Makefile.in
@@ -176,6 +176,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/server-tools/Makefile.in b/server-tools/Makefile.in
index 68992d7..cab3a02 100644
--- a/server-tools/Makefile.in
+++ b/server-tools/Makefile.in
@@ -155,6 +155,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/server-tools/instance-manager/Makefile.in b/server-tools/instance-manager/Makefile.in
index 80dab5d..3d29f72 100644
--- a/server-tools/instance-manager/Makefile.in
+++ b/server-tools/instance-manager/Makefile.in
@@ -205,6 +205,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/sql/Makefile.in b/sql/Makefile.in
index 586ed08..cb2ea00 100644
--- a/sql/Makefile.in
+++ b/sql/Makefile.in
@@ -275,6 +275,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/sql/ha_innodb.cc b/sql/ha_innodb.cc
index bb998b0..1140a73 100644
--- a/sql/ha_innodb.cc
+++ b/sql/ha_innodb.cc
@@ -3306,6 +3306,8 @@ no_commit:
 
 	error = row_insert_for_mysql((byte*) record, prebuilt);
 
+        if (error == DB_SUCCESS) rows_changed++;
+
 	if (error == DB_SUCCESS && auto_inc_used) {
 
         	/* Fetch the value that was set in the autoincrement field */
@@ -3578,6 +3580,8 @@ ha_innobase::update_row(
 		}
 	}
 
+	if (error == DB_SUCCESS) rows_changed++;
+
 	innodb_srv_conc_exit_innodb(prebuilt->trx);
 
 	error = convert_error_code_to_mysql(error, user_thd);
@@ -3626,6 +3630,8 @@ ha_innobase::delete_row(
 
 	error = row_update_for_mysql((byte*) record, prebuilt);
 
+	if (error == DB_SUCCESS) rows_changed++;
+
 	innodb_srv_conc_exit_innodb(prebuilt->trx);
 
 	error = convert_error_code_to_mysql(error, user_thd);
@@ -4057,6 +4063,9 @@ ha_innobase::general_fetch(
 	if (ret == DB_SUCCESS) {
 		error = 0;
 		table->status = 0;
+                rows_read++;
+                if (active_index >= 0 && active_index < MAX_KEY)
+                        index_rows_read[active_index]++;
 
 	} else if (ret == DB_RECORD_NOT_FOUND) {
 		error = HA_ERR_END_OF_FILE;
diff --git a/sql/ha_innodb.cc.orig b/sql/ha_innodb.cc.orig
index cf68275..bb998b0 100644
--- a/sql/ha_innodb.cc.orig
+++ b/sql/ha_innodb.cc.orig
@@ -2592,6 +2592,11 @@ get_innobase_type_from_mysql_type(
 		case FIELD_TYPE_BLOB:
 		case FIELD_TYPE_LONG_BLOB:
 					return(DATA_BLOB);
+		case FIELD_TYPE_NULL:
+		  /* MySQL currently accepts "NULL" datatype, but will
+		     reject such datatype in the next release. We will cope
+		     with it and not trigger assertion failure in 5.1 */
+		  break;
 		default:
 					assert(0);
 	}
@@ -4397,7 +4402,27 @@ create_table_def(
 		field = form->field[i];
 
 		col_type = get_innobase_type_from_mysql_type(&unsigned_type,
-									field);
+							     field);
+
+		if (!col_type) {
+			push_warning_printf(
+				(THD*) trx->mysql_thd,
+				MYSQL_ERROR::WARN_LEVEL_WARN,
+				ER_CANT_CREATE_TABLE,
+				"Error creating table '%s' with "
+				"column '%s'. Please check its "
+				"column type and try to re-create "
+				"the table with an appropriate "
+				"column type.",
+				table->name, (char*) field->field_name);
+
+			dict_mem_table_free(table);
+			trx_commit_for_mysql(trx);
+
+			error = DB_ERROR;
+			goto error_ret;
+		}
+
 		if (field->null_ptr) {
 			nulls_allowed = 0;
 		} else {
@@ -4454,6 +4479,7 @@ create_table_def(
 
 	error = row_create_table_for_mysql(table, trx);
 
+error_ret:
 	error = convert_error_code_to_mysql(error, NULL);
 
 	DBUG_RETURN(error);
diff --git a/sql/ha_myisam.cc b/sql/ha_myisam.cc
index c9a9b9c..df3e39c 100644
--- a/sql/ha_myisam.cc
+++ b/sql/ha_myisam.cc
@@ -671,7 +671,9 @@ int ha_myisam::write_row(byte * buf)
     if ((error= update_auto_increment()))
       return error;
   }
-  return mi_write(file,buf);
+  int error=mi_write(file,buf);
+  if (!error) rows_changed++;
+  return error;
 }
 
 int ha_myisam::check(THD* thd, HA_CHECK_OPT* check_opt)
@@ -1517,13 +1519,17 @@ int ha_myisam::update_row(const byte * old_data, byte * new_data)
   statistic_increment(table->in_use->status_var.ha_update_count,&LOCK_status);
   if (table->timestamp_field_type & TIMESTAMP_AUTO_SET_ON_UPDATE)
     table->timestamp_field->set_time();
-  return mi_update(file,old_data,new_data);
+  int error=mi_update(file,old_data,new_data);
+  if (!error) rows_changed++;
+  return error;
 }
 
 int ha_myisam::delete_row(const byte * buf)
 {
   statistic_increment(table->in_use->status_var.ha_delete_count,&LOCK_status);
-  return mi_delete(file,buf);
+  int error=mi_delete(file,buf);
+  if (!error) rows_changed++;
+  return error;
 }
 
 int ha_myisam::index_read(byte * buf, const byte * key,
@@ -1534,6 +1540,13 @@ int ha_myisam::index_read(byte * buf, const byte * key,
 		      &LOCK_status);
   int error=mi_rkey(file,buf,active_index, key, key_len, find_flag);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1544,6 +1557,13 @@ int ha_myisam::index_read_idx(byte * buf, uint index, const byte * key,
 		      &LOCK_status);
   int error=mi_rkey(file,buf,index, key, key_len, find_flag);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1554,6 +1574,13 @@ int ha_myisam::index_read_last(byte * buf, const byte * key, uint key_len)
 		      &LOCK_status);
   int error=mi_rkey(file,buf,active_index, key, key_len, HA_READ_PREFIX_LAST);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1564,6 +1591,13 @@ int ha_myisam::index_next(byte * buf)
 		      &LOCK_status);
   int error=mi_rnext(file,buf,active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1574,6 +1608,13 @@ int ha_myisam::index_prev(byte * buf)
 		      &LOCK_status);
   int error=mi_rprev(file,buf, active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1584,6 +1625,13 @@ int ha_myisam::index_first(byte * buf)
 		      &LOCK_status);
   int error=mi_rfirst(file, buf, active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1594,6 +1642,13 @@ int ha_myisam::index_last(byte * buf)
 		      &LOCK_status);
   int error=mi_rlast(file, buf, active_index);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1610,6 +1665,13 @@ int ha_myisam::index_next_same(byte * buf,
     error= mi_rnext_same(file,buf);
   } while (error == HA_ERR_RECORD_DELETED);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) {
+    rows_read++;
+
+    int inx = (active_index == -1) ? file->lastinx : active_index;
+    if (inx >= 0 && inx < MAX_KEY)
+      index_rows_read[inx]++;
+  }
   return error;
 }
 
@@ -1627,6 +1689,7 @@ int ha_myisam::rnd_next(byte *buf)
 		      &LOCK_status);
   int error=mi_scan(file, buf);
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) rows_read++;
   return error;
 }
 
@@ -1641,6 +1704,7 @@ int ha_myisam::rnd_pos(byte * buf, byte *pos)
 		      &LOCK_status);
   int error=mi_rrnd(file, buf, my_get_ptr(pos,ref_length));
   table->status=error ? STATUS_NOT_FOUND: 0;
+  if (!error) rows_read++;
   return error;
 }
 
diff --git a/sql/handler.cc b/sql/handler.cc
index 7b187e2..063af19 100644
--- a/sql/handler.cc
+++ b/sql/handler.cc
@@ -728,6 +728,8 @@ int ha_commit_trans(THD *thd, bool all)
     if (cookie)
       tc_log->unlog(cookie, xid);
     DBUG_EXECUTE_IF("crash_commit_after", abort(););
+    if (is_real_trans)
+      thd->diff_commit_trans++;
 end:
     if (is_real_trans)
       start_waiting_global_read_lock(thd);
@@ -785,6 +787,7 @@ int ha_commit_one_phase(THD *thd, bool all)
       thd->transaction.cleanup();
     }
   }
+  thd->diff_rollback_trans++;
 #endif /* USING_TRANSACTIONS */
   DBUG_RETURN(error);
 }
@@ -1225,6 +1228,7 @@ int ha_rollback_to_savepoint(THD *thd, SAVEPOINT *sv)
     statistic_increment(thd->status_var.ha_rollback_count,&LOCK_status);
     *ht=0; // keep it conveniently zero-filled
   }
+  thd->diff_rollback_trans++;
   DBUG_RETURN(error);
 }
 
@@ -1455,6 +1459,8 @@ int handler::ha_open(const char *name, int mode, int test_if_locked)
     else
       dupp_ref=ref+ALIGN_SIZE(ref_length);
   }
+  rows_read = rows_changed = 0;
+  memset(index_rows_read, 0, sizeof(index_rows_read));
   DBUG_RETURN(error);
 }
 
@@ -2292,6 +2298,111 @@ int handler::index_next_same(byte *buf, const byte *key, uint keylen)
   return error;
 }
 
+// Updates the global table stats with the TABLE this handler represents.
+void handler::update_global_table_stats() {
+  if (!opt_userstat_running) {
+    rows_read = rows_changed = 0;
+    return;
+  }
+
+  if (!rows_read && !rows_changed) return;  // Nothing to update.
+  // table_cache_key is db_name + '\0' + table_name + '\0'.
+  if (!table->s || !table->s->table_cache_key || !table->s->table_name) return;
+
+  TABLE_STATS* table_stats;
+  char key[NAME_LEN * 2 + 2];
+  // [db] + '.' + [table]
+  sprintf(key, "%s.%s", table->s->table_cache_key, table->s->table_name);
+
+  pthread_mutex_lock(&LOCK_global_table_stats);
+  // Gets the global table stats, creating one if necessary.
+  if (!(table_stats = (TABLE_STATS*)hash_search(&global_table_stats,
+                                                (byte*)key,
+                                                strlen(key)))) {
+    if (!(table_stats = ((TABLE_STATS*)
+                         my_malloc(sizeof(TABLE_STATS), MYF(MY_WME | MY_ZEROFILL))))) {
+      // Out of memory.
+      sql_print_error("Allocating table stats failed.");
+      goto end;
+    }
+    strncpy(table_stats->table, key, sizeof(table_stats->table));
+    table_stats->rows_read = 0;
+    table_stats->rows_changed = 0;
+    table_stats->rows_changed_x_indexes = 0;
+    table_stats->engine_type = (int) ht->db_type;
+
+    if (my_hash_insert(&global_table_stats, (byte*)table_stats)) {
+      // Out of memory.
+      sql_print_error("Inserting table stats failed.");
+      my_free((char*)table_stats, 0);
+      goto end;
+    }
+  }
+  // Updates the global table stats.
+  table_stats->rows_read += rows_read;
+  table_stats->rows_changed += rows_changed;
+  table_stats->rows_changed_x_indexes +=
+      rows_changed * (table->s->keys ? table->s->keys : 1);
+  current_thd->diff_total_read_rows += rows_read;
+  rows_read = rows_changed = 0;
+end:
+  pthread_mutex_unlock(&LOCK_global_table_stats);
+}
+
+// Updates the global index stats with this handler's accumulated index reads.
+void handler::update_global_index_stats() {
+  // table_cache_key is db_name + '\0' + table_name + '\0'.
+  if (!table->s || !table->s->table_cache_key || !table->s->table_name) return;
+
+  if (!opt_userstat_running) {
+    for (int x = 0; x < table->s->keys; x++) {
+      index_rows_read[x] = 0;
+    }
+    return;
+  }
+
+  for (int x = 0; x < table->s->keys; x++) {
+    if (index_rows_read[x]) {
+      // Rows were read using this index.
+      KEY* key_info = &table->key_info[x];
+
+      if (!key_info->name) continue;
+
+      INDEX_STATS* index_stats;
+      char key[NAME_LEN * 3 + 3];
+      // [db] + '.' + [table] + '.' + [index]
+      sprintf(key, "%s.%s.%s",  table->s->table_cache_key,
+              table->s->table_name, key_info->name);
+
+      pthread_mutex_lock(&LOCK_global_index_stats);
+      // Gets the global index stats, creating one if necessary.
+      if (!(index_stats = (INDEX_STATS*)hash_search(&global_index_stats,
+                                                    (byte*)key,
+                                                    strlen(key)))) {
+        if (!(index_stats = ((INDEX_STATS*)
+                             my_malloc(sizeof(INDEX_STATS), MYF(MY_WME | MY_ZEROFILL))))) {
+          // Out of memory.
+          sql_print_error("Allocating index stats failed.");
+          goto end;
+        }
+        strncpy(index_stats->index, key, sizeof(index_stats->index));
+        index_stats->rows_read = 0;
+
+        if (my_hash_insert(&global_index_stats, (byte*)index_stats)) {
+          // Out of memory.
+          sql_print_error("Inserting index stats failed.");
+          my_free((char*)index_stats, 0);
+          goto end;
+        }
+      }
+      // Updates the global index stats.
+      index_stats->rows_read += index_rows_read[x];
+      index_rows_read[x] = 0;
+end:
+      pthread_mutex_unlock(&LOCK_global_index_stats);
+    }
+  }
+}
 
 /****************************************************************************
 ** Some general functions that isn't in the handler class
diff --git a/sql/handler.h b/sql/handler.h
index 4fea9e7..8968ee1 100644
--- a/sql/handler.h
+++ b/sql/handler.h
@@ -33,6 +33,10 @@
 #define USING_TRANSACTIONS
 #endif
 
+#if MAX_KEY > 128
+#error MAX_KEY is too large.  Values up to 128 are supported.
+#endif
+
 // the following is for checking tables
 
 #define HA_ADMIN_ALREADY_DONE	  1
@@ -605,6 +609,9 @@ public:
   bool  auto_increment_column_changed;
   bool implicit_emptied;                /* Can be !=0 only if HEAP */
   const COND *pushed_cond;
+  ulonglong rows_read;
+  ulonglong rows_changed;
+  ulonglong index_rows_read[MAX_KEY];
 
   handler(const handlerton *ht_arg, TABLE *table_arg) :table(table_arg),
     ht(ht_arg),
@@ -616,8 +623,10 @@ public:
     ref_length(sizeof(my_off_t)), block_size(0),
     raid_type(0), ft_handler(0), inited(NONE),
     locked(FALSE), implicit_emptied(0),
-    pushed_cond(NULL)
-    {}
+    pushed_cond(NULL), rows_read(0), rows_changed(0)
+    {
+      memset(index_rows_read, 0, sizeof(index_rows_read));
+    }
   virtual ~handler(void) { DBUG_ASSERT(locked == FALSE); /* TODO: DBUG_ASSERT(inited == NONE); */ }
   virtual handler *clone(MEM_ROOT *mem_root);
   int ha_open(const char *name, int mode, int test_if_locked);
@@ -626,7 +635,11 @@ public:
   virtual void print_error(int error, myf errflag);
   virtual bool get_error_message(int error, String *buf);
   uint get_dup_key(int error);
-  void change_table_ptr(TABLE *table_arg) { table=table_arg; }
+  void change_table_ptr(TABLE *table_arg) {
+    table=table_arg;
+    rows_read = rows_changed = 0;
+    memset(index_rows_read, 0, sizeof(index_rows_read));
+  }
   virtual double scan_time()
     { return ulonglong2double(data_file_length) / IO_SIZE + 2; }
   virtual double read_time(uint index, uint ranges, ha_rows rows)
@@ -887,6 +900,9 @@ public:
   virtual bool is_crashed() const  { return 0; }
   virtual bool auto_repair() const { return 0; }
 
+  void update_global_table_stats();
+  void update_global_index_stats();
+
   /*
     default rename_table() and delete_table() rename/delete files with a
     given name and extensions from bas_ext()
diff --git a/sql/lex.h b/sql/lex.h
index 33217ee..84d365a 100644
--- a/sql/lex.h
+++ b/sql/lex.h
@@ -109,6 +109,7 @@ static SYMBOL symbols[] = {
   { "CHECKSUM",		SYM(CHECKSUM_SYM)},
   { "CIPHER",		SYM(CIPHER_SYM)},
   { "CLIENT",		SYM(CLIENT_SYM)},
+  { "CLIENT_STATISTICS", SYM(CLIENT_STATS_SYM)},
   { "CLOSE",		SYM(CLOSE_SYM)},
   { "CODE",             SYM(CODE_SYM)},
   { "COLLATE",		SYM(COLLATE_SYM)},
@@ -238,6 +239,7 @@ static SYMBOL symbols[] = {
   { "IN",		SYM(IN_SYM)},
   { "INDEX",		SYM(INDEX_SYM)},
   { "INDEXES",		SYM(INDEXES)},
+  { "INDEX_STATISTICS",	SYM(INDEX_STATS_SYM)},
   { "INFILE",		SYM(INFILE)},
   { "INNER",		SYM(INNER_SYM)},
   { "INNOBASE",		SYM(INNOBASE_SYM)},
@@ -442,6 +444,7 @@ static SYMBOL symbols[] = {
   { "SIGNED",		SYM(SIGNED_SYM)},
   { "SIMPLE",		SYM(SIMPLE_SYM)},
   { "SLAVE",            SYM(SLAVE)},
+  { "SLOW",             SYM(SLOW_SYM)},
   { "SNAPSHOT",         SYM(SNAPSHOT_SYM)},
   { "SMALLINT",		SYM(SMALLINT)},
   { "SOME",             SYM(ANY_SYM)},
@@ -487,6 +490,7 @@ static SYMBOL symbols[] = {
   { "TABLE",		SYM(TABLE_SYM)},
   { "TABLES",		SYM(TABLES)},
   { "TABLESPACE",	SYM(TABLESPACE)},
+  { "TABLE_STATISTICS",	SYM(TABLE_STATS_SYM)},
   { "TEMPORARY",	SYM(TEMPORARY)},
   { "TEMPTABLE",	SYM(TEMPTABLE_SYM)},
   { "TERMINATED",	SYM(TERMINATED)},
@@ -524,6 +528,7 @@ static SYMBOL symbols[] = {
   { "USE",		SYM(USE_SYM)},
   { "USER",		SYM(USER)},
   { "USER_RESOURCES",	SYM(RESOURCES)},
+  { "USER_STATISTICS",	SYM(USER_STATS_SYM)},
   { "USE_FRM",		SYM(USE_FRM)},
   { "USING",		SYM(USING)},
   { "UTC_DATE",         SYM(UTC_DATE_SYM)},
diff --git a/sql/log.cc b/sql/log.cc
index 09d9a31..daebc0b 100644
--- a/sql/log.cc
+++ b/sql/log.cc
@@ -1961,18 +1961,24 @@ bool MYSQL_LOG::write(Log_event *event_info)
 			   thd->current_insert_id);
 	if (e.write(file))
 	  goto err;
+        if (file == &log_file)
+          thd->binlog_bytes_written += e.data_written;
       }
       if (thd->insert_id_used)
       {
 	Intvar_log_event e(thd,(uchar) INSERT_ID_EVENT,thd->last_insert_id);
 	if (e.write(file))
 	  goto err;
+        if (file == &log_file)
+          thd->binlog_bytes_written += e.data_written;
       }
       if (thd->rand_used)
       {
 	Rand_log_event e(thd,thd->rand_saved_seed1,thd->rand_saved_seed2);
 	if (e.write(file))
 	  goto err;
+        if (file == &log_file)
+          thd->binlog_bytes_written += e.data_written;
       }
       if (thd->user_var_events.elements)
       {
@@ -1988,6 +1994,8 @@ bool MYSQL_LOG::write(Log_event *event_info)
 			       user_var_event->charset_number);
 	  if (e.write(file))
 	    goto err;
+	  if (file == &log_file)
+		  thd->binlog_bytes_written += e.data_written;
 	}
       }
     }
@@ -1998,6 +2006,8 @@ bool MYSQL_LOG::write(Log_event *event_info)
 
     if (event_info->write(file))
       goto err;
+    if (file == &log_file)
+	    thd->binlog_bytes_written += event_info->data_written;
 
     if (file == &log_file) // we are writing to the real log (disk)
     {
@@ -2120,6 +2130,7 @@ bool MYSQL_LOG::write(THD *thd, IO_CACHE *cache, Log_event *commit_event)
     */
     if (qinfo.write(&log_file))
       goto err;
+    thd->binlog_bytes_written += qinfo.data_written;
 
     /* Read from the file used to cache the queries .*/
     if (reinit_io_cache(cache, READ_CACHE, 0, 0, 0))
@@ -2166,6 +2177,7 @@ bool MYSQL_LOG::write(THD *thd, IO_CACHE *cache, Log_event *commit_event)
         /* write the first half of the split header */
         if (my_b_write(&log_file, header, carry))
           goto err;
+        thd->binlog_bytes_written += carry;
 
         /*
           copy fixed second half of header to cache so the correct
@@ -2234,6 +2246,8 @@ bool MYSQL_LOG::write(THD *thd, IO_CACHE *cache, Log_event *commit_event)
       /* Write data to the binary log file */
       if (my_b_write(&log_file, cache->read_pos, length))
         goto err;
+      thd->binlog_bytes_written += length;
+
       cache->read_pos=cache->read_end;		// Mark buffer used up
       DBUG_EXECUTE_IF("half_binlogged_transaction", goto DBUG_skip_commit;);
     } while ((length=my_b_fill(cache)));
@@ -2242,6 +2256,8 @@ bool MYSQL_LOG::write(THD *thd, IO_CACHE *cache, Log_event *commit_event)
 
     if (commit_event->write(&log_file))
       goto err;
+    thd->binlog_bytes_written += commit_event->data_written;
+
 #ifndef DBUG_OFF
 DBUG_skip_commit:
 #endif
diff --git a/sql/mysql_priv.h b/sql/mysql_priv.h
index 524600f..f04045a 100644
--- a/sql/mysql_priv.h
+++ b/sql/mysql_priv.h
@@ -765,7 +765,15 @@ void mysql_init_multi_delete(LEX *lex);
 bool multi_delete_set_locks_and_link_aux_tables(LEX *lex);
 void init_max_user_conn(void);
 void init_update_queries(void);
+void init_global_user_stats(void);
+void init_global_table_stats(void);
+void init_global_index_stats(void);
+void init_global_client_stats(void);
 void free_max_user_conn(void);
+void free_global_user_stats(void);
+void free_global_table_stats(void);
+void free_global_index_stats(void);
+void free_global_client_stats(void);
 pthread_handler_t handle_one_connection(void *arg);
 pthread_handler_t handle_bootstrap(void *arg);
 void end_thread(THD *thd,bool put_in_cache);
@@ -1338,6 +1346,7 @@ extern ulong table_cache_size;
 extern ulong max_connections,max_connect_errors, connect_timeout;
 extern ulong slave_net_timeout, slave_trans_retries;
 extern uint max_user_connections;
+extern ulonglong denied_connections;
 extern ulong what_to_log,flush_time;
 extern ulong query_buff_size, thread_stack;
 extern ulong max_prepared_stmt_count, prepared_stmt_count;
@@ -1367,6 +1376,7 @@ extern my_bool opt_sql_bin_update, opt_safe_user_create, opt_no_mix_types;
 extern my_bool opt_safe_show_db, opt_local_infile;
 extern my_bool opt_slave_compressed_protocol, use_temp_pool;
 extern my_bool opt_readonly, lower_case_file_system;
+extern my_bool opt_userstat_running;
 extern my_bool opt_enable_named_pipe, opt_sync_frm, opt_allow_suspicious_udfs;
 extern my_bool opt_secure_auth;
 extern char* opt_secure_file_priv;
@@ -1413,6 +1423,14 @@ extern struct system_variables global_system_variables;
 extern struct system_variables max_system_variables;
 extern struct system_status_var global_status_var;
 extern struct rand_struct sql_rand;
+extern HASH global_user_stats;
+extern HASH global_client_stats;
+extern pthread_mutex_t LOCK_global_user_client_stats;
+extern HASH global_table_stats;
+extern pthread_mutex_t LOCK_global_table_stats;
+extern HASH global_index_stats;
+extern pthread_mutex_t LOCK_global_index_stats;
+extern pthread_mutex_t LOCK_stats;
 
 extern const char *opt_date_time_formats[];
 extern KNOWN_DATE_TIME_FORMAT known_date_time_formats[];
diff --git a/sql/mysql_priv.h.orig b/sql/mysql_priv.h.orig
index 5a1b8ec..524600f 100644
--- a/sql/mysql_priv.h.orig
+++ b/sql/mysql_priv.h.orig
@@ -179,7 +179,7 @@ MY_LOCALE *my_locale_by_number(uint number);
  Feel free to raise this by the smallest amount you can to get the
  "execution_constants" test to pass.
  */
-#define STACK_MIN_SIZE          12000   // Abort if less stack during eval.
+#define STACK_MIN_SIZE          16384   // Abort if less stack during eval.
 
 #define STACK_MIN_SIZE_FOR_OPEN 1024*80
 #define STACK_BUFF_ALLOC        352     // For stack overrun checks
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 2c098df..30d65e7 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -417,6 +417,7 @@ my_bool lower_case_file_system= 0;
 my_bool opt_large_pages= 0;
 uint    opt_large_page_size= 0;
 my_bool opt_old_style_user_limits= 0, trust_function_creators= 0;
+my_bool opt_userstat_running= 0;
 /*
   True if there is at least one per-hour limit for some user, so we should
   check them before each query (and possibly reset counters when hour is
@@ -453,6 +454,7 @@ ulong specialflag=0;
 ulong binlog_cache_use= 0, binlog_cache_disk_use= 0;
 ulong max_connections, max_connect_errors;
 uint  max_user_connections= 0;
+ulonglong denied_connections = 0;
 /*
   Limit of the total number of prepared statements in the server.
   Is necessary to protect the server against out-of-memory attacks.
@@ -554,6 +556,10 @@ pthread_mutex_t LOCK_mysql_create_db, LOCK_Acl, LOCK_open, LOCK_thread_count,
 		LOCK_crypt, LOCK_bytes_sent, LOCK_bytes_received,
 	        LOCK_global_system_variables,
 		LOCK_user_conn, LOCK_slave_list, LOCK_active_mi;
+pthread_mutex_t LOCK_stats;
+pthread_mutex_t LOCK_global_user_client_stats;
+pthread_mutex_t LOCK_global_table_stats;
+pthread_mutex_t LOCK_global_index_stats;
 /*
   The below lock protects access to two global server variables:
   max_prepared_stmt_count and prepared_stmt_count. These variables
@@ -1195,6 +1201,10 @@ void clean_up(bool print_message)
   x_free(opt_secure_file_priv);
   bitmap_free(&temp_pool);
   free_max_user_conn();
+  free_global_user_stats();
+  free_global_client_stats();
+  free_global_table_stats();
+  free_global_index_stats();
 #ifdef HAVE_REPLICATION
   end_slave_list();
   free_list(&replicate_do_db);
@@ -1309,6 +1319,10 @@ static void clean_up_mutexes()
   (void) pthread_cond_destroy(&COND_thread_cache);
   (void) pthread_cond_destroy(&COND_flush_thread_cache);
   (void) pthread_cond_destroy(&COND_manager);
+  (void) pthread_mutex_destroy(&LOCK_stats);
+  (void) pthread_mutex_destroy(&LOCK_global_user_client_stats);
+  (void) pthread_mutex_destroy(&LOCK_global_table_stats);
+  (void) pthread_mutex_destroy(&LOCK_global_index_stats);
 }
 
 #endif /*EMBEDDED_LIBRARY*/
@@ -3218,6 +3232,10 @@ static int init_thread_environment()
   (void) pthread_mutex_init(&LOCK_rpl_status, MY_MUTEX_INIT_FAST);
   (void) pthread_cond_init(&COND_rpl_status, NULL);
 #endif
+  (void) pthread_mutex_init(&LOCK_stats, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_global_user_client_stats, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_global_table_stats, MY_MUTEX_INIT_FAST);
+  (void) pthread_mutex_init(&LOCK_global_index_stats, MY_MUTEX_INIT_FAST);
   sp_cache_init();
   /* Parameter for threads created for connections */
   (void) pthread_attr_init(&connection_attrib);
@@ -3492,6 +3510,10 @@ server.");
     sql_print_error("Out of memory");
     unireg_abort(1);
   }
+
+  init_global_table_stats();
+  init_global_index_stats();
+
   if (ha_init())
   {
     sql_print_error("Can't init databases");
@@ -3574,6 +3596,8 @@ server.");
 
   init_max_user_conn();
   init_update_queries();
+  init_global_user_stats();
+  init_global_client_stats();
   DBUG_RETURN(0);
 }
 
@@ -4282,6 +4306,7 @@ static void create_new_thread(THD *thd)
   {
     DBUG_PRINT("error",("Too many connections"));
     close_connection(thd, ER_CON_COUNT_ERROR, 1);
+    statistic_increment(denied_connections, &LOCK_status);
     delete thd;
     DBUG_VOID_RETURN;
   }
@@ -5095,6 +5120,7 @@ enum options_mysqld
   OPT_PORT_OPEN_TIMEOUT,
   OPT_MERGE,
   OPT_PROFILING,
+  OPT_USERSTAT_RUNNING,
   OPT_INNODB_ROLLBACK_ON_TIMEOUT,
   OPT_SECURE_FILE_PRIV,
   OPT_KEEP_FILES_ON_CREATE,
@@ -6524,6 +6550,10 @@ The minimum value for this variable is 4096.",
    (gptr*) &max_system_variables.net_wait_timeout, 0, GET_ULONG,
    REQUIRED_ARG, NET_WAIT_TIMEOUT, 1, IF_WIN(INT_MAX32/1000, LONG_TIMEOUT),
    0, 1, 0},
+  {"userstat_running", OPT_USERSTAT_RUNNING,
+   "Control USER_STATISTICS, CLIENT_STATISTICS, INDEX_STATISTICS and TABLE_STATISTICS running",
+   (gptr*) &opt_userstat_running, (gptr*) &opt_userstat_running,
+   0, GET_BOOL, NO_ARG, 0, 0, 1, 0, 1, 0},
   {0, 0, 0, 0, 0, 0, GET_NO_ARG, NO_ARG, 0, 0, 0, 0, 0, 0}
 };
 
diff --git a/sql/mysqld.cc.orig b/sql/mysqld.cc.orig
index 1ad8161..2c098df 100644
--- a/sql/mysqld.cc.orig
+++ b/sql/mysqld.cc.orig
@@ -2473,6 +2473,68 @@ static void init_signals(void)
   DBUG_VOID_RETURN;
 }
 
+/* pthread_attr_setstacksize without so much platform-dependency */
+/* returns the actual stack size if possible */
+static size_t my_setstacksize(pthread_attr_t *attr, size_t stacksize)
+{
+  size_t guard_size = 0;
+
+#if defined(__ia64__) || defined(__ia64)
+  /*
+    On IA64, half of the requested stack size is used for "normal stack"
+    and half for "register stack".  The space measured by check_stack_overrun
+    is the "normal stack", so double the request to make sure we have the
+    caller-expected amount of normal stack.
+
+    NOTE: there is no guarantee that the register stack can't grow faster
+    than normal stack, so it's very unclear that we won't dump core due to
+    stack overrun despite check_stack_overrun's efforts.  Experimentation
+    shows that in the execution_constants test, the register stack grows
+    less than half as fast as normal stack, but perhaps other scenarios are
+    less forgiving.  If it turns out that more space is needed for the
+    register stack, that could be forced (rather inefficiently) by using a
+    multiplier higher than 2 here.
+  */
+  stacksize *= 2;
+#endif
+
+  /*
+    On many machines, the "guard space" is subtracted from the requested
+    stack size, and that space is quite large on some platforms.  So add
+    it to our request, if we can find out what it is.
+
+    FIXME: autoconfiscate use of pthread_attr_getguardsize
+  */
+  if (pthread_attr_getguardsize(attr, &guard_size))
+    guard_size = 0;		/* if can't find it out, treat as 0 */
+
+  pthread_attr_setstacksize(attr, stacksize + guard_size);
+
+  /* Retrieve actual stack size if possible */
+#ifdef HAVE_PTHREAD_ATTR_GETSTACKSIZE
+  {
+    size_t real_stack_size= 0;
+    /* We must ignore real_stack_size = 0 as Solaris 2.9 can return 0 here */
+    if (pthread_attr_getstacksize(attr, &real_stack_size) == 0 &&
+	real_stack_size > guard_size)
+    {
+      real_stack_size -= guard_size;
+      if (real_stack_size < stacksize)
+      {
+	if (global_system_variables.log_warnings)
+	  sql_print_warning("Asked for %ld thread stack, but got %ld",
+			    (long) stacksize, (long) real_stack_size);
+	stacksize= real_stack_size;
+      }
+    }
+  }
+#endif
+
+#if defined(__ia64__) || defined(__ia64)
+  stacksize /= 2;
+#endif
+  return stacksize;
+}
 
 static void start_signal_handler(void)
 {
@@ -2486,15 +2548,7 @@ static void start_signal_handler(void)
   (void) pthread_attr_setdetachstate(&thr_attr,PTHREAD_CREATE_DETACHED);
   if (!(opt_specialflag & SPECIAL_NO_PRIOR))
     my_pthread_attr_setprio(&thr_attr,INTERRUPT_PRIOR);
-#if defined(__ia64__) || defined(__ia64)
-  /*
-    Peculiar things with ia64 platforms - it seems we only have half the
-    stack size in reality, so we have to double it here
-  */
-  pthread_attr_setstacksize(&thr_attr,thread_stack*2);
-#else
-  pthread_attr_setstacksize(&thr_attr,thread_stack);
-#endif
+  (void) my_setstacksize(&thr_attr,thread_stack);
 #endif
 
   (void) pthread_mutex_lock(&LOCK_thread_count);
@@ -3719,41 +3773,12 @@ int main(int argc, char **argv)
   init_signals();
   if (!(opt_specialflag & SPECIAL_NO_PRIOR))
     my_pthread_setprio(pthread_self(),CONNECT_PRIOR);
-#if defined(__ia64__) || defined(__ia64)
-  /*
-    Peculiar things with ia64 platforms - it seems we only have half the
-    stack size in reality, so we have to double it here
-  */
-  pthread_attr_setstacksize(&connection_attrib,thread_stack*2);
-#else
-  pthread_attr_setstacksize(&connection_attrib,thread_stack);
-#endif
-#ifdef HAVE_PTHREAD_ATTR_GETSTACKSIZE
-  {
-    /* Retrieve used stack size;  Needed for checking stack overflows */
-    size_t stack_size= 0;
-    pthread_attr_getstacksize(&connection_attrib, &stack_size);
-#if defined(__ia64__) || defined(__ia64)
-    stack_size/= 2;
-#endif
-    /* We must check if stack_size = 0 as Solaris 2.9 can return 0 here */
-    if (stack_size && stack_size < thread_stack)
-    {
-      if (global_system_variables.log_warnings)
-	sql_print_warning("Asked for %lu thread stack, but got %ld",
-			  thread_stack, (long) stack_size);
-#if defined(__ia64__) || defined(__ia64)
-      thread_stack= stack_size*2;
-#else
-      thread_stack= stack_size;
-#endif
-    }
-  }
-#endif
+
 #ifdef __NETWARE__
   /* Increasing stacksize of threads on NetWare */
-
   pthread_attr_setstacksize(&connection_attrib, NW_THD_STACKSIZE);
+#else
+  thread_stack = my_setstacksize(&connection_attrib,thread_stack);
 #endif
 
   (void) thr_setconcurrency(concurrency);	// 10 by default
diff --git a/sql/set_var.cc b/sql/set_var.cc
index febbcb5..7d60784 100644
--- a/sql/set_var.cc
+++ b/sql/set_var.cc
@@ -320,6 +320,7 @@ sys_var_thd_ulong       sys_preload_buff_size("preload_buffer_size",
 sys_var_thd_ulong	sys_read_buff_size("read_buffer_size",
 					   &SV::read_buff_size);
 sys_var_bool_ptr	sys_readonly("read_only", &opt_readonly);
+sys_var_bool_ptr	sys_userstat_running("userstat_running", &opt_userstat_running);
 sys_var_thd_ulong	sys_read_rnd_buff_size("read_rnd_buffer_size",
 					       &SV::read_rnd_buff_size);
 sys_var_thd_ulong	sys_div_precincrement("div_precision_increment",
@@ -810,6 +811,7 @@ sys_var *sys_variables[]=
   &sys_trans_alloc_block_size,
   &sys_trans_prealloc_size,
   &sys_tx_isolation,
+  &sys_userstat_running,
   &sys_version,
 #ifdef HAVE_BERKELEY_DB
   &sys_version_bdb,
@@ -1156,6 +1158,7 @@ struct show_var_st init_vars[]= {
   {sys_tx_isolation.name,     (char*) &sys_tx_isolation,	    SHOW_SYS},
   {sys_updatable_views_with_limit.name,
                               (char*) &sys_updatable_views_with_limit,SHOW_SYS},
+  {sys_userstat_running.name, (char*) &sys_userstat_running,        SHOW_SYS},
   {sys_version.name,          (char*) &sys_version,                 SHOW_SYS},
 #ifdef HAVE_BERKELEY_DB
   {sys_version_bdb.name,      (char*) &sys_version_bdb,             SHOW_SYS},
diff --git a/sql/share/Makefile.in b/sql/share/Makefile.in
index b61bbac..3ad9208 100644
--- a/sql/share/Makefile.in
+++ b/sql/share/Makefile.in
@@ -144,6 +144,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/sql/sql_base.cc b/sql/sql_base.cc
index 6840b52..a01781d 100644
--- a/sql/sql_base.cc
+++ b/sql/sql_base.cc
@@ -624,6 +624,12 @@ bool close_thread_table(THD *thd, TABLE **table_ptr)
   DBUG_ENTER("close_thread_table");
   DBUG_ASSERT(table->key_read == 0);
   DBUG_ASSERT(!table->file || table->file->inited == handler::NONE);
+  
+  if(table->file)
+  {
+    table->file->update_global_table_stats();
+    table->file->update_global_index_stats();
+  }
 
   *table_ptr=table->next;
   if (table->needs_reopen_or_name_lock() ||
@@ -670,6 +676,9 @@ void close_temporary(TABLE *table,bool delete_table)
 {
   DBUG_ENTER("close_temporary");
   char path[FN_REFLEN];
+
+  table->file->update_global_table_stats();
+  table->file->update_global_index_stats();
   db_type table_type=table->s->db_type;
   strmov(path,table->s->path);
   free_io_cache(table);
diff --git a/sql/sql_class.cc b/sql/sql_class.cc
index 9734629..8199195 100644
--- a/sql/sql_class.cc
+++ b/sql/sql_class.cc
@@ -240,6 +240,13 @@ THD::THD()
   bzero(ha_data, sizeof(ha_data));
   mysys_var=0;
   binlog_evt_union.do_union= FALSE;
+  busy_time = 0;
+  cpu_time = 0;
+  bytes_received = 0;
+  bytes_sent = 0;
+  binlog_bytes_written = 0;
+  updated_row_count = 0;
+  sent_row_count_2 = 0;
 #ifndef DBUG_OFF
   dbug_sentry=THD_SENTRY_MAGIC;
 #endif
@@ -379,6 +386,88 @@ void THD::init(void)
   total_warn_count= 0;
   update_charset();
   bzero((char *) &status_var, sizeof(status_var));
+  reset_stats();
+}
+
+// Resets stats in a THD.
+void THD::reset_stats(void) {
+  current_connect_time = time(NULL);
+  last_global_update_time = current_connect_time;
+  reset_diff_stats();
+}
+
+// Resets the 'diff' stats, which are used to update global stats.
+void THD::reset_diff_stats(void) {
+  diff_total_busy_time = 0;
+  diff_total_cpu_time = 0;
+  diff_total_bytes_received = 0;
+  diff_total_bytes_sent = 0;
+  diff_total_binlog_bytes_written = 0;
+  diff_total_sent_rows = 0;
+  diff_total_updated_rows = 0;
+  diff_total_read_rows = 0;
+  diff_select_commands = 0;
+  diff_update_commands = 0;
+  diff_other_commands = 0;
+  diff_commit_trans = 0;
+  diff_rollback_trans = 0;
+  diff_denied_connections = 0;
+  diff_lost_connections = 0;
+  diff_access_denied_errors = 0;
+  diff_empty_queries = 0;
+}
+
+// Updates 'diff' stats of a THD.
+void THD::update_stats(bool ran_command) {
+  if (opt_userstat_running) {
+  diff_total_busy_time += busy_time;
+  diff_total_cpu_time += cpu_time;
+  diff_total_bytes_received += bytes_received;
+  diff_total_bytes_sent += bytes_sent;
+  diff_total_binlog_bytes_written += binlog_bytes_written;
+  diff_total_sent_rows += sent_row_count_2;
+  diff_total_updated_rows += updated_row_count;
+  // diff_total_read_rows is updated in handler.cc.
+
+  if (ran_command) {
+    // The replication thread has the COM_CONNECT command.
+    if ((old_command == COM_QUERY || command == COM_CONNECT) &&
+        (lex->sql_command >= 0 && lex->sql_command < SQLCOM_END)) {
+      // A SQL query.
+      if (lex->sql_command == SQLCOM_SELECT) {
+        if (lex->orig_sql_command == SQLCOM_END) {
+          diff_select_commands++;
+          if (!sent_row_count_2)
+            diff_empty_queries++;
+        } else {
+          // 'SHOW ' commands become SQLCOM_SELECT.
+          diff_other_commands++;
+          // 'SHOW ' commands shouldn't inflate total sent row count.
+          diff_total_sent_rows -= sent_row_count_2;
+        }
+      } else if (is_update_query(lex->sql_command)) {
+        diff_update_commands++;
+      } else {
+        diff_other_commands++;
+      }
+    }
+  }
+  // diff_commit_trans is updated in handler.cc.
+  // diff_rollback_trans is updated in handler.cc.
+  // diff_denied_connections is updated in sql_parse.cc.
+  // diff_lost_connections is updated in sql_parse.cc.
+  // diff_access_denied_errors is updated in sql_parse.cc.
+
+  /* reset counters to zero to avoid double-counting since values
+     are already store in diff_total_*. */
+  }
+  busy_time = 0;
+  cpu_time = 0;
+  bytes_received = 0;
+  bytes_sent = 0;
+  binlog_bytes_written = 0;
+  updated_row_count = 0;
+  sent_row_count_2 = 0;
 }
 
 
@@ -908,6 +997,33 @@ void THD::close_active_vio()
 }
 #endif
 
+char *THD::get_client_host_port(THD *client)
+{
+  Security_context *client_sctx= client->security_ctx;
+  char *client_host= NULL;
+
+  if (client->peer_port && (client_sctx->host || client_sctx->ip) &&
+      security_ctx->host_or_ip[0])
+  {
+    if ((client_host= this->alloc(LIST_PROCESS_HOST_LEN+1)))
+      my_snprintf((char *) client_host, LIST_PROCESS_HOST_LEN,
+                  "%s:%u", client_sctx->host_or_ip, client->peer_port);
+  }
+  else
+    client_host= this->strdup(client_sctx->host_or_ip[0] ?
+                              client_sctx->host_or_ip :
+                              client_sctx->host ? client_sctx->host : "");
+
+  return client_host;
+}
+
+const char *get_client_host(THD *client)
+{
+  return client->security_ctx->host_or_ip[0] ?
+      client->security_ctx->host_or_ip :
+      client->security_ctx->host ? client->security_ctx->host : "";
+}
+
 
 struct Item_change_record: public ilink
 {
@@ -1083,6 +1199,7 @@ bool select_send::send_data(List<Item> &items)
     buffer.set(buff, sizeof(buff), &my_charset_bin);
   }
   thd->sent_row_count++;
+  thd->sent_row_count_2++;
   if (!thd->vio_ok())
     DBUG_RETURN(0);
   if (!thd->net.report_error)
@@ -1175,6 +1292,7 @@ select_to_file::~select_to_file()
 select_export::~select_export()
 {
   thd->sent_row_count=row_count;
+  thd->sent_row_count_2=row_count;
 }
 
 
@@ -2110,6 +2228,7 @@ void thd_increment_bytes_sent(ulong length)
   if (likely(thd != 0))
   { /* current_thd==0 when close_connection() calls net_send_error() */
     thd->status_var.bytes_sent+= length;
+    thd->bytes_sent+= length;
   }
 }
 
@@ -2117,6 +2236,7 @@ void thd_increment_bytes_sent(ulong length)
 void thd_increment_bytes_received(ulong length)
 {
   current_thd->status_var.bytes_received+= length;
+  current_thd->bytes_received+= length;
 }
 
 
diff --git a/sql/sql_class.h b/sql/sql_class.h
index 4413571..fe446f9 100644
--- a/sql/sql_class.h
+++ b/sql/sql_class.h
@@ -1290,6 +1290,8 @@ public:
     first byte of the packet in do_command()
   */
   enum enum_server_command command;
+  // Used to save the command, before it is set to COM_SLEEP.
+  enum enum_server_command old_command;
   uint32     server_id;
   uint32     file_id;			// for LOAD DATA INFILE
   /*
@@ -1472,6 +1474,8 @@ public:
   /* variables.transaction_isolation is reset to this after each commit */
   enum_tx_isolation session_tx_isolation;
   enum_check_fields count_cuted_fields;
+  ha_rows    updated_row_count;
+  ha_rows    sent_row_count_2; /* for userstat */
 
   DYNAMIC_ARRAY user_var_events;        /* For user variables replication */
   MEM_ROOT      *user_var_events_alloc; /* Allocate above array elements here */
@@ -1581,6 +1585,49 @@ public:
   */
   LOG_INFO*  current_linfo;
   NET*       slave_net;			// network connection from slave -> m.
+
+  /*
+    Used to update global user stats.  The global user stats are updated
+    occasionally with the 'diff' variables.  After the update, the 'diff'
+    variables are reset to 0.
+   */
+  // Time when the current thread connected to MySQL.
+  time_t current_connect_time;
+  // Last time when THD stats were updated in global_user_stats.
+  time_t last_global_update_time;
+  // Busy (non-idle) time for just one command.
+  double busy_time;
+  // Busy time not updated in global_user_stats yet.
+  double diff_total_busy_time;
+  // Cpu (non-idle) time for just one thread.
+  double cpu_time;
+  // Cpu time not updated in global_user_stats yet.
+  double diff_total_cpu_time;
+  /* bytes counting */
+  ulonglong bytes_received;
+  ulonglong diff_total_bytes_received;
+  ulonglong bytes_sent;
+  ulonglong diff_total_bytes_sent;
+  ulonglong binlog_bytes_written;
+  ulonglong diff_total_binlog_bytes_written;
+
+  // Number of rows not reflected in global_user_stats yet.
+  ha_rows diff_total_sent_rows, diff_total_updated_rows, diff_total_read_rows;
+  // Number of commands not reflected in global_user_stats yet.
+  ulonglong diff_select_commands, diff_update_commands, diff_other_commands;
+  // Number of transactions not reflected in global_user_stats yet.
+  ulonglong diff_commit_trans, diff_rollback_trans;
+  // Number of connection errors not reflected in global_user_stats yet.
+  ulonglong diff_denied_connections, diff_lost_connections;
+  // Number of db access denied, not reflected in global_user_stats yet.
+  ulonglong diff_access_denied_errors;
+  // Number of queries that return 0 rows
+  ulonglong diff_empty_queries;
+
+  // Per account query delay in miliseconds. When not 0, sleep this number of
+  // milliseconds before every SQL command.
+  ulonglong query_delay_millis;
+
   /* Used by the sys_var class to store temporary values */
   union
   {
@@ -1636,6 +1683,11 @@ public:
     alloc_root.
   */
   void init_for_queries();
+  void reset_stats(void);
+  void reset_diff_stats(void);
+  // ran_command is true when this is called immediately after a
+  // command has been run.
+  void update_stats(bool ran_command);
   void change_user(void);
   void cleanup(void);
   void cleanup_after_query();
@@ -1874,8 +1926,14 @@ public:
     if (p_db_length)
       *p_db_length= db_length;
     return FALSE;
+
+  // Returns string as 'IP:port' for the client-side of the connnection represented
+  // by 'client' as displayed by SHOW PROCESSLIST. Allocates memory from the heap of
+  // this THD and that is not reclaimed immediately, so use sparingly. May return NULL.
   }
 
+  char *get_client_host_port(THD *client);
+
 public:
   /**
     Add an internal error handler to the thread execution context.
@@ -1926,6 +1984,10 @@ private:
   MEM_ROOT main_mem_root;
 };
 
+// Returns string as 'IP' for the client-side of the connection represented by
+// 'client'. Does not allocate memory. May return "".
+const char *get_client_host(THD *client);
+
 
 #define tmp_disable_binlog(A)       \
   {ulonglong tmp_disable_binlog__save_options= (A)->options; \
diff --git a/sql/sql_delete.cc b/sql/sql_delete.cc
index 1d29629..e80bf4a 100644
--- a/sql/sql_delete.cc
+++ b/sql/sql_delete.cc
@@ -367,6 +367,7 @@ cleanup:
     send_ok(thd,deleted);
     DBUG_PRINT("info",("%ld records deleted",(long) deleted));
   }
+  thd->updated_row_count += deleted;
   DBUG_RETURN(error >= 0 || thd->net.report_error);
 }
 
@@ -896,6 +897,7 @@ bool multi_delete::send_eof()
     thd->row_count_func= deleted;
     ::send_ok(thd, deleted);
   }
+  thd->updated_row_count += deleted;
   return 0;
 }
 
diff --git a/sql/sql_insert.cc b/sql/sql_insert.cc
index c2abe6d..9127dda 100644
--- a/sql/sql_insert.cc
+++ b/sql/sql_insert.cc
@@ -1000,6 +1000,7 @@ bool mysql_insert(THD *thd,TABLE_LIST *table_list,
     thd->row_count_func= info.copied + info.deleted + updated;
     ::send_ok(thd, (ulong) thd->row_count_func, id, buff);
   }
+  thd->updated_row_count += thd->row_count_func;
   thd->abort_on_warning= 0;
   DBUG_RETURN(FALSE);
 
@@ -3104,6 +3105,7 @@ bool select_insert::send_eof()
     autoinc_value_of_first_inserted_row : thd->insert_id_used ?
     thd->last_insert_id : 0;
   ::send_ok(thd, (ulong) thd->row_count_func, id, buff);
+  thd->updated_row_count += thd->row_count_func;
   DBUG_RETURN(0);
 }
 
diff --git a/sql/sql_lex.h b/sql/sql_lex.h
index 5a7d29a..1806387 100644
--- a/sql/sql_lex.h
+++ b/sql/sql_lex.h
@@ -100,6 +100,9 @@ enum enum_sql_command {
     When a command is added here, be sure it's also added in mysqld.cc
     in "struct show_var_st status_vars[]= {" ...
   */
+  // TODO(mcallaghan): update status_vars in mysqld to export these
+  SQLCOM_SHOW_USER_STATS, SQLCOM_SHOW_TABLE_STATS, SQLCOM_SHOW_INDEX_STATS,
+  SQLCOM_SHOW_CLIENT_STATS,
   /* This should be the last !!! */
   SQLCOM_END
 };
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index c1a1ebf..628f8b8 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -77,6 +77,12 @@ static bool append_file_to_dir(THD *thd, const char **filename_ptr,
 			       const char *table_name);
 static bool check_show_create_table_access(THD *thd, TABLE_LIST *table);
 
+// Increments connection count for user.
+static int increment_connection_count(THD* thd, bool use_lock);
+
+// Uses the THD to update the global stats by user name and client IP
+void update_global_user_stats(THD* thd, bool create_user, time_t now);
+
 const char *any_db="*any*";	// Special symbol for check_access
 
 const char *command_name[]={
@@ -145,6 +151,17 @@ static bool xa_trans_rollback(THD *thd)
 static bool do_command(THD *thd);
 #endif // EMBEDDED_LIBRARY
 
+HASH global_user_stats;
+HASH global_client_stats;
+// Protects global_user_stats and global_client_stats
+extern pthread_mutex_t LOCK_global_user_client_stats;
+
+HASH global_table_stats;
+extern pthread_mutex_t LOCK_global_table_stats;
+
+HASH global_index_stats;
+extern pthread_mutex_t LOCK_global_index_stats;
+
 #ifdef __WIN__
 extern void win_install_sigabrt_handler(void);
 #endif
@@ -512,6 +529,7 @@ int check_user(THD *thd, enum enum_server_command command,
     mysql_log.write(thd,COM_CONNECT,"%s",ER(ER_NOT_SUPPORTED_AUTH_MODE));
     DBUG_RETURN(-1);
   }
+  thd->diff_access_denied_errors++;
   net_printf_error(thd, ER_ACCESS_DENIED_ERROR,
                    thd->main_security_ctx.user,
                    thd->main_security_ctx.host_or_ip,
@@ -544,13 +562,191 @@ extern "C" void free_user(struct user_conn *uc)
 void init_max_user_conn(void)
 {
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
-  (void) hash_init(&hash_user_connections,system_charset_info,max_connections,
-		   0,0,
-		   (hash_get_key) get_key_conn, (hash_free_key) free_user,
-		   0);
+  if (hash_init(&hash_user_connections,system_charset_info,max_connections,
+                0,0,
+                (hash_get_key) get_key_conn, (hash_free_key) free_user,
+                0)) {
+    sql_print_error("Initializing hash_user_connections failed.");
+    exit(1);
+  }
 #endif
 }
 
+byte *get_key_user_stats(USER_STATS *user_stats, uint *length,
+                         my_bool not_used __attribute__((unused)))
+{
+  *length = strlen(user_stats->user);
+  return (byte*)user_stats->user;
+}
+
+void free_user_stats(USER_STATS* user_stats)
+{
+  my_free((char*)user_stats, MYF(0));
+}
+
+void init_user_stats(USER_STATS *user_stats,
+                     const char *user,
+                     const char *priv_user,
+                     uint total_connections,
+                     uint concurrent_connections,
+                     time_t connected_time,
+                     double busy_time,
+                     double cpu_time,
+                     ulonglong bytes_received,
+                     ulonglong bytes_sent,
+                     ulonglong binlog_bytes_written,
+                     ha_rows rows_fetched,
+                     ha_rows rows_updated,
+                     ha_rows rows_read,
+                     ulonglong select_commands,
+                     ulonglong update_commands,
+                     ulonglong other_commands,
+                     ulonglong commit_trans,
+                     ulonglong rollback_trans,
+                     ulonglong denied_connections,
+                     ulonglong lost_connections,
+                     ulonglong access_denied_errors,
+                     ulonglong empty_queries)
+{
+  DBUG_ENTER("init_user_stats");
+  DBUG_PRINT("info",
+             ("Add user_stats entry for user %s - priv_user %s",
+              user, priv_user));
+  strncpy(user_stats->user, user, sizeof(user_stats->user));
+  strncpy(user_stats->priv_user, priv_user, sizeof(user_stats->priv_user));
+
+  user_stats->total_connections = total_connections;
+  user_stats->concurrent_connections = concurrent_connections;
+  user_stats->connected_time = connected_time;
+  user_stats->busy_time = busy_time;
+  user_stats->cpu_time = cpu_time;
+  user_stats->bytes_received = bytes_received;
+  user_stats->bytes_sent = bytes_sent;
+  user_stats->binlog_bytes_written = binlog_bytes_written;
+  user_stats->rows_fetched = rows_fetched;
+  user_stats->rows_updated = rows_updated;
+  user_stats->rows_read = rows_read;
+  user_stats->select_commands = select_commands;
+  user_stats->update_commands = update_commands;
+  user_stats->other_commands = other_commands;
+  user_stats->commit_trans = commit_trans;
+  user_stats->rollback_trans = rollback_trans;
+  user_stats->denied_connections = denied_connections;
+  user_stats->lost_connections = lost_connections;
+  user_stats->access_denied_errors = access_denied_errors;
+  user_stats->empty_queries = empty_queries;
+  DBUG_VOID_RETURN;
+}
+
+void add_user_stats(USER_STATS *user_stats,
+                    uint total_connections,
+                    uint concurrent_connections,
+                    time_t connected_time,
+                    double busy_time,
+                    double cpu_time,
+                    ulonglong bytes_received,
+                    ulonglong bytes_sent,
+                    ulonglong binlog_bytes_written,
+                    ha_rows rows_fetched,
+                    ha_rows rows_updated,
+                    ha_rows rows_read,
+                    ulonglong select_commands,
+                    ulonglong update_commands,
+                    ulonglong other_commands,
+                    ulonglong commit_trans,
+                    ulonglong rollback_trans,
+                    ulonglong denied_connections,
+                    ulonglong lost_connections,
+                    ulonglong access_denied_errors,
+                    ulonglong empty_queries)
+{
+  user_stats->total_connections += total_connections;
+  user_stats->concurrent_connections += concurrent_connections;
+  user_stats->connected_time += connected_time;
+  user_stats->busy_time += busy_time;
+  user_stats->cpu_time += cpu_time;
+  user_stats->bytes_received += bytes_received;
+  user_stats->bytes_sent += bytes_sent;
+  user_stats->binlog_bytes_written += binlog_bytes_written;
+  user_stats->rows_fetched += rows_fetched;
+  user_stats->rows_updated += rows_updated;
+  user_stats->rows_read += rows_read;
+  user_stats->select_commands += select_commands;
+  user_stats->update_commands += update_commands;
+  user_stats->other_commands += other_commands;
+  user_stats->commit_trans += commit_trans;
+  user_stats->rollback_trans += rollback_trans;
+  user_stats->denied_connections += denied_connections;
+  user_stats->lost_connections += lost_connections;
+  user_stats->access_denied_errors += access_denied_errors;
+  user_stats->empty_queries += empty_queries;
+}
+
+void init_global_user_stats(void)
+{
+  if (hash_init(&global_user_stats, system_charset_info, max_connections,
+                0, 0, (hash_get_key)get_key_user_stats,
+                (hash_free_key)free_user_stats, 0)) {
+    sql_print_error("Initializing global_user_stats failed.");
+    exit(1);
+  }
+}
+
+void init_global_client_stats(void)
+{
+  if (hash_init(&global_client_stats, system_charset_info, max_connections,
+                0, 0, (hash_get_key)get_key_user_stats,
+                (hash_free_key)free_user_stats, 0)) {
+    sql_print_error("Initializing global_client_stats failed.");
+    exit(1);
+  }
+}
+
+extern "C" byte *get_key_table_stats(TABLE_STATS *table_stats, uint *length,
+                                     my_bool not_used __attribute__((unused)))
+{
+  *length = strlen(table_stats->table);
+  return (byte*)table_stats->table;
+}
+
+extern "C" void free_table_stats(TABLE_STATS* table_stats)
+{
+  my_free((char*)table_stats, MYF(0));
+}
+
+void init_global_table_stats(void)
+{
+  if (hash_init(&global_table_stats, system_charset_info, max_connections,
+                0, 0, (hash_get_key)get_key_table_stats,
+                (hash_free_key)free_table_stats, 0)) {
+    sql_print_error("Initializing global_table_stats failed.");
+    exit(1);
+  }
+}
+
+extern "C" byte *get_key_index_stats(INDEX_STATS *index_stats, uint *length,
+                                     my_bool not_used __attribute__((unused)))
+{
+  *length = strlen(index_stats->index);
+  return (byte*)index_stats->index;
+}
+
+extern "C" void free_index_stats(INDEX_STATS* index_stats)
+{
+  my_free((char*)index_stats, MYF(0));
+}
+
+void init_global_index_stats(void)
+{
+  if (hash_init(&global_index_stats, system_charset_info, max_connections,
+                0, 0, (hash_get_key)get_key_index_stats,
+                (hash_free_key)free_index_stats, 0)) {
+    sql_print_error("Initializing global_index_stats failed.");
+    exit(1);
+  }
+}
+
+
 
 /*
   check if user has already too many connections
@@ -607,7 +803,10 @@ static int check_for_max_user_connections(THD *thd, USER_CONN *uc)
 
   end:
   if (error)
+  {
+    statistic_increment(denied_connections, &LOCK_status);
     uc->connections--; // no need for decrease_user_connections() here
+  }
   (void) pthread_mutex_unlock(&LOCK_user_conn);
   DBUG_RETURN(error);
 }
@@ -654,6 +853,25 @@ void free_max_user_conn(void)
 #endif /* NO_EMBEDDED_ACCESS_CHECKS */
 }
 
+void free_global_user_stats(void)
+{
+  hash_free(&global_user_stats);
+}
+
+void free_global_table_stats(void)
+{
+  hash_free(&global_table_stats);
+}
+
+void free_global_index_stats(void)
+{
+  hash_free(&global_index_stats);
+}
+
+void free_global_client_stats(void)
+{
+  hash_free(&global_client_stats);
+}
 
 
 /*
@@ -706,6 +924,214 @@ bool is_update_query(enum enum_sql_command command)
   return uc_update_queries[command] != 0;
 }
 
+// 'mysql_system_user' is used for when the user is not defined for a THD.
+static char mysql_system_user[] = "#mysql_system#";
+
+// Returns 'user' if it's not NULL.  Returns 'mysql_system_user' otherwise.
+static char* get_valid_user_string(char* user) {
+  return user ? user : mysql_system_user;
+}
+
+// Increments the global stats connection count for an entry from
+// global_client_stats or global_user_stats. Returns 0 on success
+// and 1 on error.
+static int increment_count_by_name(const char *name, const char *role_name,
+                                   HASH *users_or_clients, THD *thd)
+{
+  USER_STATS* user_stats;
+
+  if (!(user_stats = (USER_STATS*)hash_search(users_or_clients, name,
+                                              strlen(name))))
+  {
+    // First connection for this user or client
+    if (!(user_stats = ((USER_STATS*)
+                        my_malloc(sizeof(USER_STATS), MYF(MY_WME | MY_ZEROFILL)))))
+    {
+      return 1; // Out of memory
+    }
+
+    init_user_stats(user_stats, name, role_name,
+                    0, 0,      // connections
+                    0, 0, 0,   // time
+                    0, 0, 0,   // bytes sent, received and written
+                    0, 0, 0,   // rows fetched, updated and read
+                    0, 0, 0,   // select, update and other commands
+                    0, 0,      // commit and rollback trans
+                    thd->diff_denied_connections,
+                    0,         // lost connections
+                    0,         // access denied errors
+                    0);        // empty queries
+
+    if (my_hash_insert(users_or_clients, (byte*)user_stats))
+    {
+      my_free((char*)user_stats, 0);
+      return 1; // Out of memory
+    }
+  }
+  user_stats->total_connections++;
+  return 0;
+}
+
+// Increments the global user and client stats connection count.  If 'use_lock'
+// is true, LOCK_global_user_client_stats will be locked/unlocked.  Returns
+// 0 on success, 1 on error.
+static int increment_connection_count(THD* thd, bool use_lock)
+{
+  char* user_string = get_valid_user_string(thd->main_security_ctx.user);
+  const char* client_string = get_client_host(thd);
+  int return_value = 0;
+
+  if (!opt_userstat_running)
+    return return_value;
+
+  if (use_lock) pthread_mutex_lock(&LOCK_global_user_client_stats);
+
+  if (increment_count_by_name(user_string, user_string,
+                              &global_user_stats, thd))
+  {
+    return_value = 1;
+    goto end;
+  }
+  if (increment_count_by_name(client_string,
+                              user_string,
+                              &global_client_stats, thd))
+  {
+    return_value = 1;
+    goto end;
+  }
+
+end:
+  if (use_lock) pthread_mutex_unlock(&LOCK_global_user_client_stats);
+  return return_value;
+}
+
+// Used to update the global user and client stats.
+static void update_global_user_stats_with_user(THD* thd,
+                                               USER_STATS* user_stats,
+                                               time_t now)
+{
+  user_stats->connected_time += now - thd->last_global_update_time;
+  thd->last_global_update_time = now;
+  user_stats->busy_time += thd->diff_total_busy_time;
+  user_stats->cpu_time += thd->diff_total_cpu_time;
+  user_stats->bytes_received += thd->diff_total_bytes_received;
+  user_stats->bytes_sent += thd->diff_total_bytes_sent;
+  user_stats->binlog_bytes_written += thd->diff_total_binlog_bytes_written;
+  user_stats->rows_fetched += thd->diff_total_sent_rows;
+  user_stats->rows_updated += thd->diff_total_updated_rows;
+  user_stats->rows_read += thd->diff_total_read_rows;
+  user_stats->select_commands += thd->diff_select_commands;
+  user_stats->update_commands += thd->diff_update_commands;
+  user_stats->other_commands += thd->diff_other_commands;
+  user_stats->commit_trans += thd->diff_commit_trans;
+  user_stats->rollback_trans += thd->diff_rollback_trans;
+  user_stats->denied_connections += thd->diff_denied_connections;
+  user_stats->lost_connections += thd->diff_lost_connections;
+  user_stats->access_denied_errors += thd->diff_access_denied_errors;
+  user_stats->empty_queries += thd->diff_empty_queries;
+}
+
+// Updates the global stats of a user or client
+void update_global_user_stats(THD* thd, bool create_user, time_t now)
+{
+  if (opt_userstat_running) {
+  char* user_string = get_valid_user_string(thd->main_security_ctx.user);
+  const char* client_string = get_client_host(thd);
+
+  USER_STATS* user_stats;
+  pthread_mutex_lock(&LOCK_global_user_client_stats);
+
+  // Update by user name
+  if ((user_stats = (USER_STATS*)hash_search(&global_user_stats,
+                                             (byte*)user_string,
+                                             strlen(user_string)))) {
+    // Found user.
+    update_global_user_stats_with_user(thd, user_stats, now);
+  } else {
+    // Create the entry
+    if (create_user) {
+      increment_count_by_name(user_string, user_string,
+                              &global_user_stats, thd);
+    }
+  }
+
+  // Update by client IP
+  if ((user_stats = (USER_STATS*)hash_search(&global_client_stats,
+                                             (byte*)client_string,
+                                             strlen(client_string)))) {
+    // Found by client IP
+    update_global_user_stats_with_user(thd, user_stats, now);
+  } else {
+    // Create the entry
+    if (create_user) {
+      increment_count_by_name(client_string,
+                              user_string,
+                              &global_client_stats, thd);
+    }
+  }
+  thd->reset_diff_stats();
+
+  pthread_mutex_unlock(&LOCK_global_user_client_stats);
+  } else {
+  thd->reset_diff_stats();
+  }
+}
+
+// Determines the concurrent number of connections of current threads.
+static void set_connections_stats()
+{
+  USER_STATS* user_stats;
+
+  pthread_mutex_lock(&LOCK_global_user_client_stats);
+  pthread_mutex_lock(&LOCK_thread_count);
+
+  // Resets all concurrent connections to 0.
+  for (int i = 0; i < global_user_stats.records; ++i) {
+    user_stats = (USER_STATS*)hash_element(&global_user_stats, i);
+    user_stats->concurrent_connections = 0;
+  }
+  for (int i = 0; i < global_client_stats.records; ++i) {
+    user_stats = (USER_STATS*)hash_element(&global_client_stats, i);
+    user_stats->concurrent_connections = 0;
+  }
+
+  I_List_iterator<THD> it(threads);
+  THD* thd;
+  time_t now = time(NULL);
+  // Iterates through the current threads.
+  while ((thd = it++)) {
+    char* user_string = get_valid_user_string(thd->main_security_ctx.user);
+    if ((user_stats = (USER_STATS*)hash_search(&global_user_stats,
+                                               (byte*)user_string,
+                                               strlen(user_string)))) {
+      // Found user.
+      user_stats->concurrent_connections++;
+      update_global_user_stats_with_user(thd, user_stats, now);
+    } else {
+      // The user name should exist.
+      if (user_string == mysql_system_user) {
+        // Only create the user if it is the mysql_system_user
+        increment_count_by_name(user_string, user_string,
+                                &global_user_stats, thd);
+      }
+    }
+
+    const char* client_string = get_client_host(thd);
+    if ((user_stats = (USER_STATS*)hash_search(&global_client_stats,
+                                               (byte*)client_string,
+                                               strlen(client_string)))) {
+      // Found user.
+      user_stats->concurrent_connections++;
+      update_global_user_stats_with_user(thd, user_stats, now);
+    } else {
+      // Do nothing, unlike what is done for global_user_stats
+    }
+    thd->reset_diff_stats();
+  }
+  pthread_mutex_unlock(&LOCK_thread_count);
+  pthread_mutex_unlock(&LOCK_global_user_client_stats);
+}
+
 /*
   Reset per-hour user resource limits when it has been more than
   an hour since they were last checked
@@ -1191,6 +1617,8 @@ pthread_handler_t handle_one_connection(void *arg)
     my_net_set_read_timeout(net, connect_timeout);
     my_net_set_write_timeout(net, connect_timeout);
 
+    bool create_user = true;
+
     if ((error=check_connection(thd)))
     {						// Wrong permissions
       if (error > 0)
@@ -1200,8 +1628,22 @@ pthread_handler_t handle_one_connection(void *arg)
 	my_sleep(1000);				/* must wait after eof() */
 #endif
       statistic_increment(aborted_connects,&LOCK_status);
+      thd->diff_denied_connections++;
+      if (error == -2) {
+        // Do not create statistics for a user who does not exist, or failed
+        // to authenticate.
+        create_user = false;
+      }
       goto end_thread;
     }
+
+    thd->reset_stats();
+    // Updates global user connection stats.
+    if (increment_connection_count(thd, true)) {
+      net_send_error(thd, ER_OUTOFMEMORY);  // Out of memory
+      goto end_thread;
+    }
+
 #ifdef __NETWARE__
     netware_reg_user(sctx->ip, sctx->user, "MySQL");
 #endif
@@ -1249,6 +1691,7 @@ pthread_handler_t handle_one_connection(void *arg)
         (net->vio && net->error && net->report_error))
     {
       statistic_increment(aborted_threads, &LOCK_status);
+      thd->diff_lost_connections++;
     }
 
     if (net->error && net->vio != 0 && net->report_error)
@@ -1268,6 +1711,8 @@ pthread_handler_t handle_one_connection(void *arg)
 
 end_thread:
     close_connection(thd, 0, 1);
+    thd->update_stats(false);
+    update_global_user_stats(thd, create_user, time(NULL));
     end_thread(thd,1);
     /*
       If end_thread returns, we are either running with --one-thread
@@ -1606,6 +2051,13 @@ static bool do_command(THD *thd)
 
   thd->clear_error();				// Clear error message
 
+  thd->updated_row_count=0;
+  thd->busy_time=0;
+  thd->cpu_time=0;
+  thd->bytes_received=0;
+  thd->bytes_sent=0;
+  thd->binlog_bytes_written=0;
+
   net_new_transaction(net);
 
   packet_length= my_net_read(net);
@@ -1764,6 +2216,9 @@ bool dispatch_command(enum enum_server_command command, THD *thd,
   }
 
   thd->command=command;
+  // To increment the corrent command counter for user stats, 'command' must
+  // be saved because it is set to COM_SLEEP at the end of this function.
+  thd->old_command = command;
   /*
     Commands which always take a long time are logged into
     the slow log only if opt_log_slow_admin_statements is set.
@@ -4552,6 +5007,15 @@ end_with_restore_list:
     if (check_global_access(thd,RELOAD_ACL))
       goto error;
 
+    if(lex->type & REFRESH_SLOW_QUERY_LOG) {
+        /* We are only flushing slow query log */
+        mysql_slow_log.new_file(1);
+    
+        send_ok(thd);
+        break;
+    }
+
+
     /*
       reload_acl_and_cache() will tell us if we are allowed to write to the
       binlog or not.
@@ -4860,6 +5324,7 @@ end_with_restore_list:
     {
       if (check_global_access(thd, SUPER_ACL))
       {
+        thd->diff_access_denied_errors++;
         my_error(ER_SPECIFIC_ACCESS_DENIED_ERROR, MYF(0), "SUPER");
         goto create_sp_error;
       }
@@ -5704,6 +6169,7 @@ check_access(THD *thd, ulong want_access, const char *db, ulong *save_priv,
       if (!no_errors)
       {
         const char *db_name= db ? db : thd->db;
+        thd->diff_access_denied_errors++;
         my_error(ER_DBACCESS_DENIED_ERROR, MYF(0),
                  sctx->priv_user, sctx->priv_host, db_name);
       }
@@ -5739,6 +6205,7 @@ check_access(THD *thd, ulong want_access, const char *db, ulong *save_priv,
   {						// We can never grant this
     DBUG_PRINT("error",("No possible access"));
     if (!no_errors)
+      thd->diff_access_denied_errors++;
       my_error(ER_ACCESS_DENIED_ERROR, MYF(0),
                sctx->priv_user,
                sctx->priv_host,
@@ -5771,11 +6238,15 @@ check_access(THD *thd, ulong want_access, const char *db, ulong *save_priv,
 
   DBUG_PRINT("error",("Access denied"));
   if (!no_errors)
+  {
+    // increment needs !no_errors condition, otherwise double counting.
+    thd->diff_access_denied_errors++;
     my_error(ER_DBACCESS_DENIED_ERROR, MYF(0),
              sctx->priv_user, sctx->priv_host,
              (db ? db : (thd->db ?
                          thd->db :
                          "unknown")));          /* purecov: tested */
+  }
   DBUG_RETURN(TRUE);				/* purecov: tested */
 #endif /* NO_EMBEDDED_ACCESS_CHECKS */
 }
@@ -5809,6 +6280,7 @@ bool check_global_access(THD *thd, ulong want_access)
   if ((thd->security_ctx->master_access & want_access))
     return 0;
   get_privilege_desc(command, sizeof(command), want_access);
+  thd->diff_access_denied_errors++;
   my_error(ER_SPECIFIC_ACCESS_DENIED_ERROR, MYF(0), command);
   return 1;
 #endif /* NO_EMBEDDED_ACCESS_CHECKS */
@@ -5841,6 +6313,7 @@ static bool check_show_access(THD *thd, TABLE_LIST *table)
 
       if (!thd->col_access && check_grant_db(thd, dst_db_name))
       {
+        thd->diff_access_denied_errors++;
         my_error(ER_DBACCESS_DENIED_ERROR, MYF(0),
                  thd->security_ctx->priv_user,
                  thd->security_ctx->priv_host,
@@ -5872,6 +6345,12 @@ static bool check_show_access(THD *thd, TABLE_LIST *table)
              check_grant(thd, SELECT_ACL, dst_table, 2, UINT_MAX, FALSE);
     }
 
+ 
+  case SCH_USER_STATS:
+  case SCH_CLIENT_STATS:
+     return check_global_access(thd, SUPER_ACL | PROCESS_ACL);
+  case SCH_TABLE_STATS:
+  case SCH_INDEX_STATS:
   case SCH_OPEN_TABLES:
   case SCH_VARIABLES:
   case SCH_STATUS:
@@ -5925,8 +6404,8 @@ check_table_access(THD *thd, ulong want_access,TABLE_LIST *tables,
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
   TABLE_LIST *org_tables= tables;
 #endif
-  TABLE_LIST *first_not_own_table= thd->lex->first_not_own_table();
   Security_context *sctx= thd->security_ctx, *backup_ctx= thd->security_ctx;
+  TABLE_LIST *first_not_own_table= thd->lex->first_not_own_table();
   /*
     The check that first_not_own_table is not reached is for the case when
     the given table list refers to the list for prelocking (contains tables
@@ -5943,9 +6422,12 @@ check_table_access(THD *thd, ulong want_access,TABLE_LIST *tables,
         (want_access & ~(SELECT_ACL | EXTRA_ACL | FILE_ACL)))
     {
       if (!no_errors)
+      {
+        thd->diff_access_denied_errors++;
         my_error(ER_DBACCESS_DENIED_ERROR, MYF(0),
                  sctx->priv_user, sctx->priv_host,
                  INFORMATION_SCHEMA_NAME.str);
+      }
       return TRUE;
     }
     /*
@@ -6445,6 +6927,32 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
   */
   lex_start(thd);
   mysql_reset_thd_for_next_command(thd);
+  
+  int start_time_error = 0;
+  int end_time_error = 0;
+  struct timeval start_time, end_time;
+  double start_usecs = 0;
+  double end_usecs = 0;
+  /* cpu time */
+  int cputime_error = 0;
+  struct timespec tp;
+  double start_cpu_nsecs = 0;
+  double end_cpu_nsecs = 0;
+   
+  if (opt_userstat_running) {
+  #ifdef HAVE_CLOCK_GETTIME
+   /* get start cputime */ 
+   if (!(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+         start_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+   #endif
+   
+       // Gets the start time, in order to measure how long this command takes.
+       if (!(start_time_error = gettimeofday(&start_time, NULL))) {
+         start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
+       }
+     }
+   
+  
 
   if (query_cache_send_result_to_client(thd, rawbuf, length) <= 0)
   {
@@ -6524,6 +7032,43 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
     *found_semicolon= NULL;
   }
 
+  if (opt_userstat_running) {
+    // Gets the end time.
+    if (!(end_time_error = gettimeofday(&end_time, NULL))) {
+      end_usecs = end_time.tv_sec * 1000000.0 + end_time.tv_usec;
+    }
+
+    // Calculates the difference between the end and start times.
+    if (start_usecs && end_usecs >= start_usecs && !start_time_error && !end_time_error) {
+      thd->busy_time = (end_usecs - start_usecs) / 1000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->busy_time > 2629743) {
+        thd->busy_time = 0;
+      }
+    } else {
+      // end time went back in time, or gettimeofday() failed.
+      thd->busy_time = 0;
+    }
+
+#ifdef HAVE_CLOCK_GETTIME
+    /* get end cputime */
+    if (!cputime_error &&
+        !(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      end_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+    if (start_cpu_nsecs && !cputime_error) {
+      thd->cpu_time = (end_cpu_nsecs - start_cpu_nsecs) / 1000000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->cpu_time > 2629743) {
+        thd->cpu_time = 0;
+      }
+    } else
+      thd->cpu_time = 0;
+  }
+  // Updates THD stats and the global user stats.
+  thd->update_stats(true);
+  update_global_user_stats(thd, true, time(NULL));
+
   DBUG_VOID_RETURN;
 }
 
@@ -7535,8 +8080,35 @@ bool reload_acl_and_cache(THD *thd, ulong options, TABLE_LIST *tables,
    pthread_mutex_unlock(&LOCK_active_mi);
  }
 #endif
- if (options & REFRESH_USER_RESOURCES)
-   reset_mqh((LEX_USER *) NULL);
+  if (options & REFRESH_TABLE_STATS)
+  {
+    pthread_mutex_lock(&LOCK_global_table_stats);
+    free_global_table_stats();
+    init_global_table_stats();
+    pthread_mutex_unlock(&LOCK_global_table_stats);
+  }
+  if (options & REFRESH_INDEX_STATS)
+  {
+    pthread_mutex_lock(&LOCK_global_index_stats);
+    free_global_index_stats();
+    init_global_index_stats();
+    pthread_mutex_unlock(&LOCK_global_index_stats);
+  }
+  if (options & (REFRESH_USER_STATS | REFRESH_CLIENT_STATS))
+  {
+    pthread_mutex_lock(&LOCK_global_user_client_stats);
+    if (options & REFRESH_USER_STATS)
+    {
+      free_global_user_stats();
+      init_global_user_stats();
+    }
+    if (options & REFRESH_CLIENT_STATS)
+    {
+      free_global_client_stats();
+      init_global_client_stats();
+    }
+    pthread_mutex_unlock(&LOCK_global_user_client_stats);
+  }
  *write_to_binlog= tmp_write_to_binlog;
  return result;
 }
diff --git a/sql/sql_prepare.cc b/sql/sql_prepare.cc
index f571687..e7fa3dd 100644
--- a/sql/sql_prepare.cc
+++ b/sql/sql_prepare.cc
@@ -81,6 +81,9 @@ When one supplies long data for a placeholder:
 #include <mysql_com.h>
 #endif
 
+// Uses the THD to update the global stats by user name and client IP
+void update_global_user_stats(THD* thd, bool create_user, time_t now);
+
 /* A result class used to send cursor rows using the binary protocol. */
 
 class Select_fetch_protocol_prep: public select_send
@@ -1937,8 +1940,32 @@ void mysql_stmt_prepare(THD *thd, const char *packet, uint packet_length)
   /* First of all clear possible warnings from the previous command */
   mysql_reset_thd_for_next_command(thd);
 
+  int start_time_error = 0;
+  int end_time_error = 0;
+  struct timeval start_time, end_time;
+  double start_usecs = 0;
+  double end_usecs = 0;
+  /* cpu time */
+  int cputime_error = 0;
+  struct timespec tp;
+  double start_cpu_nsecs = 0;
+  double end_cpu_nsecs = 0;
+
+  if (opt_userstat_running) {
+#ifdef HAVE_CLOCK_GETTIME
+    /* get start cputime */
+    if (!(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      start_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+
+    // Gets the start time, in order to measure how long this command takes.
+    if (!(start_time_error = gettimeofday(&start_time, NULL))) {
+      start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
+    }
+  }
+
   if (! (stmt= new Prepared_statement(thd, &thd->protocol_prep)))
-    DBUG_VOID_RETURN; /* out of memory: error is set in Sql_alloc */
+    goto end; /* out of memory: error is set in Sql_alloc */
 
   if (thd->stmt_map.insert(thd, stmt))
   {
@@ -1946,7 +1973,7 @@ void mysql_stmt_prepare(THD *thd, const char *packet, uint packet_length)
       The error is set in the insert. The statement itself
       will be also deleted there (this is how the hash works).
     */
-    DBUG_VOID_RETURN;
+    goto end;
   }
 
   /* Reset warnings from previous command */
@@ -1968,6 +1995,44 @@ void mysql_stmt_prepare(THD *thd, const char *packet, uint packet_length)
     thd->stmt_map.erase(stmt);
   }
   /* check_prepared_statemnt sends the metadata packet in case of success */
+end:
+  if (opt_userstat_running) {
+    // Gets the end time.
+    if (!(end_time_error = gettimeofday(&end_time, NULL))) {
+      end_usecs = end_time.tv_sec * 1000000.0 + end_time.tv_usec;
+    }
+
+    // Calculates the difference between the end and start times.
+    if (start_usecs && end_usecs >= start_usecs && !start_time_error && !end_time_error) {
+      thd->busy_time = (end_usecs - start_usecs) / 1000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->busy_time > 2629743) {
+        thd->busy_time = 0;
+      }
+    } else {
+      // end time went back in time, or gettimeofday() failed.
+      thd->busy_time = 0;
+    }
+
+#ifdef HAVE_CLOCK_GETTIME
+    /* get end cputime */
+    if (!cputime_error &&
+        !(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      end_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+    if (start_cpu_nsecs && !cputime_error) {
+      thd->cpu_time = (end_cpu_nsecs - start_cpu_nsecs) / 1000000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->cpu_time > 2629743) {
+        thd->cpu_time = 0;
+      }
+    } else
+      thd->cpu_time = 0;
+  }
+  // Updates THD stats and the global user stats.
+  thd->update_stats(true);
+  update_global_user_stats(thd, true, time(NULL));
+
   DBUG_VOID_RETURN;
 }
 
@@ -2307,8 +2372,32 @@ void mysql_stmt_execute(THD *thd, char *packet_arg, uint packet_length)
   /* First of all clear possible warnings from the previous command */
   mysql_reset_thd_for_next_command(thd);
 
+  int start_time_error = 0;
+  int end_time_error = 0;
+  struct timeval start_time, end_time;
+  double start_usecs = 0;
+  double end_usecs = 0;
+  /* cpu time */
+  int cputime_error = 0;
+  struct timespec tp;
+  double start_cpu_nsecs = 0;
+  double end_cpu_nsecs = 0;
+
+  if (opt_userstat_running) {
+#ifdef HAVE_CLOCK_GETTIME
+    /* get start cputime */
+    if (!(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      start_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+
+    // Gets the start time, in order to measure how long this command takes.
+    if (!(start_time_error = gettimeofday(&start_time, NULL))) {
+      start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
+    }
+  }
+
   if (!(stmt= find_prepared_statement(thd, stmt_id, "mysql_stmt_execute")))
-    DBUG_VOID_RETURN;
+    goto end;
 
 #if defined(ENABLED_PROFILING) && defined(COMMUNITY_SERVER)
   thd->profiling.set_query_source(stmt->query, stmt->query_length);
@@ -2351,11 +2440,50 @@ void mysql_stmt_execute(THD *thd, char *packet_arg, uint packet_length)
                        test(flags & (ulong) CURSOR_TYPE_READ_ONLY));
   if (!(specialflag & SPECIAL_NO_PRIOR))
     my_pthread_setprio(pthread_self(), WAIT_PRIOR);
-  DBUG_VOID_RETURN;
+  goto end;
 
 set_params_data_err:
   my_error(ER_WRONG_ARGUMENTS, MYF(0), "mysql_stmt_execute");
   reset_stmt_params(stmt);
+
+end:
+  if (opt_userstat_running) {
+    // Gets the end time.
+    if (!(end_time_error = gettimeofday(&end_time, NULL))) {
+      end_usecs = end_time.tv_sec * 1000000.0 + end_time.tv_usec;
+    }
+
+    // Calculates the difference between the end and start times.
+    if (start_usecs && end_usecs >= start_usecs && !start_time_error && !end_time_error) {
+      thd->busy_time = (end_usecs - start_usecs) / 1000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->busy_time > 2629743) {
+        thd->busy_time = 0;
+      }
+    } else {
+      // end time went back in time, or gettimeofday() failed.
+      thd->busy_time = 0;
+    }
+
+#ifdef HAVE_CLOCK_GETTIME
+    /* get end cputime */
+    if (!cputime_error &&
+        !(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      end_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+    if (start_cpu_nsecs && !cputime_error) {
+      thd->cpu_time = (end_cpu_nsecs - start_cpu_nsecs) / 1000000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->cpu_time > 2629743) {
+        thd->cpu_time = 0;
+      }
+    } else
+      thd->cpu_time = 0;
+  }
+  // Updates THD stats and the global user stats.
+  thd->update_stats(true);
+  update_global_user_stats(thd, true, time(NULL));
+
   DBUG_VOID_RETURN;
 }
 
@@ -2449,6 +2577,31 @@ void mysql_stmt_fetch(THD *thd, char *packet, uint packet_length)
 
   /* First of all clear possible warnings from the previous command */
   mysql_reset_thd_for_next_command(thd);
+
+  int start_time_error = 0;
+  int end_time_error = 0;
+  struct timeval start_time, end_time;
+  double start_usecs = 0;
+  double end_usecs = 0;
+  /* cpu time */
+  int cputime_error = 0;
+  struct timespec tp;
+  double start_cpu_nsecs = 0;
+  double end_cpu_nsecs = 0;
+
+  if (opt_userstat_running) {
+#ifdef HAVE_CLOCK_GETTIME
+    /* get start cputime */
+    if (!(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      start_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+
+    // Gets the start time, in order to measure how long this command takes.
+    if (!(start_time_error = gettimeofday(&start_time, NULL))) {
+      start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
+    }
+  }
+
   statistic_increment(thd->status_var.com_stmt_fetch, &LOCK_status);
   if (!(stmt= find_prepared_statement(thd, stmt_id, "mysql_stmt_fetch")))
     DBUG_VOID_RETURN;
@@ -2481,6 +2634,43 @@ void mysql_stmt_fetch(THD *thd, char *packet, uint packet_length)
   thd->restore_backup_statement(stmt, &stmt_backup);
   thd->stmt_arena= thd;
 
+  if (opt_userstat_running) {
+    // Gets the end time.
+    if (!(end_time_error = gettimeofday(&end_time, NULL))) {
+      end_usecs = end_time.tv_sec * 1000000.0 + end_time.tv_usec;
+    }
+
+    // Calculates the difference between the end and start times.
+    if (start_usecs && end_usecs >= start_usecs && !start_time_error && !end_time_error) {
+      thd->busy_time = (end_usecs - start_usecs) / 1000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->busy_time > 2629743) {
+        thd->busy_time = 0;
+      }
+    } else {
+      // end time went back in time, or gettimeofday() failed.
+      thd->busy_time = 0;
+    }
+
+#ifdef HAVE_CLOCK_GETTIME
+    /* get end cputime */
+    if (!cputime_error &&
+        !(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      end_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+    if (start_cpu_nsecs && !cputime_error) {
+      thd->cpu_time = (end_cpu_nsecs - start_cpu_nsecs) / 1000000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->cpu_time > 2629743) {
+        thd->cpu_time = 0;
+      }
+    } else
+      thd->cpu_time = 0;
+  }
+  // Updates THD stats and the global user stats.
+  thd->update_stats(true);
+  update_global_user_stats(thd, true, time(NULL));
+
   DBUG_VOID_RETURN;
 }
 
@@ -2513,6 +2703,30 @@ void mysql_stmt_reset(THD *thd, char *packet)
   /* First of all clear possible warnings from the previous command */
   mysql_reset_thd_for_next_command(thd);
 
+  int start_time_error = 0;
+  int end_time_error = 0;
+  struct timeval start_time, end_time;
+  double start_usecs = 0;
+  double end_usecs = 0;
+  /* cpu time */
+  int cputime_error = 0;
+  struct timespec tp;
+  double start_cpu_nsecs = 0;
+  double end_cpu_nsecs = 0;
+
+  if (opt_userstat_running) {
+#ifdef HAVE_CLOCK_GETTIME
+    /* get start cputime */
+    if (!(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      start_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+
+    // Gets the start time, in order to measure how long this command takes.
+    if (!(start_time_error = gettimeofday(&start_time, NULL))) {
+      start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
+    }
+  }
+
   statistic_increment(thd->status_var.com_stmt_reset, &LOCK_status);
   if (!(stmt= find_prepared_statement(thd, stmt_id, "mysql_stmt_reset")))
     DBUG_VOID_RETURN;
@@ -2529,6 +2743,43 @@ void mysql_stmt_reset(THD *thd, char *packet)
 
   send_ok(thd);
 
+  if (opt_userstat_running) {
+    // Gets the end time.
+    if (!(end_time_error = gettimeofday(&end_time, NULL))) {
+      end_usecs = end_time.tv_sec * 1000000.0 + end_time.tv_usec;
+    }
+
+    // Calculates the difference between the end and start times.
+    if (start_usecs && end_usecs >= start_usecs && !start_time_error && !end_time_error) {
+      thd->busy_time = (end_usecs - start_usecs) / 1000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->busy_time > 2629743) {
+        thd->busy_time = 0;
+      }
+    } else {
+      // end time went back in time, or gettimeofday() failed.
+      thd->busy_time = 0;
+    }
+
+#ifdef HAVE_CLOCK_GETTIME
+    /* get end cputime */
+    if (!cputime_error &&
+        !(cputime_error = clock_gettime(CLOCK_THREAD_CPUTIME_ID, &tp)))
+      end_cpu_nsecs = tp.tv_sec*1000000000.0+tp.tv_nsec;
+#endif
+    if (start_cpu_nsecs && !cputime_error) {
+      thd->cpu_time = (end_cpu_nsecs - start_cpu_nsecs) / 1000000000;
+      // In case there are bad values, 2629743 is the #seconds in a month.
+      if (thd->cpu_time > 2629743) {
+        thd->cpu_time = 0;
+      }
+    } else
+      thd->cpu_time = 0;
+  }
+  // Updates THD stats and the global user stats.
+  thd->update_stats(true);
+  update_global_user_stats(thd, true, time(NULL));
+
   DBUG_VOID_RETURN;
 }
 
diff --git a/sql/sql_show.cc b/sql/sql_show.cc
index a564152..00f502d 100644
--- a/sql/sql_show.cc
+++ b/sql/sql_show.cc
@@ -498,6 +498,7 @@ bool mysqld_show_create_db(THD *thd, char *dbname,
 		sctx->master_access);
   if (!(db_access & DB_ACLS) && (!grant_option || check_grant_db(thd,dbname)))
   {
+    thd->diff_access_denied_errors++;
     my_error(ER_DBACCESS_DENIED_ERROR, MYF(0),
              sctx->priv_user, sctx->host_or_ip, dbname);
     mysql_log.write(thd,COM_INIT_DB,ER(ER_DBACCESS_DENIED_ERROR),
@@ -1840,6 +1841,300 @@ static bool show_status_array(THD *thd, const char *wild,
   DBUG_RETURN(FALSE);
 }
 
+/*
+   Aggregate values for mapped_user entries by their role.
+
+   SYNOPSIS
+     aggregate_user_stats
+       all_user_stats - input to aggregate
+       agg_user_stats - returns aggregated values
+
+   RETURN
+     0 - OK
+     1 - error
+ */
+static int
+aggregate_user_stats(HASH *all_user_stats, HASH *agg_user_stats)
+{
+  DBUG_ENTER("aggregate_user_stats");
+  if (hash_init(agg_user_stats, system_charset_info,
+                max(all_user_stats->records, 1),
+                0, 0, (hash_get_key)get_key_user_stats,
+                (hash_free_key)free_user_stats, 0))
+  {
+    sql_print_error("Malloc in aggregate_user_stats failed");
+    DBUG_RETURN(1);
+  }
+
+  for (int i = 0; i < all_user_stats->records; ++i) {
+    USER_STATS *user = (USER_STATS*)hash_element(all_user_stats, i);
+    USER_STATS *agg_user;
+    if (!(agg_user = (USER_STATS*)hash_search(agg_user_stats,
+                                              (byte*)user->priv_user,
+                                              strlen(user->priv_user))))
+    {
+      // First entry for this role.
+      if (!(agg_user =
+            (USER_STATS*) my_malloc(sizeof(USER_STATS), MYF(MY_WME | MY_ZEROFILL))))
+      {
+        sql_print_error("Malloc in aggregate_user_stats failed");
+        DBUG_RETURN(1);
+      }
+
+      init_user_stats(agg_user, user->priv_user, user->priv_user,
+                      user->total_connections, user->concurrent_connections,
+                      user->connected_time, user->busy_time, user->cpu_time,
+                      user->bytes_received, user->bytes_sent,
+                      user->binlog_bytes_written,
+                      user->rows_fetched, user->rows_updated, user->rows_read,
+                      user->select_commands, user->update_commands,
+                      user->other_commands,
+                      user->commit_trans, user->rollback_trans,
+                      user->denied_connections, user->lost_connections,
+                      user->access_denied_errors, user->empty_queries);
+
+      if (my_hash_insert(agg_user_stats, (byte*)agg_user))
+      {
+        // Out of memory.
+        my_free((char*)agg_user, 0);
+        sql_print_error("Malloc in aggregate_user_stats failed");
+        DBUG_RETURN(1);
+      }
+    }
+    else
+    {
+      // Aggregate with existing values for this role.
+      add_user_stats(agg_user,
+                     user->total_connections, user->concurrent_connections,
+                     user->connected_time, user->busy_time, user->cpu_time,
+                     user->bytes_received, user->bytes_sent,
+                     user->binlog_bytes_written,
+                     user->rows_fetched, user->rows_updated, user->rows_read,
+                     user->select_commands, user->update_commands,
+                     user->other_commands,
+                     user->commit_trans, user->rollback_trans,
+                     user->denied_connections, user->lost_connections,
+                     user->access_denied_errors, user->empty_queries);
+    }
+  }
+  DBUG_PRINT("exit", ("aggregated %d input into %d output entries",
+                      all_user_stats->records, agg_user_stats->records));
+  DBUG_RETURN(0);
+}
+
+/*
+   Write result to network for SHOW USER_STATISTICS
+
+   SYNOPSIS
+     send_user_stats
+       all_user_stats - values to return
+       table - I_S table
+
+   RETURN
+     0 - OK
+     1 - error
+ */
+int send_user_stats(THD* thd, HASH *all_user_stats, TABLE *table)
+{
+  DBUG_ENTER("send_user_stats");
+  for (int i = 0; i < all_user_stats->records; ++i) {
+    restore_record(table, s->default_values);
+    USER_STATS *user_stats = (USER_STATS*)hash_element(all_user_stats, i);
+      table->field[0]->store(user_stats->user, strlen(user_stats->user), system_charset_info);
+      table->field[1]->store((longlong)user_stats->total_connections);
+      table->field[2]->store((longlong)user_stats->concurrent_connections);
+      table->field[3]->store((longlong)user_stats->connected_time);
+      table->field[4]->store((longlong)user_stats->busy_time);
+      table->field[5]->store((longlong)user_stats->cpu_time);
+      table->field[6]->store((longlong)user_stats->bytes_received);
+      table->field[7]->store((longlong)user_stats->bytes_sent);
+      table->field[8]->store((longlong)user_stats->binlog_bytes_written);
+      table->field[9]->store((longlong)user_stats->rows_fetched);
+      table->field[10]->store((longlong)user_stats->rows_updated);
+      table->field[11]->store((longlong)user_stats->rows_read);
+      table->field[12]->store((longlong)user_stats->select_commands);
+      table->field[13]->store((longlong)user_stats->update_commands);
+      table->field[14]->store((longlong)user_stats->other_commands);
+      table->field[15]->store((longlong)user_stats->commit_trans);
+      table->field[16]->store((longlong)user_stats->rollback_trans);
+      table->field[17]->store((longlong)user_stats->denied_connections);
+      table->field[18]->store((longlong)user_stats->lost_connections);
+      table->field[19]->store((longlong)user_stats->access_denied_errors);
+      table->field[20]->store((longlong)user_stats->empty_queries);
+      if (schema_table_store_record(thd, table))
+      {
+	      DBUG_PRINT("error", ("store record error"));
+	      DBUG_RETURN(1);
+      }
+  }
+  DBUG_RETURN(0);
+}
+
+/*
+   Process SHOW USER_STATISTICS
+
+   SYNOPSIS
+     mysqld_show_user_stats
+       thd - current thread
+       wild - limit results to the entry for this user
+       with_roles - when true, display role for mapped users
+
+   RETURN
+     0 - OK
+     1 - error
+ */
+
+
+int fill_schema_user_stats(THD* thd, TABLE_LIST* tables, COND* cond)
+{
+  TABLE *table= tables->table;
+  DBUG_ENTER("fill_schema_user_stats");
+
+  if (check_global_access(thd, SUPER_ACL | PROCESS_ACL))
+          DBUG_RETURN(1);
+
+  // Iterates through all the global stats and sends them to the client.
+  // Pattern matching on the client IP is supported.
+
+  pthread_mutex_lock(&LOCK_global_user_client_stats);
+  int result= send_user_stats(thd, &global_user_stats, table);
+  pthread_mutex_unlock(&LOCK_global_user_client_stats);
+  if (result)
+    goto err;
+
+  DBUG_PRINT("exit", ("fill_schema_user_stats result is 0"));
+  DBUG_RETURN(0);
+
+ err:
+  DBUG_PRINT("exit", ("fill_schema_user_stats result is 1"));
+  DBUG_RETURN(1);
+}
+
+/*
+   Process SHOW CLIENT_STATISTICS
+
+   SYNOPSIS
+     mysqld_show_client_stats
+       thd - current thread
+       wild - limit results to the entry for this client
+
+   RETURN
+     0 - OK
+     1 - error
+ */
+
+
+int fill_schema_client_stats(THD* thd, TABLE_LIST* tables, COND* cond)
+{
+  TABLE *table= tables->table;
+  DBUG_ENTER("fill_schema_client_stats");
+
+  if (check_global_access(thd, SUPER_ACL | PROCESS_ACL))
+          DBUG_RETURN(1);
+
+  // Iterates through all the global stats and sends them to the client.
+  // Pattern matching on the client IP is supported.
+
+  pthread_mutex_lock(&LOCK_global_user_client_stats);
+  int result= send_user_stats(thd, &global_client_stats, table);
+  pthread_mutex_unlock(&LOCK_global_user_client_stats);
+  if (result)
+    goto err;
+
+  DBUG_PRINT("exit", ("mysqld_show_client_stats result is 0"));
+  DBUG_RETURN(0);
+
+ err:
+  DBUG_PRINT("exit", ("mysqld_show_client_stats result is 1"));
+  DBUG_RETURN(1);
+}
+
+
+// Sends the global table stats back to the client.
+int fill_schema_table_stats(THD* thd, TABLE_LIST* tables, COND* cond)
+{
+  TABLE *table= tables->table;
+  DBUG_ENTER("fill_schema_table_stats");
+  char *table_full_name, *table_schema;
+
+  pthread_mutex_lock(&LOCK_global_table_stats);
+  for (int i = 0; i < global_table_stats.records; ++i) {
+    restore_record(table, s->default_values);
+    TABLE_STATS *table_stats = 
+      (TABLE_STATS*)hash_element(&global_table_stats, i);
+
+    table_full_name= thd->strdup(table_stats->table);
+    table_schema= strsep(&table_full_name, ".");
+
+    TABLE_LIST tmp_table;
+    bzero((char*) &tmp_table,sizeof(tmp_table));
+    tmp_table.table_name= table_full_name;
+    tmp_table.db= table_schema;
+    tmp_table.grant.privilege= 0;
+    if (check_access(thd, SELECT_ACL | EXTRA_ACL, tmp_table.db,
+                      &tmp_table.grant.privilege, 0, 0,
+                      is_schema_db(table_schema)) ||
+         grant_option && check_grant(thd, SELECT_ACL, &tmp_table, 1, UINT_MAX, 1))
+        continue;
+
+    table->field[0]->store(table_schema, strlen(table_schema), system_charset_info);
+    table->field[1]->store(table_full_name, strlen(table_full_name), system_charset_info);
+    table->field[2]->store((longlong)table_stats->rows_read, TRUE);
+    table->field[3]->store((longlong)table_stats->rows_changed, TRUE);
+    table->field[4]->store((longlong)table_stats->rows_changed_x_indexes, TRUE);
+
+    if (schema_table_store_record(thd, table))
+    {
+      VOID(pthread_mutex_unlock(&LOCK_global_table_stats));
+      DBUG_RETURN(1);
+    }
+  }
+  pthread_mutex_unlock(&LOCK_global_table_stats);
+  DBUG_RETURN(0);
+}
+
+// Sends the global index stats back to the client.
+int fill_schema_index_stats(THD* thd, TABLE_LIST* tables, COND* cond)
+{
+  TABLE *table= tables->table;
+  DBUG_ENTER("fill_schema_index_stats");
+  char *index_full_name, *table_schema, *table_name;
+
+  pthread_mutex_lock(&LOCK_global_index_stats);
+  for (int i = 0; i < global_index_stats.records; ++i) {
+    restore_record(table, s->default_values);
+    INDEX_STATS *index_stats =
+      (INDEX_STATS*)hash_element(&global_index_stats, i);
+
+    index_full_name= thd->strdup(index_stats->index);
+    table_schema= strsep(&index_full_name, ".");
+    table_name= strsep(&index_full_name, ".");
+
+    TABLE_LIST tmp_table;
+    bzero((char*) &tmp_table,sizeof(tmp_table));
+    tmp_table.table_name= table_name;
+    tmp_table.db= table_schema;
+    tmp_table.grant.privilege= 0;
+    if (check_access(thd, SELECT_ACL | EXTRA_ACL, tmp_table.db,
+                      &tmp_table.grant.privilege, 0, 0,
+                      is_schema_db(table_schema)) ||
+         grant_option && check_grant(thd, SELECT_ACL, &tmp_table, 1, UINT_MAX, 1))
+        continue;
+
+    table->field[0]->store(table_schema, strlen(table_schema), system_charset_info);
+    table->field[1]->store(table_name, strlen(table_name), system_charset_info);
+    table->field[2]->store(index_full_name, strlen(index_full_name), system_charset_info);
+    table->field[3]->store((longlong)index_stats->rows_read, TRUE);
+
+    if (schema_table_store_record(thd, table))
+    { 
+      VOID(pthread_mutex_unlock(&LOCK_global_index_stats));
+      DBUG_RETURN(1);
+    }
+  }
+  pthread_mutex_unlock(&LOCK_global_index_stats);
+  DBUG_RETURN(0);
+}
 
 /* collect status for all running threads */
 
@@ -4473,6 +4768,77 @@ ST_FIELD_INFO variables_fields_info[]=
   {0, 0, MYSQL_TYPE_STRING, 0, 0, 0}
 };
 
+ST_FIELD_INFO user_stats_fields_info[]=
+{
+  {"USER", USERNAME_LENGTH, MYSQL_TYPE_STRING, 0, 0, "User"},
+  {"TOTAL_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Total_connections"},
+  {"CONCURRENT_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Concurrent_connections"},
+  {"CONNECTED_TIME", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Connected_time"},
+  {"BUSY_TIME", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Busy_time"},
+  {"CPU_TIME", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Cpu_time"},
+  {"BYTES_RECEIVED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Bytes_received"},
+  {"BYTES_SENT", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Bytes_sent"},
+  {"BINLOG_BYTES_WRITTEN", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Binlog_bytes_written"},
+  {"ROWS_FETCHED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_fetched"},
+  {"ROWS_UPDATED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_updated"},
+  {"TABLE_ROWS_READ", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Table_rows_read"},
+  {"SELECT_COMMANDS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Select_commands"},
+  {"UPDATE_COMMANDS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Update_commands"},
+  {"OTHER_COMMANDS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Other_commands"},
+  {"COMMIT_TRANSACTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Commit_transactions"},
+  {"ROLLBACK_TRANSACTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rollback_transactions"},
+  {"DENIED_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Denied_connections"},
+  {"LOST_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Lost_connections"},
+  {"ACCESS_DENIED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Access_denied"},
+  {"EMPTY_QUERIES", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Empty_queries"},
+  {0, 0, MYSQL_TYPE_STRING, 0, 0, 0}
+};
+
+ST_FIELD_INFO client_stats_fields_info[]=
+{
+  {"CLIENT", LIST_PROCESS_HOST_LEN, MYSQL_TYPE_STRING, 0, 0, "Client"},
+  {"TOTAL_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Total_connections"},
+  {"CONCURRENT_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Concurrent_connections"},
+  {"CONNECTED_TIME", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Connected_time"},
+  {"BUSY_TIME", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Busy_time"},
+  {"CPU_TIME", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Cpu_time"},
+  {"BYTES_RECEIVED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Bytes_received"},
+  {"BYTES_SENT", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Bytes_sent"},
+  {"BINLOG_BYTES_WRITTEN", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Binlog_bytes_written"},
+  {"ROWS_FETCHED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_fetched"},
+  {"ROWS_UPDATED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_updated"},
+  {"TABLE_ROWS_READ", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Table_rows_read"},
+  {"SELECT_COMMANDS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Select_commands"},
+  {"UPDATE_COMMANDS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Update_commands"},
+  {"OTHER_COMMANDS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Other_commands"},
+  {"COMMIT_TRANSACTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Commit_transactions"},
+  {"ROLLBACK_TRANSACTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rollback_transactions"},
+  {"DENIED_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Denied_connections"},
+  {"LOST_CONNECTIONS", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Lost_connections"},
+  {"ACCESS_DENIED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Access_denied"},
+  {"EMPTY_QUERIES", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Empty_queries"},
+  {0, 0, MYSQL_TYPE_STRING, 0, 0, 0}
+};
+
+
+ST_FIELD_INFO table_stats_fields_info[]=
+{
+  {"TABLE_SCHEMA", NAME_LEN, MYSQL_TYPE_STRING, 0, 0, "Table_schema"},
+  {"TABLE_NAME", NAME_LEN, MYSQL_TYPE_STRING, 0, 0, "Table_name"},
+  {"ROWS_READ", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_read"},
+  {"ROWS_CHANGED", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_changed"},
+  {"ROWS_CHANGED_X_INDEXES", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_changed_x_#indexes"},
+  {0, 0, MYSQL_TYPE_STRING, 0, 0, 0}
+};
+
+ST_FIELD_INFO index_stats_fields_info[]=
+{
+  {"TABLE_SCHEMA", NAME_LEN, MYSQL_TYPE_STRING, 0, 0, "Table_schema"},
+  {"TABLE_NAME", NAME_LEN, MYSQL_TYPE_STRING, 0, 0, "Table_name"},
+  {"INDEX_NAME", NAME_LEN, MYSQL_TYPE_STRING, 0, 0, "Index_name"},
+  {"ROWS_READ", MY_INT64_NUM_DECIMAL_DIGITS, MYSQL_TYPE_LONG, 0, 0, "Rows_read"},
+  {0, 0, MYSQL_TYPE_STRING, 0, 0, 0}
+};
 
 /*
   Description of ST_FIELD_INFO in table.h
@@ -4482,6 +4848,8 @@ ST_SCHEMA_TABLE schema_tables[]=
 {
   {"CHARACTER_SETS", charsets_fields_info, create_schema_table,
    fill_schema_charsets, make_character_sets_old_format, 0, -1, -1, 0},
+  {"CLIENT_STATISTICS", client_stats_fields_info, create_schema_table, 
+    fill_schema_client_stats, make_old_format, 0, -1, -1, 0},
   {"COLLATIONS", collation_fields_info, create_schema_table,
    fill_schema_collation, make_old_format, 0, -1, -1, 0},
   {"COLLATION_CHARACTER_SET_APPLICABILITY", coll_charset_app_fields_info,
@@ -4490,6 +4858,8 @@ ST_SCHEMA_TABLE schema_tables[]=
    get_all_tables, make_columns_old_format, get_schema_column_record, 1, 2, 0},
   {"COLUMN_PRIVILEGES", column_privileges_fields_info, create_schema_table,
     fill_schema_column_privileges, 0, 0, -1, -1, 0},
+  {"INDEX_STATISTICS", index_stats_fields_info, create_schema_table,
+   fill_schema_index_stats, make_old_format, 0, -1, -1, 0},
   {"KEY_COLUMN_USAGE", key_column_usage_fields_info, create_schema_table,
     get_all_tables, 0, get_schema_key_column_usage_record, 4, 5, 0},
   {"OPEN_TABLES", open_tables_fields_info, create_schema_table,
@@ -4515,10 +4885,14 @@ ST_SCHEMA_TABLE schema_tables[]=
    get_all_tables, make_table_names_old_format, 0, 1, 2, 1},
   {"TABLE_PRIVILEGES", table_privileges_fields_info, create_schema_table,
     fill_schema_table_privileges, 0, 0, -1, -1, 0},
+  {"TABLE_STATISTICS", table_stats_fields_info, create_schema_table,
+    fill_schema_table_stats, make_old_format, 0, -1, -1, 0},
   {"TRIGGERS", triggers_fields_info, create_schema_table,
    get_all_tables, make_old_format, get_schema_triggers_record, 5, 6, 0},
   {"USER_PRIVILEGES", user_privileges_fields_info, create_schema_table,
     fill_schema_user_privileges, 0, 0, -1, -1, 0},
+  {"USER_STATISTICS", user_stats_fields_info, create_schema_table, 
+    fill_schema_user_stats, make_old_format, 0, -1, -1, 0},
   {"VARIABLES", variables_fields_info, create_schema_table, fill_variables,
    make_old_format, 0, -1, -1, 1},
   {"VIEWS", view_fields_info, create_schema_table,
diff --git a/sql/sql_update.cc b/sql/sql_update.cc
index 6ffd2de..fc32593 100644
--- a/sql/sql_update.cc
+++ b/sql/sql_update.cc
@@ -607,7 +607,8 @@ int mysql_update(THD *thd,
       (thd->client_capabilities & CLIENT_FOUND_ROWS) ? found : updated;
     send_ok(thd, (ulong) thd->row_count_func,
 	    thd->insert_id_used ? thd->last_insert_id : 0L,buff);
-    DBUG_PRINT("info",("%ld records updated", (long) updated));
+    thd->updated_row_count += thd->row_count_func;
+    DBUG_PRINT("info",("%d records updated",updated));
   }
   thd->count_cuted_fields= CHECK_FIELD_IGNORE;		/* calc cuted fields */
   thd->abort_on_warning= 0;
@@ -1839,5 +1840,6 @@ bool multi_update::send_eof()
     (thd->client_capabilities & CLIENT_FOUND_ROWS) ? found : updated;
   ::send_ok(thd, (ulong) thd->row_count_func,
 	    thd->insert_id_used ? thd->last_insert_id : 0L,buff);
+  thd->updated_row_count += thd->row_count_func;
   return FALSE;
 }
diff --git a/sql/sql_yacc.yy b/sql/sql_yacc.yy
index 57ee9da..86774b1 100644
--- a/sql/sql_yacc.yy
+++ b/sql/sql_yacc.yy
@@ -558,6 +558,7 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  CHECK_SYM
 %token  CIPHER_SYM
 %token  CLIENT_SYM
+%token	CLIENT_STATS_SYM
 %token  CLOSE_SYM
 %token  COALESCE
 %token  CODE_SYM
@@ -715,6 +716,7 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  IMPORT
 %token  INDEXES
 %token  INDEX_SYM
+%token	INDEX_STATS_SYM
 %token  INFILE
 %token  INNER_SYM
 %token  INNOBASE_SYM
@@ -943,6 +945,7 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  SIGNED_SYM
 %token  SIMPLE_SYM
 %token  SLAVE
+%token  SLOW_SYM
 %token  SMALLINT
 %token  SNAPSHOT_SYM
 %token  SOUNDS_SYM
@@ -983,6 +986,7 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  TABLES
 %token  TABLESPACE
 %token  TABLE_SYM
+%token	TABLE_STATS_SYM
 %token  TEMPORARY
 %token  TEMPTABLE_SYM
 %token  TERMINATED
@@ -1025,6 +1029,7 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  UPGRADE_SYM
 %token  USAGE
 %token  USER
+%token	USER_STATS_SYM
 %token  USE_FRM
 %token  USE_SYM
 %token  USING
@@ -8281,6 +8286,38 @@ show_param:
           {
 	    Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
           }
+        | CLIENT_STATS_SYM wild_and_where 
+          {
+           LEX *lex= Lex;
+	   Lex->sql_command = SQLCOM_SELECT;
+           lex->orig_sql_command= SQLCOM_SHOW_CLIENT_STATS;
+           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
+             MYSQL_YYABORT;
+          }
+        | USER_STATS_SYM wild_and_where 
+          {
+           LEX *lex= Lex;
+	   lex->sql_command = SQLCOM_SELECT;
+           lex->orig_sql_command= SQLCOM_SHOW_USER_STATS;
+           if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
+             MYSQL_YYABORT;
+          }
+        | TABLE_STATS_SYM wild_and_where
+          {
+           LEX *lex= Lex;
+           lex->sql_command= SQLCOM_SELECT;
+           lex->orig_sql_command= SQLCOM_SHOW_TABLE_STATS;
+           if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
+             MYSQL_YYABORT;
+          }
+        | INDEX_STATS_SYM wild_and_where
+          {
+           LEX *lex= Lex;
+           lex->sql_command= SQLCOM_SELECT;
+           lex->orig_sql_command= SQLCOM_SHOW_INDEX_STATS;
+           if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
+             MYSQL_YYABORT;
+          }
 	| CREATE PROCEDURE sp_name
 	  {
 	    LEX *lex= Lex;
@@ -8481,9 +8518,14 @@ flush_option:
 	| LOGS_SYM	{ Lex->type|= REFRESH_LOG; }
 	| STATUS_SYM	{ Lex->type|= REFRESH_STATUS; }
         | SLAVE         { Lex->type|= REFRESH_SLAVE; }
+	| SLOW_SYM QUERY_SYM LOGS_SYM { Lex->type |= REFRESH_SLOW_QUERY_LOG; }
         | MASTER_SYM    { Lex->type|= REFRESH_MASTER; }
 	| DES_KEY_FILE	{ Lex->type|= REFRESH_DES_KEY_FILE; }
- 	| RESOURCES     { Lex->type|= REFRESH_USER_RESOURCES; };
+ 	| RESOURCES     { Lex->type|= REFRESH_USER_RESOURCES; }
+ 	| CLIENT_STATS_SYM { Lex->type|= REFRESH_CLIENT_STATS; }
+ 	| USER_STATS_SYM { Lex->type|= REFRESH_USER_STATS; }
+ 	| TABLE_STATS_SYM { Lex->type|= REFRESH_TABLE_STATS; }
+ 	| INDEX_STATS_SYM { Lex->type|= REFRESH_INDEX_STATS; };
 
 opt_table_list:
 	/* empty */  {;}
@@ -9473,6 +9515,7 @@ keyword_sp:
 	| CHAIN_SYM		{}
 	| CHANGED		{}
 	| CIPHER_SYM		{}
+	| CLIENT_STATS_SYM      {}
 	| CLIENT_SYM		{}
         | CODE_SYM              {}
 	| COLLATION_SYM		{}
@@ -9525,6 +9568,7 @@ keyword_sp:
 	| HOSTS_SYM		{}
 	| HOUR_SYM		{}
 	| IDENTIFIED_SYM	{}
+	| INDEX_STATS_SYM       {}
 	| INVOKER_SYM		{}
 	| IMPORT		{}
 	| INDEXES		{}
@@ -9633,6 +9677,7 @@ keyword_sp:
 	| SIMPLE_SYM		{}
 	| SHARE_SYM		{}
 	| SHUTDOWN		{}
+	| SLOW_SYM		{}
 	| SNAPSHOT_SYM		{}
 	| SOUNDS_SYM		{}
 	| SOURCE_SYM            {}
@@ -9649,6 +9694,7 @@ keyword_sp:
         | SUSPEND_SYM           {}
         | SWAPS_SYM             {}
 	| SWITCHES_SYM          {}
+	| TABLE_STATS_SYM       {}
         | TABLES                {}
 	| TABLESPACE		{}
 	| TEMPORARY		{}
@@ -9669,6 +9715,7 @@ keyword_sp:
 	| UNKNOWN_SYM		{}
 	| UNTIL_SYM		{}
 	| USER			{}
+	| USER_STATS_SYM        {}
 	| USE_FRM		{}
 	| VARIABLES		{}
 	| VIEW_SYM		{}
diff --git a/sql/structs.h b/sql/structs.h
index 23db446..81ccbc9 100644
--- a/sql/structs.h
+++ b/sql/structs.h
@@ -280,6 +280,98 @@ typedef struct  user_conn {
   time_t intime;
 } USER_CONN;
 
+typedef struct st_user_stats {
+  char user[max(USERNAME_LENGTH, LIST_PROCESS_HOST_LEN) + 1];
+  // Account name the user is mapped to when this is a user from mapped_user.
+  // Otherwise, the same value as user.
+  char priv_user[max(USERNAME_LENGTH, LIST_PROCESS_HOST_LEN) + 1];
+  uint total_connections;
+  uint concurrent_connections;
+  time_t connected_time;  // in seconds
+  double busy_time;       // in seconds
+  double cpu_time;        // in seconds
+  ulonglong bytes_received;
+  ulonglong bytes_sent;
+  ulonglong binlog_bytes_written;
+  ha_rows rows_fetched, rows_updated, rows_read;
+  ulonglong select_commands, update_commands, other_commands;
+  ulonglong commit_trans, rollback_trans;
+  ulonglong denied_connections, lost_connections;
+  ulonglong access_denied_errors;
+  ulonglong empty_queries;
+} USER_STATS;
+
+/* Lookup function for hash tables with USER_STATS entries */
+extern byte *get_key_user_stats(USER_STATS *user_stats, uint *length,
+                                my_bool not_used __attribute__((unused)));
+
+/* Free all memory for a hash table with USER_STATS entries */
+extern void free_user_stats(USER_STATS* user_stats);
+
+/* Intialize an instance of USER_STATS */
+extern void
+init_user_stats(USER_STATS *user_stats,
+                const char *user,
+                const char *priv_user,
+                uint total_connections,
+                uint concurrent_connections,
+                time_t connected_time,
+                double busy_time,
+                double cpu_time,
+                ulonglong bytes_received,
+                ulonglong bytes_sent,
+                ulonglong binlog_bytes_written,
+                ha_rows rows_fetched,
+                ha_rows rows_updated,
+                ha_rows rows_read,
+                ulonglong select_commands,
+                ulonglong update_commands,
+                ulonglong other_commands,
+                ulonglong commit_trans,
+                ulonglong rollback_trans,
+                ulonglong denied_connections,
+                ulonglong lost_connections,
+                ulonglong access_denied_errors,
+                ulonglong empty_queries);
+
+/* Increment values of an instance of USER_STATS */
+extern void
+add_user_stats(USER_STATS *user_stats,
+               uint total_connections,
+               uint concurrent_connections,
+               time_t connected_time,
+               double busy_time,
+               double cpu_time,
+               ulonglong bytes_received,
+               ulonglong bytes_sent,
+               ulonglong binlog_bytes_written,
+               ha_rows rows_fetched,
+               ha_rows rows_updated,
+               ha_rows rows_read,
+               ulonglong select_commands,
+               ulonglong update_commands,
+               ulonglong other_commands,
+               ulonglong commit_trans,
+               ulonglong rollback_trans,
+               ulonglong denied_connections,
+               ulonglong lost_connections,
+               ulonglong access_denied_errors,
+               ulonglong empty_queries);
+
+typedef struct st_table_stats {
+  char table[NAME_LEN * 2 + 2];  // [db] + '.' + [table] + '\0'
+  ulonglong rows_read, rows_changed;
+  ulonglong rows_changed_x_indexes;
+  /* Stores enum db_type, but forward declarations cannot be done */
+  int engine_type;
+} TABLE_STATS;
+
+typedef struct st_index_stats {
+  char index[NAME_LEN * 3 + 3];  // [db] + '.' + [table] + '.' + [index] + '\0'
+  ulonglong rows_read;
+} INDEX_STATS;
+
+
 	/* Bits in form->update */
 #define REG_MAKE_DUPP		1	/* Make a copy of record when read */
 #define REG_NEW_RECORD		2	/* Write a new record if not found */
diff --git a/sql/table.h b/sql/table.h
index 12ce2aa..eabd7c5 100644
--- a/sql/table.h
+++ b/sql/table.h
@@ -370,10 +370,12 @@ typedef struct st_foreign_key_info
 enum enum_schema_tables
 {
   SCH_CHARSETS= 0,
+  SCH_CLIENT_STATS,
   SCH_COLLATIONS,
   SCH_COLLATION_CHARACTER_SET_APPLICABILITY,
   SCH_COLUMNS,
   SCH_COLUMN_PRIVILEGES,
+  SCH_INDEX_STATS,
   SCH_KEY_COLUMN_USAGE,
   SCH_OPEN_TABLES,
   SCH_PROFILES,
@@ -386,8 +388,10 @@ enum enum_schema_tables
   SCH_TABLE_CONSTRAINTS,
   SCH_TABLE_NAMES,
   SCH_TABLE_PRIVILEGES,
+  SCH_TABLE_STATS,
   SCH_TRIGGERS,
   SCH_USER_PRIVILEGES,
+  SCH_USER_STATS,
   SCH_VARIABLES,
   SCH_VIEWS
 };
diff --git a/strings/Makefile.in b/strings/Makefile.in
index 4f29197..f33c3f5 100644
--- a/strings/Makefile.in
+++ b/strings/Makefile.in
@@ -345,6 +345,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/support-files/MacOSX/Makefile.in b/support-files/MacOSX/Makefile.in
index b467795..2b59756 100644
--- a/support-files/MacOSX/Makefile.in
+++ b/support-files/MacOSX/Makefile.in
@@ -148,6 +148,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/support-files/Makefile.in b/support-files/Makefile.in
index effc9f2..e83d04d 100644
--- a/support-files/Makefile.in
+++ b/support-files/Makefile.in
@@ -172,6 +172,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/support-files/RHEL4-SElinux/Makefile.in b/support-files/RHEL4-SElinux/Makefile.in
index 4be9978..2fd8711 100644
--- a/support-files/RHEL4-SElinux/Makefile.in
+++ b/support-files/RHEL4-SElinux/Makefile.in
@@ -146,6 +146,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/tests/Makefile.in b/tests/Makefile.in
index 016b4c5..6d7a1c7 100644
--- a/tests/Makefile.in
+++ b/tests/Makefile.in
@@ -193,6 +193,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @CLIENT_LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/tools/Makefile.in b/tools/Makefile.in
index 292b57b..de71c5a 100644
--- a/tools/Makefile.in
+++ b/tools/Makefile.in
@@ -167,6 +167,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/vio/Makefile.in b/vio/Makefile.in
index 7509aa9..7ae755b 100644
--- a/vio/Makefile.in
+++ b/vio/Makefile.in
@@ -176,6 +176,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/win/Makefile.in b/win/Makefile.in
index 3362106..9683015 100644
--- a/win/Makefile.in
+++ b/win/Makefile.in
@@ -144,6 +144,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = @LIBS@
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
diff --git a/zlib/Makefile.in b/zlib/Makefile.in
index 27cb5a7..3c114e6 100644
--- a/zlib/Makefile.in
+++ b/zlib/Makefile.in
@@ -187,6 +187,7 @@ LD_VERSION_SCRIPT = @LD_VERSION_SCRIPT@
 LIBDL = @LIBDL@
 LIBEDIT_LOBJECTS = @LIBEDIT_LOBJECTS@
 LIBOBJS = @LIBOBJS@
+LIBRT = @LIBRT@
 LIBS = $(NON_THREADED_LIBS)
 LIBTOOL = @LIBTOOL@
 LIB_EXTRA_CCFLAGS = @LIB_EXTRA_CCFLAGS@
