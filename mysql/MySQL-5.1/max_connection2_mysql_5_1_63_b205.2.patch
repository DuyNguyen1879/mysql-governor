diff --git a/include/Makefile.am b/include/Makefile.am
index bd5d2a4..6dc459a 100644
--- a/include/Makefile.am
+++ b/include/Makefile.am
@@ -26,7 +26,7 @@ pkginclude_HEADERS =	$(HEADERS_ABI) my_dbug.h m_string.h my_sys.h \
 			decimal.h errmsg.h my_global.h my_net.h \
 			my_getopt.h sslopt-longopts.h my_dir.h \
 			sslopt-vars.h sslopt-case.h sql_common.h keycache.h \
-			m_ctype.h my_attribute.h my_compiler.h \
+			m_ctype.h my_attribute.h my_compiler.h governor.h \
 			$(HEADERS_GEN_CONFIGURE) \
 			$(HEADERS_GEN_MAKE)
 
diff --git a/include/Makefile.in b/include/Makefile.in
index 0c0adb5..1e1635d 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -401,7 +401,7 @@ pkginclude_HEADERS = $(HEADERS_ABI) my_dbug.h m_string.h my_sys.h \
 			decimal.h errmsg.h my_global.h my_net.h \
 			my_getopt.h sslopt-longopts.h my_dir.h \
 			sslopt-vars.h sslopt-case.h sql_common.h keycache.h \
-			m_ctype.h my_attribute.h my_compiler.h \
+			m_ctype.h my_attribute.h my_compiler.h governor.h \
 			$(HEADERS_GEN_CONFIGURE) \
 			$(HEADERS_GEN_MAKE)
 
diff --git a/include/governor.h b/include/governor.h
new file mode 100644
index 0000000..d9a8ce8
--- /dev/null
+++ b/include/governor.h
@@ -0,0 +1,14 @@
+/*
+ * governor_pthread_wrapper.h
+ *
+ *  Created on: Sep 26, 2012
+ *      Author: alexey
+ */
+
+#ifndef GOVERNOR_PTHREAD_WRAPPER_H_
+#define GOVERNOR_PTHREAD_WRAPPER_H_
+
+#include <stdint.h>
+
+
+#endif /* GOVERNOR_PTHREAD_WRAPPER_H_ */
diff --git a/include/my_pthread.h b/include/my_pthread.h
index 87cdaaa..ac1a98e 100644
--- a/include/my_pthread.h
+++ b/include/my_pthread.h
@@ -190,6 +190,7 @@ void pthread_exit(void *a);	 /* was #define pthread_exit(A) ExitThread(A)*/
 #include <signal.h>
 #undef sigwait
 #endif
+#include <governor.h>
 #include <pthread.h>
 #ifndef _REENTRANT
 #define _REENTRANT
@@ -486,6 +487,9 @@ typedef struct st_safe_mutex_info_t
 } safe_mutex_info_t;
 #endif /* SAFE_MUTEX_DETECT_DESTROY */
 
+void put_in_lve(char *user);
+void lve_thr_exit();
+
 int safe_mutex_init(safe_mutex_t *mp, const pthread_mutexattr_t *attr,
                     const char *file, uint line);
 int safe_mutex_lock(safe_mutex_t *mp, my_bool try_lock, const char *file, uint line);
@@ -501,6 +505,8 @@ void safe_mutex_end(FILE *file);
 
 	/* Wrappers if safe mutex is actually used */
 #ifdef SAFE_MUTEX
+
+
 #undef pthread_mutex_init
 #undef pthread_mutex_lock
 #undef pthread_mutex_unlock
@@ -528,6 +534,7 @@ void safe_mutex_end(FILE *file);
 #else
 #define safe_mutex_assert_owner(mp)
 #define safe_mutex_assert_not_owner(mp)
+
 #endif /* SAFE_MUTEX */
 
 #if defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX)
@@ -554,8 +561,14 @@ int my_pthread_fastmutex_lock(my_pthread_fastmutex_t *mp);
 #undef pthread_cond_timedwait
 #undef pthread_mutex_trylock
 #define pthread_mutex_init(A,B) my_pthread_fastmutex_init((A),(B))
-#define pthread_mutex_lock(A) my_pthread_fastmutex_lock(A)
-#define pthread_mutex_unlock(A) pthread_mutex_unlock(&(A)->mutex)
+
+void put_in_lve(char *user);
+void lve_thr_exit();
+__attribute__ ((noinline)) int my_pthread_lvemutex_unlock(pthread_mutex_t *mutex);
+__attribute__ ((noinline)) int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp);
+#define pthread_mutex_lock(A) my_pthread_lvemutex_lock(A)
+#define pthread_mutex_unlock(A) my_pthread_lvemutex_unlock(&(A)->mutex)
+
 #define pthread_mutex_destroy(A) pthread_mutex_destroy(&(A)->mutex)
 #define pthread_cond_wait(A,B) pthread_cond_wait((A),&(B)->mutex)
 #define pthread_cond_timedwait(A,B,C) pthread_cond_timedwait((A),&(B)->mutex,(C))
diff --git a/include/mysqld_error.h b/include/mysqld_error.h
index c35c254..a6637a5 100644
--- a/include/mysqld_error.h
+++ b/include/mysqld_error.h
@@ -643,3 +643,4 @@
 #define ER_DEBUG_SYNC_TIMEOUT 1639
 #define ER_DEBUG_SYNC_HIT_LIMIT 1640
 #define ER_ERROR_LAST 1640
+#define ER_NO_SUCH_THREAD_USER 1641
diff --git a/mysys/thr_mutex.c b/mysys/thr_mutex.c
index 0a7b9a5..d8523e2 100644
--- a/mysys/thr_mutex.c
+++ b/mysys/thr_mutex.c
@@ -27,6 +27,41 @@
 #include "my_static.h"
 #include <m_string.h>
 
+#include <governor.h>
+
+void * (*governor_load_lve_library)() = NULL;
+int (*governor_init_lve)() = NULL;
+void (*governor_destroy_lve)() = NULL;
+int (*governor_enter_lve)(uint32_t *, char *) = NULL;
+void (*governor_lve_exit)(uint32_t *) = NULL;
+int (*governor_enter_lve_light)(uint32_t *) = NULL;
+ 
+__thread int my_is_in_lve = 0;
+__thread uint32_t lve_cookie = 0;
+
+__attribute__((noinline)) void put_in_lve(char *user){
+	int lco_my_is_in_lve = my_is_in_lve;
+	uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+	if (!governor_enter_lve(&lve_cookie, user)){
+	   my_is_in_lve = 1;
+	}
+	lco_my_is_in_lve = my_is_in_lve;
+	lco_lve_cookie = lve_cookie;
+}
+
+__attribute__((noinline)) void lve_thr_exit(){
+	int lco_my_is_in_lve = my_is_in_lve;
+	uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+    if (my_is_in_lve>0) {
+         governor_lve_exit(&lve_cookie);
+         my_is_in_lve = 0;
+	}
+    lco_my_is_in_lve = my_is_in_lve;
+    lco_lve_cookie = lve_cookie;
+}
+
 #ifndef DO_NOT_REMOVE_THREAD_WRAPPERS
 /* Remove wrappers */
 #undef pthread_mutex_t
@@ -489,6 +524,74 @@ int my_pthread_fastmutex_lock(my_pthread_fastmutex_t *mp)
   return pthread_mutex_lock(&mp->mutex);
 }
 
+void * (*governor_load_lve_library)() = NULL;
+int (*governor_init_lve)() = NULL;
+void (*governor_destroy_lve)() = NULL;
+int (*governor_enter_lve)(uint32_t *, char *) = NULL;
+void (*governor_lve_exit)(uint32_t *) = NULL;
+int (*governor_enter_lve_light)(uint32_t *) = NULL;
+ 
+__thread int my_is_in_lve = 0;
+__thread uint32_t lve_cookie = 0;
+
+
+__attribute__((noinline)) void put_in_lve(char *user){
+	volatile int lco_my_is_in_lve = my_is_in_lve;
+	volatile uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+	if (!governor_enter_lve(&lve_cookie, user)){
+	   my_is_in_lve = 1;
+	}
+	lco_my_is_in_lve = my_is_in_lve;
+	lco_lve_cookie = lve_cookie;
+}
+
+__attribute__((noinline)) void lve_thr_exit(){
+	volatile int lco_my_is_in_lve = my_is_in_lve;
+	volatile uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+    if (my_is_in_lve>0) {
+         governor_lve_exit(&lve_cookie);
+         my_is_in_lve = 0;
+	}
+	lco_my_is_in_lve = my_is_in_lve;
+	lco_lve_cookie = lve_cookie;
+}
+
+__attribute__((noinline)) int my_pthread_lvemutex_lock(my_pthread_fastmutex_t *mp) {
+	volatile int lco_my_is_in_lve = my_is_in_lve;
+	volatile uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+	if (my_is_in_lve == 1) {
+	    governor_lve_exit(&lve_cookie);
+	    my_is_in_lve = 2;
+	} else if (my_is_in_lve > 1) {
+	    my_is_in_lve++;
+	}
+	lco_my_is_in_lve = my_is_in_lve;
+	lco_lve_cookie = lve_cookie;
+    return my_pthread_fastmutex_lock(mp);
+}
+
+__attribute__((noinline)) int my_pthread_lvemutex_unlock(pthread_mutex_t  *mutex) {
+	volatile int lco_my_is_in_lve = my_is_in_lve;
+	volatile uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+    int ret = pthread_mutex_unlock(mutex);
+    if((my_is_in_lve == 2) && governor_enter_lve_light){
+      if (!governor_enter_lve_light(&lve_cookie)){
+         my_is_in_lve = 1;
+      }
+    } else if (my_is_in_lve > 2) {
+      my_is_in_lve--;
+    }
+	lco_my_is_in_lve = my_is_in_lve;
+	lco_lve_cookie = lve_cookie;
+    return ret;
+}
+ 
+
+
 
 void fastmutex_global_init(void)
 {
@@ -497,4 +600,44 @@ void fastmutex_global_init(void)
 #endif
 }
   
-#endif /* defined(THREAD) && defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX) */ 
+#endif /* defined(THREAD) && defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX) */
+
+#if !defined(MY_PTHREAD_FASTMUTEX) && !defined(SAFE_MUTEX) 
+
+#include <governor.h>
+
+void * (*governor_load_lve_library)() = NULL;
+int (*governor_init_lve)() = NULL;
+void (*governor_destroy_lve)() = NULL;
+int (*governor_enter_lve)(uint32_t *, char *) = NULL;
+void (*governor_lve_exit)(uint32_t *) = NULL;
+int (*governor_enter_lve_light)(uint32_t *) = NULL;
+ 
+__thread int my_is_in_lve = 0;
+__thread uint32_t lve_cookie = 0;
+
+__attribute__((noinline)) void put_in_lve(char *user){
+	int lco_my_is_in_lve = my_is_in_lve;
+	uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+	if (!governor_enter_lve(&lve_cookie, user)){
+	   my_is_in_lve = 1;
+	}
+	lco_my_is_in_lve = my_is_in_lve;
+	lco_lve_cookie = lve_cookie;
+}
+
+__attribute__((noinline)) void lve_thr_exit(){
+	int lco_my_is_in_lve = my_is_in_lve;
+	uint32_t lco_lve_cookie = lve_cookie;
+	asm ("");
+    if (my_is_in_lve>0) {
+         governor_lve_exit(&lve_cookie);
+         my_is_in_lve = 0;
+	}
+    lco_my_is_in_lve = my_is_in_lve;
+    lco_lve_cookie = lve_cookie;
+}
+
+
+#endif
diff --git a/sql/lex.h b/sql/lex.h
index e90ee68..21566cf 100644
--- a/sql/lex.h
+++ b/sql/lex.h
@@ -184,6 +184,10 @@ static SYMBOL symbols[] = {
   { "ELSE",             SYM(ELSE)},
   { "ELSEIF",           SYM(ELSEIF_SYM)},
   { "ENABLE",		SYM(ENABLE_SYM)},
+  { "ENABLE_GOVERNOR",		SYM(ENABLE_GOVERNOR_SYM)},
+  { "ENABLE_GOVERNOR_RECON",		SYM(ENABLE_GOVERNOR_RECONN_SYM)},
+  { "ENABLE_GOVERNOR_LVE",		SYM(ENABLE_GOVERNOR_LVE_SYM)},
+  { "ENABLE_GOVERNOR_RECON_LVE",		SYM(ENABLE_GOVERNOR_RECONN_LVE_SYM)},
   { "ENCLOSED",		SYM(ENCLOSED)},
   { "END",		SYM(END)},
   { "ENDS",		SYM(ENDS_SYM)},
diff --git a/sql/mysql_priv.h b/sql/mysql_priv.h
index 927f35b..85a2847 100644
--- a/sql/mysql_priv.h
+++ b/sql/mysql_priv.h
@@ -105,8 +105,10 @@ char *sql_strmake_with_convert(const char *str, size_t arg_length,
 			       CHARSET_INFO *from_cs,
 			       size_t max_res_length,
 			       CHARSET_INFO *to_cs, size_t *result_length);
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query);
 uint kill_one_thread(THD *thd, ulong id, bool only_kill_query);
 void sql_kill(THD *thd, ulong id, bool only_kill_query);
+void sql_kill_user(THD *thd, char *user, bool only_kill_query);
 bool net_request_file(NET* net, const char* fname);
 char* query_table_status(THD *thd,const char *db,const char *table_name);
 
@@ -1419,6 +1421,10 @@ ST_SCHEMA_TABLE *find_schema_table(THD *thd, const char* table_name);
 ST_SCHEMA_TABLE *get_schema_table(enum enum_schema_tables schema_table_idx);
 int prepare_schema_table(THD *thd, LEX *lex, Table_ident *table_ident,
                          enum enum_schema_tables schema_table_idx);
+void set_governor_variable();
+void set_governor_variable_reconn();
+void set_governor_variable_lve();
+void set_governor_variable_reconn_lve();
 int make_schema_select(THD *thd,  SELECT_LEX *sel,
                        enum enum_schema_tables schema_table_idx);
 int mysql_schema_table(THD *thd, LEX *lex, TABLE_LIST *table_list);
@@ -1992,6 +1998,13 @@ extern ulong opt_tc_log_size, tc_log_max_pages_used, tc_log_page_size;
 extern ulong tc_log_page_waits;
 extern my_bool relay_log_purge, opt_innodb_safe_binlog, opt_innodb;
 
+extern volatile int governor_get_command;
+extern int (*connect_to_server)();
+extern int (*send_info_begin)(char *);
+extern int (*send_info_end)(char *);
+extern int (*close_sock)();
+extern void * governor_library_handle;
+
 extern uint test_flags,select_errors,ha_open_options;
 extern uint protocol_version, mysqld_port, dropping_tables;
 extern uint delay_key_write_options;
@@ -2370,6 +2383,7 @@ bool flush_error_log(void);
 /* sql_list.cc */
 void free_list(I_List <i_string_pair> *list);
 void free_list(I_List <i_string> *list);
+void free_list(I_List <i_thd> *list);
 
 /* sql_yacc.cc */
 #ifndef DBUG_OFF
@@ -2585,6 +2599,8 @@ bool load_collation(MEM_ROOT *mem_root,
                     CHARSET_INFO **cl);
 
 
+extern "C" pid_t gettid(void);
+
 #endif /* MYSQL_SERVER */
 extern "C" int test_if_data_home_dir(const char *dir);
 
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 0fde66d..890923d 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -28,6 +28,7 @@
 #include "mysys_err.h"
 #include "events.h"
 #include "debug_sync.h"
+#include <dlfcn.h>
 
 #include "../storage/myisam/ha_myisam.h"
 
@@ -56,6 +57,8 @@
 #include "sp_rcontext.h"
 #include "sp_cache.h"
 
+#include <linux/unistd.h>
+
 #define mysqld_charset &my_charset_latin1
 
 #ifdef HAVE_purify
@@ -262,6 +265,10 @@ inline void setup_fpu()
 #include <my_pthread.h>			// For thr_setconcurency()
 #endif
 
+#ifndef GETTID
+pid_t gettid(void) {return syscall(__NR_gettid);}
+#endif
+
 #ifdef SOLARIS
 extern "C" int gethostname(char *name, int namelen);
 #endif
@@ -449,6 +456,28 @@ static pthread_cond_t COND_thread_cache, COND_flush_thread_cache;
 
 /* Global variables */
 
+#ifdef  __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+extern void * (*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+extern void (*governor_lve_exit)(uint32_t *);
+
+#ifdef  __cplusplus
+}
+#endif
+
+volatile int governor_get_command = 0;
+int (*connect_to_server)() = NULL;
+int (*send_info_begin)(char *) = NULL;
+int (*send_info_end)(char *) = NULL;
+int (*close_sock)() = NULL;
+void * governor_library_handle = NULL;
+
 bool opt_update_log, opt_bin_log, opt_ignore_builtin_innodb= 0;
 my_bool opt_log, opt_slow_log;
 ulong log_output_options;
@@ -1381,6 +1410,17 @@ void clean_up(bool print_message)
   free_global_table_stats();
   free_global_index_stats();
 
+  if(governor_destroy_lve){
+	  governor_destroy_lve();
+  }
+
+  if(close_sock){
+	  (*close_sock)();
+  }
+  if (governor_library_handle) {
+	  dlclose(governor_library_handle);
+  }
+
 #ifdef HAVE_REPLICATION
   end_slave_list();
 #endif
@@ -2999,6 +3039,10 @@ SHOW_VAR com_status_vars[]= {
   {"drop_user",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_USER]), SHOW_LONG_STATUS},
   {"drop_view",            (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_DROP_VIEW]), SHOW_LONG_STATUS},
   {"empty_query",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EMPTY_QUERY]), SHOW_LONG_STATUS},
+  {"enable_governor",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR]), SHOW_LONG_STATUS},
+  {"enable_governor_lve",      (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_GOVERNOR_LVE]), SHOW_LONG_STATUS},
+  {"enable_governor_reconn_lve",(char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_ENABLE_RECONN_GOVERNOR_LVE]), SHOW_LONG_STATUS},
   {"execute_sql",          (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_EXECUTE]), SHOW_LONG_STATUS},
   {"flush",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_FLUSH]), SHOW_LONG_STATUS},
   {"grant",                (char*) offsetof(STATUS_VAR, com_stat[(uint) SQLCOM_GRANT]), SHOW_LONG_STATUS},
@@ -7512,6 +7556,7 @@ SHOW_VAR status_vars[]= {
   {"Delayed_errors",           (char*) &delayed_insert_errors,  SHOW_LONG},
   {"Delayed_insert_threads",   (char*) &delayed_insert_threads, SHOW_LONG_NOFLUSH},
   {"Delayed_writes",           (char*) &delayed_insert_writes,  SHOW_LONG},
+  {"Enable_governor",           (char*) &governor_get_command,  SHOW_INT},
   {"Flush_commands",           (char*) &refresh_version,        SHOW_LONG_NOFLUSH},
   {"Handler_commit",           (char*) offsetof(STATUS_VAR, ha_commit_count), SHOW_LONG_STATUS},
   {"Handler_delete",           (char*) offsetof(STATUS_VAR, ha_delete_count), SHOW_LONG_STATUS},
@@ -7699,6 +7744,7 @@ To see what values a running MySQL server is using, type\n\
     as these are initialized by my_getopt.
 */
 
+
 static int mysql_init_variables(void)
 {
   int error;
@@ -7833,6 +7879,142 @@ static int mysql_init_variables(void)
   global_system_variables.old_passwords= 0;
   global_system_variables.old_alter_table= 0;
   global_system_variables.binlog_format= BINLOG_FORMAT_UNSPEC;
+
+  governor_get_command = 0;
+  connect_to_server = NULL;
+  send_info_begin = NULL;
+  send_info_end = NULL;
+  close_sock = NULL;
+  governor_library_handle = NULL;
+
+  char *error_dl = NULL;
+  governor_library_handle = dlopen("libgovernor.so", RTLD_LAZY);
+  if (governor_library_handle) {
+	  sql_print_information("libgovernor.so found");
+	  while(1){
+		  connect_to_server = (int (*)())dlsym(governor_library_handle, "connect_to_server");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  send_info_begin = (int (*)(char *))dlsym(governor_library_handle, "send_info_begin");
+		  if ((error_dl = dlerror()) != NULL){
+		  	  connect_to_server = NULL;
+		  	  send_info_begin = NULL;
+		  	  send_info_end = NULL;
+		  	  close_sock = NULL;
+		  	  break;
+		  }
+		  send_info_end = (int (*)(char *))dlsym(governor_library_handle, "send_info_end");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  close_sock = (int (*)())dlsym(governor_library_handle, "close_sock");
+		  if ((error_dl = dlerror()) != NULL){
+			  connect_to_server = NULL;
+			  send_info_begin = NULL;
+			  send_info_end = NULL;
+			  close_sock = NULL;
+			  break;
+		  }
+		  sql_print_information("All governors functions found too");
+		  break;
+	  }
+  } else {
+	  sql_print_information("libgovernor.so not found");
+  }
+  if(connect_to_server){
+	  if(!(*connect_to_server)()){
+		  sql_print_information("Governor connected");
+	  } else {
+		  sql_print_error("Governor not connected");
+	  }
+  }
+  if (governor_library_handle){
+
+	  while(1){
+		  governor_load_lve_library = (void * (*)())dlsym(governor_library_handle, "governor_load_lve_library");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+	  	  governor_init_lve = (int (*)())dlsym(governor_library_handle, "governor_init_lve");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+	  	  governor_destroy_lve = (void (*)())dlsym(governor_library_handle, "governor_destroy_lve");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  	    break;
+	  	  }
+	  	  governor_enter_lve = (int (*)(uint32_t *, char *))dlsym(governor_library_handle, "governor_enter_lve");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+
+	  	  governor_lve_exit = (void (*)(uint32_t *))dlsym(governor_library_handle, "governor_lve_exit");
+	  	  if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	  }
+
+	  	governor_enter_lve_light = (int (*)(uint32_t *))dlsym(governor_library_handle, "governor_enter_lve_light");
+	  	if ((error_dl = dlerror()) != NULL){
+	  		governor_load_lve_library = NULL;
+	  		governor_init_lve = NULL;
+	  		governor_destroy_lve = NULL;
+	  		governor_enter_lve = NULL;
+	  		governor_lve_exit = NULL;
+	  		governor_enter_lve_light = NULL;
+	  		break;
+	  	}
+
+	  	  sql_print_information("All governors lve functions found too");
+	  	  break;
+	   }
+
+  }
+
+  if(governor_load_lve_library){
+	  if(!governor_load_lve_library()){
+		  sql_print_information("Can't get LVE functions");
+	  }
+  }
+
   /*
     Default behavior for 4.1 and 5.0 is to treat NULL values as unequal
     when collecting index statistics for MyISAM tables.
@@ -8759,6 +8941,7 @@ static void set_server_version(void)
 #endif
   if (opt_log || opt_update_log || opt_slow_log || opt_bin_log)
     strmov(end, "-log");                        // This may slow down system
+  end= strmov(end, "-cll");
 }
 
 
diff --git a/sql/share/errmsg.txt b/sql/share/errmsg.txt
index 7cb9d9e..721ebe1 100644
--- a/sql/share/errmsg.txt
+++ b/sql/share/errmsg.txt
@@ -6213,3 +6213,5 @@ ER_DEBUG_SYNC_TIMEOUT
 ER_DEBUG_SYNC_HIT_LIMIT
   eng "debug sync point hit limit reached"
   ger "Debug Sync Point Hit Limit erreicht"
+ER_NO_SUCH_THREAD_USER
+  eng "Unknown user name: %s"
diff --git a/sql/sql_acl.cc b/sql/sql_acl.cc
index 6d5d34d..222aff6 100644
--- a/sql/sql_acl.cc
+++ b/sql/sql_acl.cc
@@ -529,7 +529,7 @@ static my_bool acl_load(THD *thd, TABLE_LIST *tables)
         {
           /* Starting from 5.0.3 we have max_user_connections field */
           ptr= get_field(thd->mem_root, table->field[next_field++]);
-          user.user_resource.user_conn= ptr ? atoi(ptr) : 0;
+          user.user_resource.user_conn= ptr ? atoll(ptr) : 0;
         }
         else
           user.user_resource.user_conn= 0;
diff --git a/sql/sql_class.h b/sql/sql_class.h
index 98b20c6..de6a8a9 100644
--- a/sql/sql_class.h
+++ b/sql/sql_class.h
@@ -3190,3 +3190,13 @@ void add_diff_to_status(STATUS_VAR *to_var, STATUS_VAR *from_var,
 void mark_transaction_to_rollback(THD *thd, bool all);
 
 #endif /* MYSQL_SERVER */
+
+/* DB_GOVERNOR ADDITIONS */                                                                                                                               
+class i_thd: public ilink                                                                                                                                 
+{                                                                                                                                                         
+ public:                                                                                                                                                   
+   THD* ptr;                                                                                                                                               
+   i_thd():ptr(0) { }                                                                                                                                      
+   i_thd(THD* s) : ptr(s) {}                                                                                                                               
+};                                                                                                                                                        
+   
diff --git a/sql/sql_connect.cc b/sql/sql_connect.cc
index fc64d21..75ee911 100644
--- a/sql/sql_connect.cc
+++ b/sql/sql_connect.cc
@@ -104,6 +104,9 @@ end:
     0	ok
     1	error
 */
+int is_root_access(char *user_name){                                                                                                                       
+     return !strcmp(user_name,"root")||!strcmp(user_name,"mysql");
+} 
 
 static
 int check_for_max_user_connections(THD *thd, USER_CONN *uc)
@@ -112,6 +115,14 @@ int check_for_max_user_connections(THD *thd, USER_CONN *uc)
   DBUG_ENTER("check_for_max_user_connections");
 
   (void) pthread_mutex_lock(&LOCK_user_conn);
+
+  if (((uc->user_resources.user_conn==(uint)~0) || (max_user_connections == (uint)~0)) && !is_root_access(uc->user)) 
+  {
+    my_error(ER_TOO_MANY_USER_CONNECTIONS, MYF(0), uc->user);
+    error=1;
+    goto end;
+  }
+
   if (max_user_connections && !uc->user_resources.user_conn &&
       max_user_connections < (uint) uc->connections)
   {
@@ -426,9 +437,7 @@ check_user(THD *thd, enum enum_server_command command,
       thd->main_security_ctx.db_access=0;
 
       /* Don't allow user to connect if he has done too many queries */
-      if ((ur.questions || ur.updates || ur.conn_per_hour || ur.user_conn ||
-	   max_user_connections) &&
-	  get_or_create_user_conn(thd,
+      if (get_or_create_user_conn(thd,
             (opt_old_style_user_limits ? thd->main_security_ctx.user :
              thd->main_security_ctx.priv_user),
             (opt_old_style_user_limits ? thd->main_security_ctx.host_or_ip :
diff --git a/sql/sql_lex.h b/sql/sql_lex.h
index a120a4f..0f8b62b 100644
--- a/sql/sql_lex.h
+++ b/sql/sql_lex.h
@@ -121,7 +121,8 @@ enum enum_sql_command {
   SQLCOM_ALTER_DB_UPGRADE,
   SQLCOM_SHOW_PROFILE, SQLCOM_SHOW_PROFILES,
   SQLCOM_SHOW_USER_STATS, SQLCOM_SHOW_TABLE_STATS, SQLCOM_SHOW_INDEX_STATS, 
-  SQLCOM_SHOW_CLIENT_STATS,
+  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_ENABLE_GOVERNOR, SQLCOM_ENABLE_RECONN_GOVERNOR,
+  SQLCOM_ENABLE_GOVERNOR_LVE, SQLCOM_ENABLE_RECONN_GOVERNOR_LVE,
   /*
     When a command is added here, be sure it's also added in mysqld.cc
     in "struct show_var_st status_vars[]= {" ...
diff --git a/sql/sql_list.cc b/sql/sql_list.cc
index 49b6491..328a5d7 100644
--- a/sql/sql_list.cc
+++ b/sql/sql_list.cc
@@ -70,3 +70,10 @@ base_list::base_list(const base_list &rhs, MEM_ROOT *mem_root)
   first= &end_of_list;
   last= &first;
 }
+
+void free_list(I_List <i_thd> *list)
+{
+  i_thd *tmp;
+  while ((tmp= list->get()))
+    delete tmp;
+}
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index 2db9ee8..fbb1d94 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -14,7 +14,7 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
 */
-
+#define HAVE_CLOCK_GETTIME 1
 #define MYSQL_LEX 1
 #include "mysql_priv.h"
 #include "sql_repl.h"
@@ -35,6 +35,21 @@
 
 #include <linux/unistd.h>
 
+#ifdef  __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+extern void * (*governor_load_lve_library)();
+extern int (*governor_init_lve)();
+extern void (*governor_destroy_lve)();
+extern int (*governor_enter_lve)(uint32_t *, char *);
+extern int (*governor_enter_lve_light)(uint32_t *);
+extern void (*governor_lve_exit)(uint32_t *);
+
+#ifdef  __cplusplus
+}
+#endif
+
 /**
   @defgroup Runtime_Environment Runtime Environment
   @{
@@ -2195,6 +2210,46 @@ void log_slow_statement(THD *thd)
   DBUG_VOID_RETURN;
 }
 
+void set_governor_variable(){
+	governor_get_command = 1;
+}
+
+void set_governor_variable_reconn(){
+	governor_get_command = 1;
+	if(close_sock){
+	     (*close_sock)();
+	}
+	if(connect_to_server){
+	     if(!(*connect_to_server)()){
+	             sql_print_information("Governor reconnected");
+	     } else {
+	             sql_print_error("Governor not reconnected. Failed connection");
+	     }
+	}
+}
+
+void set_governor_variable_lve(){
+	if(!governor_get_command){
+		if(governor_init_lve){
+			if(governor_init_lve()){
+				sql_print_error("Governor LVE initialization error");
+			}
+		}
+	}
+	governor_get_command = 2;
+}
+
+void set_governor_variable_reconn_lve(){
+	set_governor_variable_reconn();
+	governor_get_command = 2;
+	if(governor_init_lve){
+		if(governor_init_lve()){
+			sql_print_error("Governor LVE initialization error");
+		}
+	}
+}
+
+
 
 /**
   Create a TABLE_LIST object for an INFORMATION_SCHEMA table.
@@ -4609,7 +4664,14 @@ end_with_restore_list:
 		 MYF(0));
       goto error;
     }
-    sql_kill(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    
+    if(it->type()==Item::STRING_ITEM){                         
+       sql_kill_user(thd, it->val_str(0)->c_ptr(), lex->type & ONLY_KILL_QUERY);                                                                                             
+    } else {                                                         
+       sql_kill(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);                                                                                                                                                                 
+    }                                                                                                                                                     
+        
+    
     break;
   }
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
@@ -6495,6 +6557,11 @@ void mysql_init_multi_delete(LEX *lex)
   lex->query_tables_last= &lex->query_tables;
 }
 
+my_bool chek_governors_avaliable_command(THD *thd){
+	return (thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR
+			&&thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR_LVE&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR_LVE)&&
+			(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]);
+}
 
 /*
   When you modify mysql_parse(), you may need to mofify
@@ -6514,6 +6581,7 @@ void mysql_init_multi_delete(LEX *lex)
 void mysql_parse(THD *thd, char *rawbuf, uint length,
                  const char ** found_semicolon)
 {
+
   DBUG_ENTER("mysql_parse");
 
   DBUG_EXECUTE_IF("parser_debug", turn_parser_debug_on(););
@@ -6549,6 +6617,17 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
 
   struct timespec tp = {0,0};     /* For CPU Time and Real Time */
 
+  if(send_info_begin&&governor_get_command&&chek_governors_avaliable_command(thd)){
+	(*send_info_begin)(thd->security_ctx->user);
+  }
+
+
+
+  /*if(governor_enter_lve && (governor_get_command==2) && chek_governors_avaliable_command(thd)){
+	  if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0])
+		  governor_enter_lve(&cookie, thd->security_ctx->user);
+  }*/
+
   /* Get CPU start time. (Note: since Linux threads are processes--and since the
      thread-specific CPUTIME functions seem to be broken, call with the process-related
      CPU Time constants.)
@@ -6621,7 +6700,11 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
             thd->server_status|= SERVER_MORE_RESULTS_EXISTS;
           }
           lex->set_trg_event_type_for_tables();
+          if(governor_enter_lve && (governor_get_command==2) && chek_governors_avaliable_command(thd)){
+              put_in_lve(thd->security_ctx->user);
+          }
           mysql_execute_command(thd);
+          lve_thr_exit();
 	}
       }
     }
@@ -6685,6 +6768,14 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
       thd->cpu_time = 0;
   }
 
+  /*if(governor_lve_exit && (governor_get_command==2) && cookie &&chek_governors_avaliable_command(thd)){
+	  governor_lve_exit(&cookie);
+  }*/
+
+  if(send_info_end&&governor_get_command&&chek_governors_avaliable_command(thd)){
+  	  (*send_info_end)(thd->security_ctx->user);
+  }
+
 
   /******************************************************/
 
@@ -7738,6 +7829,53 @@ bool reload_acl_and_cache(THD *thd, ulong options, TABLE_LIST *tables,
  return result || (thd ? thd->killed : 0);
 }
 
+uint kill_user_thread(THD *thd, char *user, bool only_kill_query) 
+{  
+ 
+  DBUG_ENTER("kill_user_thread");
+  THD *tmp;
+  i_thd *thd_tmp;
+  I_List<i_thd> threads_tmp;
+  threads_tmp.empty();
+  uint error=0;//ER_NO_SUCH_THREAD_USER;
+  VOID(pthread_mutex_lock(&LOCK_thread_count)); // For unlink from list
+  I_List_iterator<THD> it(threads);
+  while ((tmp=it++))
+  {
+    if((tmp)&&(user)&&(tmp->user_connect)&&(tmp->user_connect->user)){
+      if (!strncmp(tmp->user_connect->user,user,16))
+      {
+        VOID(pthread_mutex_lock(&tmp->LOCK_thd_data));  // Lock from delete
+        thd_tmp = new i_thd(tmp);
+        if (thd_tmp) threads_tmp.append(thd_tmp);
+        else VOID(pthread_mutex_unlock(&tmp->LOCK_thd_data));
+      }
+    }
+  }
+  VOID(pthread_mutex_unlock(&LOCK_thread_count));
+
+  if(!threads_tmp.is_empty()){
+	  I_List_iterator<i_thd> it_tmp(threads_tmp);
+	  while ((thd_tmp=it_tmp++)){
+                  tmp=thd_tmp->ptr;
+		  if ((tmp)&&((thd->security_ctx->master_access & SUPER_ACL) ||
+		       thd->security_ctx->user_matches(tmp->security_ctx)))
+		  {
+		    tmp->awake(only_kill_query ? THD::KILL_QUERY : THD::KILL_CONNECTION);
+		  } else {
+			  error=ER_KILL_DENIED_ERROR;
+		  }
+		  VOID(pthread_mutex_unlock(&tmp->LOCK_thd_data));
+
+	  }
+	  free_list(&threads_tmp);
+	  threads_tmp.empty();
+  }
+
+  DBUG_RETURN(error);
+                                                                                                                                                      
+}
+
 
 /**
   kill on thread.
@@ -7823,6 +7961,25 @@ void sql_kill(THD *thd, ulong id, bool only_kill_query)
     my_error(error, MYF(0), id);
 }
 
+/*
+  kills a thread and sends response
+
+  SYNOPSIS
+    sql_kill()
+    thd			Thread class
+    id			Thread id
+    only_kill_query     Should it kill the query or the connection
+*/
+
+void sql_kill_user(THD *thd, char *user, bool only_kill_query)
+{
+  uint error;
+  if (!(error= kill_user_thread(thd, user, only_kill_query)))
+    my_ok(thd);
+  else
+    my_error(error, MYF(0), user);
+}
+
 
 /** If pointer is not a null pointer, append filename to it. */
 
diff --git a/sql/sql_yacc.yy b/sql/sql_yacc.yy
index 5a8c4be..5b79d5f 100644
--- a/sql/sql_yacc.yy
+++ b/sql/sql_yacc.yy
@@ -835,6 +835,10 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  ELSE                          /* SQL-2003-R */
 %token  ELSEIF_SYM
 %token  ENABLE_SYM
+%token  ENABLE_GOVERNOR_SYM
+%token  ENABLE_GOVERNOR_RECONN_SYM
+%token  ENABLE_GOVERNOR_LVE_SYM
+%token  ENABLE_GOVERNOR_RECONN_LVE_SYM
 %token  ENCLOSED
 %token  END                           /* SQL-2003-R */
 %token  ENDS_SYM
@@ -1590,6 +1594,10 @@ statement:
         | describe
         | do
         | drop
+        | enable_governor
+        | enable_governor_reconn
+        | enable_governor_lve
+        | enable_governor_reconn_lve
         | execute
         | flush
         | grant
@@ -10087,6 +10095,41 @@ opt_profile_args:
       Lex->profile_query_id= atoi($3.str);
     }
   ;
+  
+enable_governor:
+          ENABLE_GOVERNOR_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR;
+            set_governor_variable();
+          }
+         ;
+
+enable_governor_reconn:
+          ENABLE_GOVERNOR_RECONN_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR;
+            set_governor_variable_reconn();
+          }
+         ;
+enable_governor_lve:
+          ENABLE_GOVERNOR_LVE_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR_LVE;
+            set_governor_variable_lve();
+          }
+         ;
+
+enable_governor_reconn_lve:
+          ENABLE_GOVERNOR_RECONN_LVE_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR_LVE;
+            set_governor_variable_reconn_lve();
+          }
+         ;
 
 /* Show things */
 
