diff --git a/include/mysqld_error.h b/include/mysqld_error.h
index c8e70ff..072bf91 100644
--- a/include/mysqld_error.h
+++ b/include/mysqld_error.h
@@ -482,4 +482,5 @@
 #define ER_XA_RBTIMEOUT 1478
 #define ER_XA_RBDEADLOCK 1479
 #define ER_TOO_MANY_CONCURRENT_TRXS 1480
-#define ER_ERROR_LAST 1480
+#define ER_ERROR_LAST 1481
+#define ER_NO_SUCH_THREAD_USER 1481
\ No newline at end of file
diff --git a/sql/lex.h b/sql/lex.h
index 84d365a..4ef6b15 100644
--- a/sql/lex.h
+++ b/sql/lex.h
@@ -179,6 +179,8 @@ static SYMBOL symbols[] = {
   { "ELSE",             SYM(ELSE)},
   { "ELSEIF",           SYM(ELSEIF_SYM)},
   { "ENABLE",		SYM(ENABLE_SYM)},
+  { "ENABLE_GOVERNOR",		SYM(ENABLE_GOVERNOR_SYM)},
+  { "ENABLE_GOVERNOR_RECON",		SYM(ENABLE_GOVERNOR_RECONN_SYM)},
   { "ENCLOSED",		SYM(ENCLOSED)},
   { "END",		SYM(END)},
   { "ENGINE",		SYM(ENGINE_SYM)},
diff --git a/sql/mysql_priv.h b/sql/mysql_priv.h
index 754064a..e23bad8 100644
--- a/sql/mysql_priv.h
+++ b/sql/mysql_priv.h
@@ -86,6 +86,7 @@ char *sql_strmake_with_convert(const char *str, uint32 arg_length,
 			       CHARSET_INFO *from_cs,
 			       uint32 max_res_length,
 			       CHARSET_INFO *to_cs, uint32 *result_length);
+void kill_user_thread(THD *thd, char *user, bool only_kill_query);
 void kill_one_thread(THD *thd, ulong id, bool only_kill_query);
 bool net_request_file(NET* net, const char* fname);
 char* query_table_status(THD *thd,const char *db,const char *table_name);
@@ -1013,6 +1014,8 @@ ST_SCHEMA_TABLE *find_schema_table(THD *thd, const char* table_name);
 ST_SCHEMA_TABLE *get_schema_table(enum enum_schema_tables schema_table_idx);
 int prepare_schema_table(THD *thd, LEX *lex, Table_ident *table_ident,
                          enum enum_schema_tables schema_table_idx);
+void set_governor_variable();
+void set_governor_variable_reconn();
 int make_schema_select(THD *thd,  SELECT_LEX *sel,
                        enum enum_schema_tables schema_table_idx);
 int mysql_schema_table(THD *thd, LEX *lex, TABLE_LIST *table_list);
@@ -1432,6 +1435,13 @@ extern HASH global_index_stats;
 extern pthread_mutex_t LOCK_global_index_stats;
 extern pthread_mutex_t LOCK_stats;
 
+extern volatile int governor_get_command;
+extern int (*connect_to_server)();
+extern int (*send_info_begin)(char *);
+extern int (*send_info_end)(char *);
+extern int (*close_sock)();
+extern void * governor_library_handle;
+
 extern const char *opt_date_time_formats[];
 extern KNOWN_DATE_TIME_FORMAT known_date_time_formats[];
 
@@ -1678,6 +1688,7 @@ bool flush_error_log(void);
 /* sql_list.cc */
 void free_list(I_List <i_string_pair> *list);
 void free_list(I_List <i_string> *list);
+void free_list(I_List <i_thd> *list);
 
 /* sql_yacc.cc */
 extern int MYSQLparse(void *thd);
@@ -1685,6 +1696,8 @@ extern int MYSQLparse(void *thd);
 extern void turn_parser_debug_on();
 #endif
 
+extern "C" pid_t gettid(void);
+
 /* frm_crypt.cc */
 #ifdef HAVE_CRYPTED_FRM
 SQL_CRYPT *get_crypt_for_frm(void);
diff --git a/sql/mysqld.cc b/sql/mysqld.cc
index 9f37ac5..d9b91fa 100644
--- a/sql/mysqld.cc
+++ b/sql/mysqld.cc
@@ -22,6 +22,7 @@
 #include "stacktrace.h"
 #include "mysqld_suffix.h"
 #include "mysys_err.h"
+#include <dlfcn.h>
 #ifdef HAVE_BERKELEY_DB
 #include "ha_berkeley.h"
 #endif
@@ -64,6 +65,8 @@
 #include "sp_rcontext.h"
 #include "sp_cache.h"
 
+#include <linux/unistd.h>
+
 #define mysqld_charset &my_charset_latin1
 
 #ifndef DBUG_OFF
@@ -232,6 +235,10 @@ inline void setup_fpu()
 #include <my_pthread.h>			// For thr_setconcurency()
 #endif
 
+#ifndef GETTID
+pid_t gettid(void) {return syscall(__NR_gettid);}
+#endif
+
 #ifdef SOLARIS
 extern "C" int gethostname(char *name, int namelen);
 #endif
@@ -368,6 +375,14 @@ static my_bool opt_sync_bdb_logs;
 
 /* Global variables */
 
+volatile int governor_get_command = 0;                                                                                                                                                                                                     
+int (*connect_to_server)() = NULL;                                                                                                                                                                                                         
+int (*send_info_begin)(char *) = NULL;                                                                                                                                                                                                     
+int (*send_info_end)(char *) = NULL;                                                                                                                                                                                                       
+int (*close_sock)() = NULL;                                                                                                                                                                                                                
+void * governor_library_handle = NULL;
+
+
 bool opt_update_log, opt_bin_log;
 my_bool opt_log, opt_slow_log, opt_log_queries_not_using_indexes= 0;
 bool opt_error_log= IF_WIN(1,0);
@@ -1205,6 +1220,11 @@ void clean_up(bool print_message)
   free_global_client_stats();
   free_global_table_stats();
   free_global_index_stats();
+
+  if(close_sock){                                                                                                                                                                                                                          
+     (*close_sock)();                                                                                                                                                                                                                   
+  }   
+
 #ifdef HAVE_REPLICATION
   end_slave_list();
   free_list(&replicate_do_db);
@@ -6655,6 +6675,7 @@ struct show_var_st status_vars[]= {
   {"Delayed_errors",           (char*) &delayed_insert_errors,  SHOW_LONG},
   {"Delayed_insert_threads",   (char*) &delayed_insert_threads, SHOW_LONG_CONST},
   {"Delayed_writes",           (char*) &delayed_insert_writes,  SHOW_LONG},
+  {"Enable_governor",           (char*) &governor_get_command,  SHOW_INT}, 
   {"Flush_commands",           (char*) &refresh_version,        SHOW_LONG_CONST},
   {"Handler_commit",           (char*) offsetof(STATUS_VAR, ha_commit_count), SHOW_LONG_STATUS},
   {"Handler_delete",           (char*) offsetof(STATUS_VAR, ha_delete_count), SHOW_LONG_STATUS},
@@ -6952,6 +6973,66 @@ static void mysql_init_variables(void)
   max_system_variables.max_join_size=   (ulonglong) HA_POS_ERROR;
   global_system_variables.old_passwords= 0;
 
+
+ 
+  governor_get_command = 0;
+  connect_to_server = NULL;
+  send_info_begin = NULL;
+  send_info_end = NULL;
+  close_sock = NULL;
+  governor_library_handle = NULL;
+
+  char *error_dl = NULL;
+  governor_library_handle = dlopen("libgovernor.so", RTLD_LAZY);
+  if (governor_library_handle) {
+	  sql_print_information("libgovernor.so found");
+ 	  while(1){
+ 		  connect_to_server = (int (*)())dlsym(governor_library_handle, "connect_to_server");
+ 		  if ((error_dl = dlerror()) != NULL){
+ 			  connect_to_server = NULL;
+ 			  send_info_begin = NULL;
+ 			  send_info_end = NULL;
+ 			  close_sock = NULL;
+ 			  break;
+ 		  }
+ 		  send_info_begin = (int (*)(char *))dlsym(governor_library_handle, "send_info_begin");
+ 		  if ((error_dl = dlerror()) != NULL){
+ 		  	  connect_to_server = NULL;
+ 		  	  send_info_begin = NULL;
+ 		  	  send_info_end = NULL;
+ 		  	  close_sock = NULL;
+ 		  	  break;
+ 		  }
+ 		  send_info_end = (int (*)(char *))dlsym(governor_library_handle, "send_info_end");
+ 		  if ((error_dl = dlerror()) != NULL){
+ 			  connect_to_server = NULL;
+ 			  send_info_begin = NULL;
+ 			  send_info_end = NULL;
+ 			  close_sock = NULL;
+ 			  break;
+ 		  }
+ 		  close_sock = (int (*)())dlsym(governor_library_handle, "close_sock");
+ 		  if ((error_dl = dlerror()) != NULL){
+ 			  connect_to_server = NULL;
+ 			  send_info_begin = NULL;
+ 			  send_info_end = NULL;
+ 			  close_sock = NULL;
+ 			  break;
+ 		  }
+ 		  sql_print_information("All governors functions found too");
+ 		  break;
+ 	  }
+   } else {
+ 	  sql_print_information("libgovernor.so not found");
+   }
+   if(connect_to_server){
+ 	  if(!(*connect_to_server)()){
+ 		  sql_print_information("Governor connected");
+ 	  } else {
+ 		  sql_print_error("Governor not connected");
+ 	  }
+   }
+ 
   /*
     Default behavior for 4.1 and 5.0 is to treat NULL values as unequal
     when collecting index statistics for MyISAM tables.
@@ -7844,6 +7925,7 @@ static void set_server_version(void)
 #endif
   if (opt_log || opt_update_log || opt_slow_log || opt_bin_log)
     strmov(end, "-log");                        // This may slow down system
+  end= strmov(end, "-cll");
 }
 
 
diff --git a/sql/share/errmsg.txt b/sql/share/errmsg.txt
index 2b43ba0..ae5c3e1 100644
--- a/sql/share/errmsg.txt
+++ b/sql/share/errmsg.txt
@@ -5651,3 +5651,5 @@ ER_XA_RBDEADLOCK XA102
 	eng "XA_RBDEADLOCK: Transaction branch was rolled back: deadlock was detected"
 ER_TOO_MANY_CONCURRENT_TRXS
         eng  "Too many active concurrent transactions"
+ER_NO_SUCH_THREAD_USER
+        eng "Unknown user name: %s"
diff --git a/sql/sql_acl.cc b/sql/sql_acl.cc
index ef2dbb0..86256f8 100644
--- a/sql/sql_acl.cc
+++ b/sql/sql_acl.cc
@@ -392,7 +392,7 @@ static my_bool acl_load(THD *thd, TABLE_LIST *tables)
         {
           /* Starting from 5.0.3 we have max_user_connections field */
           ptr= get_field(thd->mem_root, table->field[next_field++]);
-          user.user_resource.user_conn= ptr ? atoi(ptr) : 0;
+          user.user_resource.user_conn= ptr ? atoll(ptr) : 0;
         }
         else
           user.user_resource.user_conn= 0;
diff --git a/sql/sql_class.h b/sql/sql_class.h
index 3aaa564..c2d6641 100644
--- a/sql/sql_class.h
+++ b/sql/sql_class.h
@@ -2626,3 +2626,12 @@ public:
 void add_to_status(STATUS_VAR *to_var, STATUS_VAR *from_var);
 void mark_transaction_to_rollback(THD *thd, bool all);
 
+/* DB_GOVERNOR ADDITIONS */
+class i_thd: public ilink
+{
+public:
+  THD* ptr;
+  i_thd():ptr(0) { }
+  i_thd(THD* s) : ptr(s) {}
+};
+
diff --git a/sql/sql_lex.h b/sql/sql_lex.h
index 1806387..8ed73a0 100644
--- a/sql/sql_lex.h
+++ b/sql/sql_lex.h
@@ -102,7 +102,7 @@ enum enum_sql_command {
   */
   // TODO(mcallaghan): update status_vars in mysqld to export these
   SQLCOM_SHOW_USER_STATS, SQLCOM_SHOW_TABLE_STATS, SQLCOM_SHOW_INDEX_STATS,
-  SQLCOM_SHOW_CLIENT_STATS,
+  SQLCOM_SHOW_CLIENT_STATS, SQLCOM_ENABLE_GOVERNOR, SQLCOM_ENABLE_RECONN_GOVERNOR,
   /* This should be the last !!! */
   SQLCOM_END
 };
diff --git a/sql/sql_list.cc b/sql/sql_list.cc
index 01ab9b9..23b47d8 100644
--- a/sql/sql_list.cc
+++ b/sql/sql_list.cc
@@ -36,3 +36,10 @@ void free_list(I_List <i_string> *list)
   while ((tmp= list->get()))
     delete tmp;
 }
+
+void free_list(I_List <i_thd> *list)
+{
+  i_thd *tmp;
+  while ((tmp= list->get()))
+    delete tmp;
+}
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index 618076f..39af63b 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -13,6 +13,7 @@
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */
 
+#define HAVE_CLOCK_GETTIME 1
 #define MYSQL_LEX 1
 #include "mysql_priv.h"
 #include "sql_repl.h"
@@ -480,9 +481,7 @@ int check_user(THD *thd, enum enum_server_command command,
       thd->main_security_ctx.db_access=0;
 
       /* Don't allow user to connect if he has done too many queries */
-      if ((ur.questions || ur.updates || ur.conn_per_hour || ur.user_conn ||
-	   max_user_connections) &&
-	  get_or_create_user_conn(thd,
+      if (get_or_create_user_conn(thd,
             (opt_old_style_user_limits ? thd->main_security_ctx.user :
              thd->main_security_ctx.priv_user),
             (opt_old_style_user_limits ? thd->main_security_ctx.host_or_ip :
@@ -766,6 +765,9 @@ void init_global_index_stats(void)
 */
 
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
+int is_root_access(char *user_name){                                                                                                                       
+    return !strcmp(user_name,"root")||!strcmp(user_name,"mysql");                                                                                          
+}  
 
 static int check_for_max_user_connections(THD *thd, USER_CONN *uc)
 {
@@ -773,6 +775,15 @@ static int check_for_max_user_connections(THD *thd, USER_CONN *uc)
   DBUG_ENTER("check_for_max_user_connections");
 
   (void) pthread_mutex_lock(&LOCK_user_conn);
+  
+  if (((uc->user_resources.user_conn==(uint)~0) || (max_user_connections == (uint)~0)) && !is_root_access(uc->user)) {
+    net_printf_error(thd, ER_USER_LIMIT_REACHED, uc->user,
+                     "max_user_connections",
+                     (long) uc->user_resources.user_conn);
+    error= 1;
+    goto end;
+  }
+  
   if (max_user_connections && !uc->user_resources.user_conn &&
       max_user_connections < (uint) uc->connections)
   {
@@ -1857,6 +1868,25 @@ end:
   DBUG_RETURN(0);
 }
 
+void set_governor_variable(){
+	governor_get_command = 1;
+}
+
+void set_governor_variable_reconn(){
+	governor_get_command = 1;
+	if(close_sock){
+	     (*close_sock)();
+	}
+	if(connect_to_server){
+	     if(!(*connect_to_server)()){
+	             sql_print_information("Governor reconnected");
+	     } else {
+	             sql_print_error("Governor not reconnected. Failed connection");
+	     }
+	}
+}
+
+
 
 /**
    This works because items are allocated with sql_alloc().
@@ -5051,7 +5081,12 @@ end_with_restore_list:
 		 MYF(0));
       goto error;
     }
-    kill_one_thread(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    if(it->type()==Item::STRING_ITEM){
+      kill_user_thread(thd, it->val_str(0)->c_ptr(), lex->type & ONLY_KILL_QUERY);
+    } else {
+      kill_one_thread(thd, (ulong)it->val_int(), lex->type & ONLY_KILL_QUERY);
+    }
+
     break;
   }
 #ifndef NO_EMBEDDED_ACCESS_CHECKS
@@ -6251,6 +6286,9 @@ check_access(THD *thd, ulong want_access, const char *db, ulong *save_priv,
 #endif /* NO_EMBEDDED_ACCESS_CHECKS */
 }
 
+my_bool chek_governors_avaliable_command(THD *thd){
+	return (thd->lex->sql_command!=SQLCOM_ENABLE_GOVERNOR&&thd->lex->sql_command!=SQLCOM_ENABLE_RECONN_GOVERNOR);
+}
 
 /*
   check for global access and give descriptive error message if it fails
@@ -6905,6 +6943,8 @@ void mysql_init_multi_delete(LEX *lex)
 void mysql_parse(THD *thd, char *rawbuf, uint length,
                  const char ** found_semicolon)
 {
+
+
   DBUG_ENTER("mysql_parse");
 
   DBUG_EXECUTE_IF("parser_debug", turn_parser_debug_on(););
@@ -6951,9 +6991,16 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
        start_usecs = start_time.tv_sec * 1000000.0 + start_time.tv_usec;
      }
    }
- 
 
 
+   if(send_info_begin&&governor_get_command&&chek_governors_avaliable_command(thd)){
+ 	  if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]){
+ 		  (*send_info_begin)(thd->security_ctx->user);
+ 	  }
+   }
+ 
+ 
+
   if (query_cache_send_result_to_client(thd, rawbuf, length) <= 0)
   {
     LEX *lex= thd->lex;
@@ -7032,6 +7079,16 @@ void mysql_parse(THD *thd, char *rawbuf, uint length,
     *found_semicolon= NULL;
   }
 
+ 
+
+  if(send_info_end&&governor_get_command&&chek_governors_avaliable_command(thd)){
+    if(thd->security_ctx && thd->security_ctx->user && thd->security_ctx->user[0]){
+  	  (*send_info_end)(thd->security_ctx->user);
+    }
+  }
+
+
+
   if (opt_userstat_running) {
     // Gets the end time.
     if (!(end_time_error = gettimeofday(&end_time, NULL))) {
@@ -8574,6 +8631,64 @@ bool insert_precheck(THD *thd, TABLE_LIST *tables)
   DBUG_RETURN(FALSE);
 }
 
+/*
+  kill user threads
+
+  SYNOPSIS
+    kill_user_thread()
+    thd                 Thread class
+    user                User name
+
+*/
+
+void kill_user_thread(THD *thd, char *user, bool only_kill_query)
+{
+  THD *tmp;
+  i_thd *thd_tmp;
+  I_List<i_thd> threads_tmp;
+  threads_tmp.empty();
+  uint error=0;//ER_NO_SUCH_THREAD_USER;
+  VOID(pthread_mutex_lock(&LOCK_thread_count)); // For unlink from list
+  I_List_iterator<THD> it(threads);
+  while ((tmp=it++))
+  {
+    if((tmp)&&(user)&&(tmp->user_connect)&&(tmp->user_connect->user)){
+      if (!strncmp(tmp->user_connect->user,user,16))
+      {
+        VOID(pthread_mutex_lock(&tmp->LOCK_thd_data));  // Lock from delete
+        thd_tmp = new i_thd(tmp);
+        if (thd_tmp) threads_tmp.append(thd_tmp);
+        else VOID(pthread_mutex_unlock(&tmp->LOCK_thd_data));
+      }
+    }
+  }
+  VOID(pthread_mutex_unlock(&LOCK_thread_count));
+
+  if(!threads_tmp.is_empty()){
+      I_List_iterator<i_thd> it_tmp(threads_tmp);
+	  while ((thd_tmp=it_tmp++)){
+                  tmp=thd_tmp->ptr;
+		  if ((tmp)&&((thd->security_ctx->master_access & SUPER_ACL) ||
+		       thd->security_ctx->user_matches(tmp->security_ctx)))
+		  {
+		    tmp->awake(only_kill_query ? THD::KILL_QUERY : THD::KILL_CONNECTION);
+		  } else {
+			  error=ER_KILL_DENIED_ERROR;
+		  }
+		  VOID(pthread_mutex_unlock(&tmp->LOCK_thd_data));
+
+	  }
+	  free_list(&threads_tmp);
+	  threads_tmp.empty();
+  }
+
+  if (!error)
+    send_ok(thd);
+  else
+    my_error(error, MYF(0), user);
+}
+
+
 
 /**
    @brief  Check privileges for SHOW CREATE TABLE statement.
diff --git a/sql/sql_yacc.yy b/sql/sql_yacc.yy
index 86774b1..291f4f7 100644
--- a/sql/sql_yacc.yy
+++ b/sql/sql_yacc.yy
@@ -636,6 +636,8 @@ bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);
 %token  ELSEIF_SYM
 %token  ELT_FUNC
 %token  ENABLE_SYM
+%token  ENABLE_GOVERNOR_SYM
+%token  ENABLE_GOVERNOR_RECONN_SYM
 %token  ENCLOSED
 %token  ENCODE_SYM
 %token  ENCRYPT
@@ -1328,6 +1330,8 @@ statement:
 	| describe
 	| do
 	| drop
+        | enable_governor
+        | enable_governor_reconn
         | execute
 	| flush
 	| grant
@@ -8049,6 +8053,24 @@ opt_profile_args:
       Lex->profile_query_id= atoi($3.str);
     }
   ;
+  
+enable_governor:
+          ENABLE_GOVERNOR_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_GOVERNOR;
+            set_governor_variable();
+          }
+         ;
+
+enable_governor_reconn:
+          ENABLE_GOVERNOR_RECONN_SYM
+          {
+            LEX *lex= Lex;
+            lex->sql_command= SQLCOM_ENABLE_RECONN_GOVERNOR;
+            set_governor_variable_reconn();
+          }
+         ;
 
 /* Show things */
 
