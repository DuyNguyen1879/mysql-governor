diff --git a/install/db-select-mysql b/install/db-select-mysql
index 03284f2..5136424 100755
--- a/install/db-select-mysql
+++ b/install/db-select-mysql
@@ -2,7 +2,7 @@
 
 
 
-OPTS=`getopt -o hm: --long help,mysql-version: -n 'parse-options' -- "$@"`
+OPTS=$(getopt -o hm: --long help,mysql-version: -n 'parse-options' -- "$@")
 
 if [ $? != 0 ] ; then echo "Failed parsing options." >&2 ; exit 1 ; fi
 
@@ -23,7 +23,7 @@ while true; do
 done
 
 if [ -n "$MYSQL_SET_VER" ]; then
-    /usr/share/lve/dbgovernor/mysqlgovernor.py --mysql-version $MYSQL_SET_VER;
+    /usr/share/lve/dbgovernor/mysqlgovernor.py --mysql-version "$MYSQL_SET_VER";
     exit 0
 fi;
 
diff --git a/install/modules/__init__.py b/install/modules/__init__.py
index 75bbd4d..cc9610c 100644
--- a/install/modules/__init__.py
+++ b/install/modules/__init__.py
@@ -1,2 +1,8 @@
+# coding:utf-8
+"""
+Init module
+"""
+
 from .base import InstallManager
 from .storage import Storage
+
diff --git a/install/modules/base.py b/install/modules/base.py
index 6e3158b..6d861a1 100644
--- a/install/modules/base.py
+++ b/install/modules/base.py
@@ -28,7 +28,7 @@ class InstallManager(object):
     Base class with standard methods for any CP
     """
     # installation path
-    SOURCE = "/usr/share/lve/dbgovernor/"  # TODO: remove this variable
+    SOURCE = "/usr/share/lve/dbgovernor/"
     # file with new version for install
     NEW_VERSION_FILE = "/usr/share/lve/dbgovernor/mysql.type"
     # file with cached installed version before install
diff --git a/install/modules/cpanel.py b/install/modules/cpanel.py
index 8bff4e9..f60b6f3 100644
--- a/install/modules/cpanel.py
+++ b/install/modules/cpanel.py
@@ -92,8 +92,7 @@ class cPanelManager(InstallManager):
         if os.path.exists("/usr/local/cpanel/cpanel"):
             if os.path.exists(
                     "/usr/local/cpanel/scripts/update_local_rpm_versions"):
-                shutil.copy2(self._rel("utils/cloudlinux.versions"),
-                             "/var/cpanel/rpm.versions.d/cloudlinux.versions")
+                shutil.copy2(self._rel("utils/cloudlinux.versions"), "/var/cpanel/rpm.versions.d/cloudlinux.versions")
             else:
                 if not os.path.exists("/etc/cpupdate.conf.governor"):
                     self._get_mysqlup()
diff --git a/install/scripts/chek_mysql_rpms_local b/install/scripts/chek_mysql_rpms_local
index f80815a..12ffb89 100755
--- a/install/scripts/chek_mysql_rpms_local
+++ b/install/scripts/chek_mysql_rpms_local
@@ -5,13 +5,13 @@ RESULT_COMMON=""
 function getMySQLTargets(){
     target="$1"
     if [ -n "$target" -a -e /scripts/update_local_rpm_versions ];then
-	result=`cat /var/cpanel/rpm.versions.d/local.versions | grep "$target:"`
+	result=$(cat /var/cpanel/rpm.versions.d/local.versions | grep "$target:")
 	if [ -n "$result" ];then
 	    result2=${result//[[:blank:]]/}
-	    /scripts/update_local_rpm_versions --del target_settings.$target
-	    RESULT_COMMON=`echo -e "$RESULT_COMMON\n$result2"`
+	    /scripts/update_local_rpm_versions --del target_settings."$target"
+	    RESULT_COMMON=$(echo -e "$RESULT_COMMON\n$result2")
 	else
-	    RESULT_COMMON=`echo -e "$RESULT_COMMON\n$target:empty"`
+	    RESULT_COMMON=$(echo -e "$RESULT_COMMON\n$target:empty")
 	fi
     fi
 }
@@ -19,13 +19,13 @@ function getMySQLTargets(){
 function setMySQLTargets(){
     target="$1"
     if [ -n "$target" -a -e /scripts/update_local_rpm_versions ];then
-	result=`cat /usr/share/lve/dbgovernor/old.rpms | grep "$target:"`
+	result=$cat /usr/share/lve/dbgovernor/old.rpms | grep "$target:")
 	if [ -n "$result" ];then
 	    result2=${result//[[:blank:]]/}
-	    trg=`echo "$result2" | cut -d: -f1`
-	    val=`echo "$result2" | cut -d: -f2`
+	    trg=$(echo "$result2" | cut -d: -f1)
+	    val=$(echo "$result2" | cut -d: -f2)
 	    if [ -n "$trg" -a -n "$val" -a "$val" != "empty" ]; then
-		/scripts/update_local_rpm_versions --add target_settings.$trg $val
+		/scripts/update_local_rpm_versions --add target_settings."$trg" "$val"
 	    fi
 	fi
     fi
diff --git a/install/scripts/cpanel-common-lve b/install/scripts/cpanel-common-lve
index 63761ad..923393a 100755
--- a/install/scripts/cpanel-common-lve
+++ b/install/scripts/cpanel-common-lve
@@ -8,8 +8,8 @@ common_tmp_path="/usr/share/lve/dbgovernor/tmp"
 
 function removeEmptyStringsFromFile(){
     filename="$1"
-    res=`sed -e '/^$/d' $filename`
-    echo "$res" > $filename
+    res=$(sed -e '/^$/d' "$filename")
+    echo "$res" > "$filename"
 }
 
 function deleteAllInclude(){
@@ -36,7 +36,7 @@ function createHookHeader(){
 		chmod 755 "$1"
 	else
 		chmod 755 "$1"
-		tmp=`cat "$1" | egrep "#!/bin/bash|#!/bin/sh"`
+		tmp=$(cat "$1" | egrep "#!/bin/bash|#!/bin/sh")
 		if [ -z "$tmp" ];then
 			rm -f "$1".governorh.bak
 			mv "$1" "$1".governorh.bak
@@ -52,9 +52,9 @@ function checkHookString(){
     #2 - pattern string
     #3 - comment srting
     if [ -e "$1" ];then
-	tmp=`cat "$1" | grep "$2"`
+	tmp=$(cat "$1" | grep "$2")
 	if [ -z "$tmp" ];then
-	    echo "$2   #$3" >> $1
+	    echo "$2   #$3" >> "$1"
 	fi
     fi
 }
@@ -64,9 +64,9 @@ function checkHookStringParam(){
     #2 - pattern string
     #3 - comment srting
     if [ -e "$1" ];then
-	tmp=`cat "$1" | grep "$2"`
+	tmp=$(cat "$1" | grep "$2")
 	if [ -z "$tmp" ];then
-	    echo "$2 \"\$1\"   #$3" >> $1
+	    echo "$2 \"\$1\"   #$3" >> "$1"
 	fi
     fi
 }
@@ -74,9 +74,9 @@ function checkHookStringParam(){
 function rewriteDBUserHook(){
     #1 - hook name
     if [ -e "$1" ]; then 
-	correct=`cat "$1" | grep '/usr/share/lve/dbgovernor/utils/dbgovernor_map "$1"'`
+	correct=$(cat "$1" | grep '/usr/share/lve/dbgovernor/utils/dbgovernor_map "$1"'`)
 	if [ -z "$correct" ]; then
-	    is_hook=`cat "$1" | grep "/usr/share/lve/dbgovernor/utils/dbgovernor_map"`
+	    is_hook=$(cat "$1" | grep "/usr/share/lve/dbgovernor/utils/dbgovernor_map")
 	    if [ -n "$is_hook" ]; then
 		sed "s/dbgovernor_map/dbgovernor_map \"\$1\"/" -i "$1"
 	    fi
diff --git a/install/utils/mysql_export b/install/utils/mysql_export
index 167f62d..37a714c 100755
--- a/install/utils/mysql_export
+++ b/install/utils/mysql_export
@@ -37,25 +37,25 @@ vercomp() {
 get_limit(){
   return
   if [ -e /usr/sbin/lvectl ]; then
-	VERS=`/usr/sbin/lvectl version | cut -d"-" -f1`
+	VERS=$(/usr/sbin/lvectl version | cut -d"-" -f1)
 	vercomp "1.4" "$VERS"
 	VERS_GET=$?
 	if [ "$VERS_GET" -eq 1 ];then
-    	    LVE_VER=`/usr/sbin/lvectl --lve-version`
+    	    LVE_VER=$(/usr/sbin/lvectl --lve-version)
     	    if [ "$LVE_VER" == "4" ]; then
-        	io_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $6}'`
+        	io_limit=$(/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $6}')
     	    else
-        	io_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $8}'`
+        	io_limit=$(/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $8}')
     	    fi
-    	    cpu_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $2}'`
+    	    cpu_limit=$(/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $2}')
 	else
-	    LVE_VER=`/usr/sbin/lvectl --lve-version`
+	    LVE_VER=$(/usr/sbin/lvectl --lve-version)
     	    if [ "$LVE_VER" == "4" ]; then
-        	io_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $6}'`
+        	io_limit=$(/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $6}')
     	    else
-        	io_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $8}'`
+        	io_limit=$(/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $8}')
     	    fi
-    	    cpu_limit=`/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $2}'`
+    	    cpu_limit=$(/usr/sbin/lvectl limits 3 | awk 'NR == 2' | awk '{print $2}')
 	fi
   fi
 }
@@ -63,7 +63,7 @@ get_limit(){
 set_big_limit(){
     return
     if [ -e /usr/sbin/lvectl ]; then
-	VERS=`/usr/sbin/lvectl version | cut -d"-" -f1`
+	VERS=$(/usr/sbin/lvectl version | cut -d"-" -f1)
 	vercomp "1.4" "$VERS"
 	VERS_GET=$?
 	if [ "$VERS_GET" -eq 1 ];then
@@ -71,7 +71,7 @@ set_big_limit(){
 		/usr/sbin/lvectl set 3 --cpu=100 --io=0 --save-all-parameters
 	    fi
 	else
-	    proc_numb=`cat /proc/cpuinfo | grep processor | wc -l`
+	    proc_numb=$(cat /proc/cpuinfo | grep processor | wc -l)
 	    let "max_limit = $proc_numb * 100";
 	    /usr/sbin/lvectl set 3 --speed=$max_limit% --io=0 --save-all-parameters
 	fi
@@ -81,20 +81,20 @@ set_big_limit(){
 set_old_limit(){
     return
     if [ -e /usr/sbin/lvectl ]; then
-	VERS=`/usr/sbin/lvectl version | cut -d"-" -f1`
+	VERS=$(/usr/sbin/lvectl version | cut -d"-" -f1)
 	vercomp "1.4" "$VERS"
 	VERS_GET=$?
 	if [ "$VERS_GET" -eq 1 ];then
 	    if [ -z "$io_limit" ]; then
-		/usr/sbin/lvectl set 3 --cpu=$cpu_limit --save-all-parameters
+		/usr/sbin/lvectl set 3 --cpu="$cpu_limit" --save-all-parameters
 	    else
-		/usr/sbin/lvectl set 3 --cpu=$cpu_limit --io=$io_limit --save-all-parameters
+		/usr/sbin/lvectl set 3 --cpu="$cpu_limit" --io="$io_limit" --save-all-parameters
 	    fi
 	else
 	    if [ -z "$io_limit" ]; then
-		/usr/sbin/lvectl set 3 --speed=$cpu_limit% --save-all-parameters
+		/usr/sbin/lvectl set 3 --speed="$cpu_limit"% --save-all-parameters
 	    else
-		/usr/sbin/lvectl set 3 --speed=$cpu_limit% --io=$io_limit --save-all-parameters
+		/usr/sbin/lvectl set 3 --speed="$cpu_limit"% --io="$io_limit" --save-all-parameters
 	    fi
 	fi
     fi
diff --git a/src/dbctl_conn.c b/src/dbctl_conn.c
index 3a23c10..d8a985b 100644
--- a/src/dbctl_conn.c
+++ b/src/dbctl_conn.c
@@ -8,7 +8,7 @@
  *  Created on: Oct 23, 2012
  *      Author: Shkatula Pavel
  *      E-mail: shpp@cloudlinux.com
-*/
+ */
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -30,63 +30,54 @@
 
 #include "dbctl_conn.h"
 
-int connect_to_server_dbctl()
-{
-  int s, len;
-  struct sockaddr_un saun;
+int connect_to_server_dbctl() {
+	int s, len;
+	struct sockaddr_un saun;
 
-  if( ( s = socket( AF_UNIX, SOCK_STREAM, 0 ) ) < 0 ) 
-  {
-    return -1;
-  }
+	if ((s = socket(AF_UNIX, SOCK_STREAM, 0)) < 0) {
+		return -1;
+	}
 
-  saun.sun_family = AF_UNIX;
-  strcpy( saun.sun_path, SOCK_ADDRESS );
+	saun.sun_family = AF_UNIX;
+	strcpy(saun.sun_path, SOCK_ADDRESS);
 
-  len = sizeof( saun.sun_family ) + strlen( saun.sun_path );
-  if( connect( s, (struct sockaddr *)&saun, len ) < 0 ) 
-  {
-	close(s);
-    return -2;
-  }
+	len = sizeof(saun.sun_family) + strlen(saun.sun_path);
+	if (connect(s, (struct sockaddr *) &saun, len) < 0) {
+		close(s);
+		return -2;
+	}
 
-  return s;
+	return s;
 }
 
-int opensock( int *_socket, FILE **in, FILE **out )
-{
-  *_socket = connect_to_server_dbctl();
-  if(*_socket>=0){
-	  *in = fdopen( *_socket, "r+");
-	  *out = fdopen( *_socket, "w");
-  }
-
-  if( !*in || !*out ) 
-  {
-    printf( "Configuration saved. Unable to apply to live instance - can't connect to socket. Maybe governor is not started\n" );
-    return 0;
-  }
-
-  return 1;
+int opensock(int *_socket, FILE **in, FILE **out) {
+	*_socket = connect_to_server_dbctl();
+	if (*_socket >= 0) {
+		*in = fdopen(*_socket, "r+");
+		*out = fdopen(*_socket, "w");
+	}
+
+	if (!*in || !*out) {
+		printf(
+				"Configuration saved. Unable to apply to live instance - can't connect to socket. Maybe governor is not started\n");
+		return 0;
+	}
+
+	return 1;
 }
 
-void closesock( int _socket, FILE *in, FILE *out )
-{
-  if( in ) 
-  {
-    fclose( in );
-    //in = NULL;
-  }
-
-  if( out ) 
-  {
-    fclose( out );
-    //out = NULL;
-  }
-
-  if( _socket > 0 ) 
-  {
-    close( _socket );
-    _socket = 0;
-  }
+void closesock(int _socket, FILE *in, FILE *out) {
+	if (in) {
+		fclose(in);
+		//in = NULL;
+	}
+
+	if (out) {
+		fclose(out);
+		//out = NULL;
+	}
+
+	if (_socket > 0) {
+		close(_socket);
+	}
 }
diff --git a/src/governor_config.c b/src/governor_config.c
index 0c99787..ef384af 100644
--- a/src/governor_config.c
+++ b/src/governor_config.c
@@ -29,678 +29,572 @@ pthread_rwlock_t rwlock = PTHREAD_RWLOCK_INITIALIZER;
 
 struct governor_config *cfg = NULL;
 
-static int
-_set_val (T_LONG * limit, const char *ptr, const char *name, long *value)
-{
-  if (strcmp (ptr, name) == 0)
-    {
-      limit->_current = value[0];
-      limit->_short = value[1];
-      limit->_mid = value[2];
-      limit->_long = value[3];
-      return 1;
-    }
-  return 0;
+static int _set_val(T_LONG * limit, const char *ptr, const char *name,
+		long *value) {
+	if (strcmp(ptr, name) == 0) {
+		limit->_current = value[0];
+		limit->_short = value[1];
+		limit->_mid = value[2];
+		limit->_long = value[3];
+		return 1;
+	}
+	return 0;
 }
 
-static MODE_TYPE
-mode_type_str_to_enum (const char *mode_str)
-{
-  if (mode_str == NULL)
-    {
-      fprintf (stderr, "Error: mode attribute is absent\n");
-      exit (-1);
-    }
+static MODE_TYPE mode_type_str_to_enum(const char *mode_str) {
+	if (mode_str == NULL) {
+		fprintf(stderr, "Error: mode attribute is absent\n");
+		exit(-1);
+	}
 
-  if (!strcasecmp (mode_str, "TEST"))
-    return TEST_MODE;
+	if (!strcasecmp(mode_str, "TEST"))
+		return TEST_MODE;
 
-  if (!strcasecmp (mode_str, "PRODUCTION"))
-    return PRODUCTION_MODE;
+	if (!strcasecmp(mode_str, "PRODUCTION"))
+		return PRODUCTION_MODE;
 
-  if (!strcasecmp (mode_str, "DEBUG"))
-    return DEBUG_MODE;
+	if (!strcasecmp(mode_str, "DEBUG"))
+		return DEBUG_MODE;
 
-  if (!strcasecmp (mode_str, "ERROR"))
-    return ERROR_MODE;
+	if (!strcasecmp(mode_str, "ERROR"))
+		return ERROR_MODE;
 
-  if (!strcasecmp (mode_str, "RESTRICT"))
-    return RESTRICT_MODE;
+	if (!strcasecmp(mode_str, "RESTRICT"))
+		return RESTRICT_MODE;
 
-  if (!strcasecmp (mode_str, "NORESTRICT"))
-    return NORESTRICT_MODE;
+	if (!strcasecmp(mode_str, "NORESTRICT"))
+		return NORESTRICT_MODE;
 
-  if (!strcasecmp (mode_str, "IGNORE"))
-    return IGNORE_MODE;
+	if (!strcasecmp(mode_str, "IGNORE"))
+		return IGNORE_MODE;
 
-  if (!strcasecmp (mode_str, "OLD"))
-    return OLD_RESTRICT_MODE;
+	if (!strcasecmp(mode_str, "OLD"))
+		return OLD_RESTRICT_MODE;
 
-  if (!strcasecmp (mode_str, "NEW"))
-    return NEW_RESTRICT_MODE;
+	if (!strcasecmp(mode_str, "NEW"))
+		return NEW_RESTRICT_MODE;
 
-  fprintf (stderr, "Error: invalid mode %s\n", mode_str);
-  exit (-1);
+	fprintf(stderr, "Error: invalid mode %s\n", mode_str);
+	exit(-1);
 }
 
-int
-getRestrictFormat (const char *mode)
-{
-  if (mode)
-    {
-      if (!strcasecmp (mode, "SHORT"))
-	return 0;
-      if (!strcasecmp (mode, "MEDIUM"))
-	return 1;
-      if (!strcasecmp (mode, "LONG"))
+int getRestrictFormat(const char *mode) {
+	if (mode) {
+		if (!strcasecmp(mode, "SHORT"))
+			return 0;
+		if (!strcasecmp(mode, "MEDIUM"))
+			return 1;
+		if (!strcasecmp(mode, "LONG"))
+			return 2;
+		if (!strcasecmp(mode, "VERYLONG"))
+			return 3;
+		if (!strcasecmp(mode, "CHECKTICKS"))
+			return 4;
+	}
 	return 2;
-      if (!strcasecmp (mode, "VERYLONG"))
-    return 3;
-      if (!strcasecmp (mode, "CHECKTICKS"))
-    return 4;
-    }
-  return 2;
 }
 
-static unsigned
-get_seconds (const char *value, char unit)
-{
-  unsigned val = 0;
-
-  if (sscanf (value, "%u", &val) != 1)
-    {
-      fprintf (stderr, "Error while parsing period\n");
-      exit (-1);
-    }
-
-  switch (unit)
-    {
-    case 's':
-    case 'S':
-      return val;
-    case 'm':
-    case 'M':
-      return val * 60;
-    case 'h':
-    case 'H':
-      return val * 60 * 60;
-    case 'd':
-    case 'D':
-      return val * 60 * 60 * 24;
-    default:
-      return val;
-    }
+static unsigned get_seconds(const char *value, char unit) {
+	unsigned val = 0;
+
+	if (sscanf(value, "%u", &val) != 1) {
+		fprintf(stderr, "Error while parsing period\n");
+		exit(-1);
+	}
+
+	switch (unit) {
+	case 's':
+	case 'S':
+		return val;
+	case 'm':
+	case 'M':
+		return val * 60;
+	case 'h':
+	case 'H':
+		return val * 60 * 60;
+	case 'd':
+	case 'D':
+		return val * 60 * 60 * 24;
+	default:
+		return val;
+	}
 }
 
 #define MAX_VAL_LEN 10
 
 // Function converts string like "2d10h30m45s" (where d - days, h - hours, m - minutes, s - seconds)
 // to equivalent total number of seconds
-static unsigned
-parse_period (const char *period)
-{
-  char value[MAX_VAL_LEN + 1];
-  char unit;
-  int index, pos = 0;
-  unsigned result = 0;
-
-  for (index = 0; index < strlen (period); index++)
-    {
-      if (isdigit (period[index]))
-	{
-	  if (pos >= MAX_VAL_LEN)
-	    {
-	      fprintf (stderr, "Error: value of period is too large\n");
-	      exit (-1);
-	    }
-	  value[pos] = period[index];
-	  pos++;
-	}
-      else
-	{
-	  unit = period[index];
-	  value[pos] = '\0';
-	  pos = 0;
-	  result += get_seconds (value, unit);
-	}
-    }
-  if(!result){
-	  result = atoi(period);
-  }
-
-  return result;
+static unsigned parse_period(const char *period) {
+	char value[MAX_VAL_LEN + 1];
+	char unit;
+	int index, pos = 0;
+	unsigned result = 0;
+
+	for (index = 0; index < strlen(period); index++) {
+		if (isdigit (period[index])) {
+			if (pos >= MAX_VAL_LEN) {
+				fprintf(stderr, "Error: value of period is too large\n");
+				exit(-1);
+			}
+			value[pos] = period[index];
+			pos++;
+		} else {
+			unit = period[index];
+			value[pos] = '\0';
+			pos = 0;
+			result += get_seconds(value, unit);
+		}
+	}
+	if (!result) {
+		result = atoi(period);
+	}
+
+	return result;
 }
 
-static void
-set_stats_limit (ezxml_t inner_xml, stats_limit_cfg * st)
-{
-  const char *ptr = ezxml_attr (inner_xml, "name");
-  long value[4];
-  const char *val_ptr = ezxml_attr (inner_xml, "current");
-  if (val_ptr == NULL)
-    {
-      fprintf (stderr, "Error: attribute 'current' is absent\n");
-      exit (-1);
-    }
-
-  if( strcmp( ptr, "slow" ) == 0 )
-  {
-    value[0] = parse_period( val_ptr );
-    value[1] = -1;
-    value[2] = -1;
-    value[3] = -1;
-  } 
-  else
-  {
-    value[0] = atof (val_ptr);
-    value[1] =
-      ((val_ptr =
-        ezxml_attr (inner_xml, "short")) == NULL) ? (-1) : atof (val_ptr);
-    value[2] =
-      ((val_ptr =
-        ezxml_attr (inner_xml, "mid")) == NULL) ? (-1) : atof (val_ptr);
-    value[3] =
-      ((val_ptr =
-        ezxml_attr (inner_xml, "long")) == NULL) ? (-1) : atof (val_ptr);
-  } 
-  _set_val (&st->cpu, ptr, "cpu", value) ||
-    _set_val (&st->write, ptr, "write", value) ||
-    _set_val (&st->read, ptr, "read", value) ||
-    _set_val (&st->slow, ptr, "slow", value)
-    || fprintf (stderr, "Unknown limit setting: %s\n", ptr);
+static void set_stats_limit(ezxml_t inner_xml, stats_limit_cfg * st) {
+	const char *ptr = ezxml_attr(inner_xml, "name");
+	long value[4];
+	const char *val_ptr = ezxml_attr(inner_xml, "current");
+	if (val_ptr == NULL) {
+		fprintf(stderr, "Error: attribute 'current' is absent\n");
+		exit(-1);
+	}
+
+	if (strcmp(ptr, "slow") == 0) {
+		value[0] = parse_period(val_ptr);
+		value[1] = -1;
+		value[2] = -1;
+		value[3] = -1;
+	} else {
+		value[0] = atof(val_ptr);
+		value[1] = ((val_ptr = ezxml_attr(inner_xml, "short")) == NULL) ? (-1)
+				: atof(val_ptr);
+		value[2] = ((val_ptr = ezxml_attr(inner_xml, "mid")) == NULL) ? (-1)
+				: atof(val_ptr);
+		value[3] = ((val_ptr = ezxml_attr(inner_xml, "long")) == NULL) ? (-1)
+				: atof(val_ptr);
+	}
+	_set_val(&st->cpu, ptr, "cpu", value) || _set_val(&st->write, ptr, "write",
+			value) || _set_val(&st->read, ptr, "read", value) || _set_val(
+			&st->slow, ptr, "slow", value) || fprintf(stderr,
+			"Unknown limit setting: %s\n", ptr);
 }
 
 stats_limit_cfg *
-config_get_account_limit (const char *account_id, stats_limit_cfg *cfgin)
-{
-  int rc = pthread_rwlock_rdlock( &rwlock );
-
-  stats_limit_cfg *ptr =
-    g_hash_table_lookup (cfg->account_limits, account_id);
-  if (ptr)
-  {
-	memcpy(cfgin, ptr, sizeof(stats_limit_cfg));
-    rc = pthread_rwlock_unlock( &rwlock );
-    return cfgin;
-  }
-
-  memcpy(cfgin, &cfg->default_limit, sizeof(stats_limit_cfg));
-  rc = pthread_rwlock_unlock( &rwlock );
-  return cfgin;
-}
+config_get_account_limit(const char *account_id, stats_limit_cfg *cfgin) {
+	int rc = pthread_rwlock_rdlock(&rwlock);
+
+	stats_limit_cfg *ptr = g_hash_table_lookup(cfg->account_limits, account_id);
+	if (ptr) {
+		memcpy(cfgin, ptr, sizeof(stats_limit_cfg));
+		rc = pthread_rwlock_unlock(&rwlock);
+		return cfgin;
+	}
 
+	memcpy(cfgin, &cfg->default_limit, sizeof(stats_limit_cfg));
+	rc = pthread_rwlock_unlock(&rwlock);
+	return cfgin;
+}
 
-void
-config_free ()
-{
-  if (cfg)
-    {
-	  if(cfg->debug_user)
-		  free(cfg->debug_user);
-      if (cfg->account_limits)
-	g_hash_table_unref (cfg->account_limits);
-      if (cfg->db_login)
-	free (cfg->db_login);
-      if (cfg->db_password)
-	free (cfg->db_password);
-      if (cfg->host)
-	free (cfg->host);
-      if (cfg->log)
-	free (cfg->log);
-      if (cfg->restrict_log)
-	free (cfg->restrict_log);
-      if (cfg->slow_queries_log)
-	free (cfg->slow_queries_log);
-      free (cfg);
-    }
+void config_free() {
+	if (cfg) {
+		if (cfg->debug_user)
+			free(cfg->debug_user);
+		if (cfg->account_limits)
+			g_hash_table_unref(cfg->account_limits);
+		if (cfg->db_login)
+			free(cfg->db_login);
+		if (cfg->db_password)
+			free(cfg->db_password);
+		if (cfg->host)
+			free(cfg->host);
+		if (cfg->log)
+			free(cfg->log);
+		if (cfg->restrict_log)
+			free(cfg->restrict_log);
+		if (cfg->slow_queries_log)
+			free(cfg->slow_queries_log);
+		free(cfg);
+	}
 }
 
-void
-config_add_work_user (const char *user_name)
-{
-  if (user_name && (user_name[0] != 0))
-    {
-      stats_limit_cfg *ptr =
-	g_hash_table_lookup (cfg->account_limits, user_name);
-      if (!ptr)
-	{
-	  stats_limit_cfg *l = calloc (1, sizeof (stats_limit_cfg));
+void config_add_work_user(const char *user_name) {
+	if (user_name && (user_name[0] != 0)) {
+		stats_limit_cfg *ptr = g_hash_table_lookup(cfg->account_limits,
+				user_name);
+		if (!ptr) {
+			stats_limit_cfg *l = calloc(1, sizeof(stats_limit_cfg));
 
-	  // inheritance of limits from default
-	  memcpy (l, &cfg->default_limit, sizeof (Stats));
+			// inheritance of limits from default
+			memcpy(l, &cfg->default_limit, sizeof(Stats));
 
-	  l->account_flag = FALSE;
-	  l->mode = IGNORE_MODE;
+			l->account_flag = FALSE;
+			l->mode = IGNORE_MODE;
 
-	  g_hash_table_replace (cfg->account_limits,
-				(gpointer) strdup (user_name), l);
+			g_hash_table_replace(cfg->account_limits,
+					(gpointer) strdup(user_name), l);
+		}
 	}
-    }
 
 }
 
 struct governor_config *
-config_init (const char *path)
-{
-  ezxml_t xml = ezxml_parse_file (path);
-  ezxml_t tmp_xml, inner_xml, tmp_xml_limit;
-  const char *error_str;
-  const char *ptr;
-
-  if (xml == NULL)
-    {
-      fprintf (stderr, "Error reading config file %s\n", path);
-      exit (-1);
-    }
-
-  if (strlen (error_str = ezxml_error (xml)))
-    {
-      fprintf (stderr, "Error in config file (%s): %s\n", path, error_str);
-      ezxml_free (xml);
-      exit (-1);
-    }
-
-  cfg = calloc (1, sizeof (struct governor_config));
-  memset (cfg, 0, sizeof (struct governor_config));
-
-  cfg->is_gpl = check_liblve();
-  cfg->account_limits = g_hash_table_new_full (g_str_hash, g_str_equal,
-					       (GDestroyNotify) free,
-					       (GDestroyNotify) free);
-
-  tmp_xml = ezxml_child (xml, "log");
-  if (tmp_xml == NULL)
-    {
-      fprintf (stderr, "No log path\n");
-      exit (-1);
-    }
-  cfg->log = strdup (ezxml_attr (tmp_xml, "file"));
-  cfg->log_mode =
-    ((ptr =
-      ezxml_attr (tmp_xml,
-		  "mode")) ==
-     NULL) ? ERROR_MODE : mode_type_str_to_enum (ptr);
-
-  tmp_xml = ezxml_child (xml, "intervals");
-  if (tmp_xml == NULL)
-    {
-      fprintf (stderr, "No 'intervals' parameter\n");
-      exit (-1);
-    }
-  cfg->interval_short =
-    ((ptr = ezxml_attr (tmp_xml, "short")) == NULL) ? 5 : atoi (ptr);
-  cfg->interval_mid =
-    ((ptr = ezxml_attr (tmp_xml, "mid")) == NULL) ? 15 : atoi (ptr);
-  cfg->interval_long =
-    ((ptr = ezxml_attr (tmp_xml, "long")) == NULL) ? 30 : atoi (ptr);
-
-  tmp_xml = ezxml_child (xml, "lve");
-  cfg->use_lve = 0;
-  cfg->all_lve = 0;
-  cfg->separate_lve = 0;
-  if(tmp_xml != NULL){
-	  if (ezxml_attr (tmp_xml, "use")){
-		  if(!strcasecmp(ezxml_attr (tmp_xml, "use"),"On") || 
-             !strcasecmp(ezxml_attr (tmp_xml, "use"),"Single")){
-			  cfg->use_lve = 1;
-		  }
-		  if(!strcasecmp(ezxml_attr (tmp_xml, "use"),"AbUsers")){
-			  cfg->use_lve = 1;
-              cfg->separate_lve = 1;
-		  }
-		  if(!strcasecmp(ezxml_attr (tmp_xml, "use"),"All")){
-			  cfg->use_lve = 1;
-			  cfg->all_lve = 1;
-			  cfg->separate_lve = 1;
-		  }
-	  }
-  }
-
-  tmp_xml = ezxml_child (xml, "statistic");
-  cfg->statistic_mode = 1;
-  cfg->save_statistic_uid = 0;
-  if( tmp_xml != NULL )
-  {
-    if( ezxml_attr( tmp_xml, "mode" ) )
-    {
-      if( !strcasecmp( ezxml_attr( tmp_xml, "mode" ), "Off" ) )
-      {
-        cfg->statistic_mode = 0;
-      }
-	}
-    if( ezxml_attr( tmp_xml, "save_uid" ) )
-    {
-      if( !strcasecmp( ezxml_attr( tmp_xml, "save_uid" ), "On" ) )
-      {
-        cfg->save_statistic_uid = 1;
-      }
-    }
-  }
-
-  tmp_xml = ezxml_child (xml, "debug_user");
-  cfg->debug_user = NULL;
-    if( tmp_xml != NULL )
-    {
-      if( ezxml_attr( tmp_xml, "name" ) )
-      {
-    	  cfg->debug_user = strdup (ezxml_attr (tmp_xml, "name"));
-  	}
-  }
-
-  tmp_xml = ezxml_child( xml, "logqueries" );
-  cfg->logqueries_use = 0;
-  if( tmp_xml != NULL )
-  {
-    if( ezxml_attr( tmp_xml, "use" ) )
-    {
-      if( !strcasecmp( ezxml_attr( tmp_xml, "use" ), "On" ) )
-      {
-        cfg->logqueries_use = 1;
-      }
-      if( !strcasecmp( ezxml_attr( tmp_xml, "use" ), "Before" ) )
-      {
-        cfg->logqueries_use = 2;
-      }
-    }
-  }
-
-  tmp_xml = ezxml_child (xml, "daemon");
-  cfg->daemon_monitor = 1;
-  if( tmp_xml != NULL )
-  {
-    if( ezxml_attr( tmp_xml, "monitor" ) )
-    {
-      if( !strcasecmp( ezxml_attr( tmp_xml, "monitor" ), "Off" ) )
-      {
-        cfg->daemon_monitor = 0;
-      }
-	}
-  }
-
-  tmp_xml = ezxml_child (xml, "slow_queries");
-  cfg->slow_queries = 0;
-  if( tmp_xml != NULL )
-  {
-    if( ezxml_attr( tmp_xml, "run" ) )
-    {
-      if( !strcasecmp( ezxml_attr( tmp_xml, "run" ), "On" ) )
-      {
-        cfg->slow_queries = 1;
-      }
-    }
-    if( ezxml_attr( tmp_xml, "log" ) )
-    {
-      cfg->slow_queries_log = strdup( ezxml_attr( tmp_xml, "log" ) );
-    }
-    else
-    {
-      cfg->slow_queries_log = NULL;
-    }
-  }
-
-  tmp_xml = ezxml_child( xml, "restrict_mode" );
-  cfg->restrict_mode = 1;
-  cfg->l_unlimit = parse_period( "60s" );
-  if( tmp_xml != NULL )
-  {
-    if( ezxml_attr( tmp_xml, "use" ) )
-    {
-      if( !strcasecmp( ezxml_attr( tmp_xml, "use" ), "period" ) )
-      {
-        cfg->restrict_mode = 0;
-      }
-    }
-    if( ( ptr = ezxml_attr( tmp_xml, "unlimit" ) ) != NULL )
-    {
-      cfg->l_unlimit = parse_period( ptr );
-    }
-  }
-
-  cfg->killuser = 0;
-  cfg->max_user_connections = 30;
-
-  tmp_xml = ezxml_child (xml, "restrict");
-  if (tmp_xml == NULL)
-    {
-      fprintf (stderr, "No 'restrict' parameter\n");
-      exit (-1);
-    }
-  if (ezxml_attr (tmp_xml, "log"))
-    {
-      cfg->restrict_log = strdup (ezxml_attr (tmp_xml, "log"));
-    }
-  else
-    {
-      cfg->restrict_log = NULL;
-    }
-
-  if(ezxml_attr (tmp_xml, "killuser")){
-         if(!strcasecmp(ezxml_attr (tmp_xml, "killuser"), "on")){
-               cfg->killuser = 1;
-         }
-    }
-
-  if(ezxml_attr (tmp_xml, "user_max_connections")){
-	  cfg->max_user_connections = atoi(ezxml_attr (tmp_xml, "user_max_connections"));
-	  if(cfg->max_user_connections<0) cfg->max_user_connections = 30;
-  }
-
-  cfg->restrict_format = getRestrictFormat (ezxml_attr (tmp_xml, "format"));
-
-  cfg->level1 =
-    ((ptr =
-      ezxml_attr (tmp_xml,
-		  "level1")) ==
-     NULL) ? parse_period ("60s") : parse_period (ptr);
-  cfg->level2 =
-    ((ptr =
-      ezxml_attr (tmp_xml,
-		  "level2")) ==
-     NULL) ? parse_period ("15m") : parse_period (ptr);
-  cfg->level3 =
-    ((ptr =
-      ezxml_attr (tmp_xml,
-		  "level3")) ==
-     NULL) ? parse_period ("1h") : parse_period (ptr);
-  cfg->level4 =
-    ((ptr =
-      ezxml_attr (tmp_xml,
-		  "level4")) ==
-     NULL) ? parse_period ("1d") : parse_period (ptr);
-  cfg->timeout =
-    ((ptr =
-      ezxml_attr (tmp_xml,
-		  "timeout")) ==
-     NULL) ? parse_period ("1h") : parse_period (ptr);
-
-  if (ezxml_attr (tmp_xml, "script"))
-    {
-      cfg->exec_script = strdup (ezxml_attr (tmp_xml, "script"));
-      if (cfg->exec_script)
-	{
-	  int status_script;
-	  struct stat buffer_script;
-	  status_script = stat (cfg->exec_script, &buffer_script);
-	  if (status_script)
-	    {
-	      fprintf (stderr, "Wrong script name - %s\n", cfg->exec_script);
-	      exit (-1);
-	    }
-	  else
-	    {
-	      if (S_ISDIR (buffer_script.st_mode))
-		{
-		  fprintf (stderr, "Script is directory - %s\n",
-			   cfg->exec_script);
-		  exit (-1);
+config_init(const char *path) {
+	ezxml_t xml = ezxml_parse_file(path);
+	ezxml_t tmp_xml, inner_xml, tmp_xml_limit;
+	const char *error_str;
+	const char *ptr;
+
+	if (xml == NULL) {
+		fprintf(stderr, "Error reading config file %s\n", path);
+		exit(-1);
+	}
+
+	if (strlen(error_str = ezxml_error(xml))) {
+		fprintf(stderr, "Error in config file (%s): %s\n", path, error_str);
+		ezxml_free(xml);
+		exit(-1);
+	}
+
+	cfg = calloc(1, sizeof(struct governor_config));
+	memset(cfg, 0, sizeof(struct governor_config));
+
+	cfg->is_gpl = check_liblve();
+	cfg->account_limits = g_hash_table_new_full(g_str_hash, g_str_equal,
+			(GDestroyNotify) free, (GDestroyNotify) free);
+
+	tmp_xml = ezxml_child(xml, "log");
+	if (tmp_xml == NULL) {
+		fprintf(stderr, "No log path\n");
+		exit(-1);
+	}
+	cfg->log = strdup(ezxml_attr(tmp_xml, "file"));
+	cfg->log_mode = ((ptr = ezxml_attr(tmp_xml, "mode")) == NULL) ? ERROR_MODE
+			: mode_type_str_to_enum(ptr);
+
+	tmp_xml = ezxml_child(xml, "intervals");
+	if (tmp_xml == NULL) {
+		fprintf(stderr, "No 'intervals' parameter\n");
+		exit(-1);
+	}
+	cfg->interval_short = ((ptr = ezxml_attr(tmp_xml, "short")) == NULL) ? 5
+			: atoi(ptr);
+	cfg->interval_mid = ((ptr = ezxml_attr(tmp_xml, "mid")) == NULL) ? 15
+			: atoi(ptr);
+	cfg->interval_long = ((ptr = ezxml_attr(tmp_xml, "long")) == NULL) ? 30
+			: atoi(ptr);
+
+	tmp_xml = ezxml_child(xml, "lve");
+	cfg->use_lve = 0;
+	cfg->all_lve = 0;
+	cfg->separate_lve = 0;
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "use")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "use"), "On") || !strcasecmp(
+					ezxml_attr(tmp_xml, "use"), "Single")) {
+				cfg->use_lve = 1;
+			}
+			if (!strcasecmp(ezxml_attr(tmp_xml, "use"), "AbUsers")) {
+				cfg->use_lve = 1;
+				cfg->separate_lve = 1;
+			}
+			if (!strcasecmp(ezxml_attr(tmp_xml, "use"), "All")) {
+				cfg->use_lve = 1;
+				cfg->all_lve = 1;
+				cfg->separate_lve = 1;
+			}
+		}
+	}
+
+	tmp_xml = ezxml_child(xml, "statistic");
+	cfg->statistic_mode = 1;
+	cfg->save_statistic_uid = 0;
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "mode")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "mode"), "Off")) {
+				cfg->statistic_mode = 0;
+			}
+		}
+		if (ezxml_attr(tmp_xml, "save_uid")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "save_uid"), "On")) {
+				cfg->save_statistic_uid = 1;
+			}
+		}
+	}
+
+	tmp_xml = ezxml_child(xml, "debug_user");
+	cfg->debug_user = NULL;
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "name")) {
+			cfg->debug_user = strdup(ezxml_attr(tmp_xml, "name"));
+		}
+	}
+
+	tmp_xml = ezxml_child(xml, "logqueries");
+	cfg->logqueries_use = 0;
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "use")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "use"), "On")) {
+				cfg->logqueries_use = 1;
+			}
+			if (!strcasecmp(ezxml_attr(tmp_xml, "use"), "Before")) {
+				cfg->logqueries_use = 2;
+			}
+		}
+	}
+
+	tmp_xml = ezxml_child(xml, "daemon");
+	cfg->daemon_monitor = 1;
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "monitor")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "monitor"), "Off")) {
+				cfg->daemon_monitor = 0;
+			}
+		}
+	}
+
+	tmp_xml = ezxml_child(xml, "slow_queries");
+	cfg->slow_queries = 0;
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "run")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "run"), "On")) {
+				cfg->slow_queries = 1;
+			}
+		}
+		if (ezxml_attr(tmp_xml, "log")) {
+			cfg->slow_queries_log = strdup(ezxml_attr(tmp_xml, "log"));
+		} else {
+			cfg->slow_queries_log = NULL;
+		}
+	}
+
+	tmp_xml = ezxml_child(xml, "restrict_mode");
+	cfg->restrict_mode = 1;
+	cfg->l_unlimit = parse_period("60s");
+	if (tmp_xml != NULL) {
+		if (ezxml_attr(tmp_xml, "use")) {
+			if (!strcasecmp(ezxml_attr(tmp_xml, "use"), "period")) {
+				cfg->restrict_mode = 0;
+			}
+		}
+		if ((ptr = ezxml_attr(tmp_xml, "unlimit")) != NULL) {
+			cfg->l_unlimit = parse_period(ptr);
+		}
+	}
+
+	cfg->killuser = 0;
+	cfg->max_user_connections = 30;
+
+	tmp_xml = ezxml_child(xml, "restrict");
+	if (tmp_xml == NULL) {
+		fprintf(stderr, "No 'restrict' parameter\n");
+		exit(-1);
+	}
+	if (ezxml_attr(tmp_xml, "log")) {
+		cfg->restrict_log = strdup(ezxml_attr(tmp_xml, "log"));
+	} else {
+		cfg->restrict_log = NULL;
+	}
+
+	if (ezxml_attr(tmp_xml, "killuser")) {
+		if (!strcasecmp(ezxml_attr(tmp_xml, "killuser"), "on")) {
+			cfg->killuser = 1;
 		}
-	    }
-	}
-    }
-  else
-    {
-      cfg->exec_script = NULL;
-    }
-
-  tmp_xml = ezxml_child (xml, "connector");
-  if (tmp_xml == NULL)
-    {
-      fprintf (stderr, "No connector parameter");
-      exit (-1);
-    }
-  cfg->db_login =
-    strdup (!ezxml_attr (tmp_xml, "login") ? "" :
-	    ezxml_attr (tmp_xml, "login"));
-  cfg->db_password =
-    strdup (!ezxml_attr (tmp_xml, "password") ? "" :
-	    ezxml_attr (tmp_xml, "password"));
-  cfg->host =
-    strdup (!ezxml_attr (tmp_xml, "host") ? "" :
-	    ezxml_attr (tmp_xml, "host"));
-  cfg->separator =
-    !ezxml_attr (tmp_xml,
-		 "prefix_separator") ? '_' : *(ezxml_attr (tmp_xml,
-							   "prefix_separator"));
-
-  tmp_xml = ezxml_child (xml, "default");
-  if (tmp_xml == NULL)
-    {
-      fprintf (stderr, "No default limits");
-      exit (-1);
-    }
-
-  cfg->default_limit.mode = RESTRICT_MODE;
-
-  for (tmp_xml_limit = ezxml_child (tmp_xml, "limit"); tmp_xml_limit;
-       tmp_xml_limit = tmp_xml_limit->next)
-    {
-      set_stats_limit (tmp_xml_limit, &cfg->default_limit);
-    }
-  cfg->default_limit.mode = RESTRICT_MODE;
-  cfg->default_limit.account_flag = true;
-
-  for (tmp_xml = ezxml_child (xml, "user"); tmp_xml; tmp_xml = tmp_xml->next)
-    {
-      const char *account = ezxml_attr (tmp_xml, "name");
-      const char *mysql_name = ezxml_attr (tmp_xml, "mysql_name");
-      if ((account == NULL) && (mysql_name == NULL))
-	{
-	  fprintf (stderr,
-		   "Error: both 'name' and 'mysql_name' attributes are absent\n");
-	  exit (-1);
-	}
-      if ((account != NULL) && (mysql_name != NULL))
-	{
-	  fprintf (stderr,
-		   "Error: both 'name' and 'mysql_name' attributes are present\n");
-	  exit (-1);
-	}
-      stats_limit_cfg *l = calloc (1, sizeof (stats_limit_cfg));
-
-      // inheritance of limits from default
-      memcpy (l, &cfg->default_limit, sizeof (stats_limit_cfg));
-
-      l->account_flag = account != NULL;
-      l->mode =
-	((ptr =
-	  ezxml_attr (tmp_xml,
-		      "mode")) ==
-	 NULL) ? RESTRICT_MODE : mode_type_str_to_enum (ptr);
-      for (tmp_xml_limit = ezxml_child (tmp_xml, "limit"); tmp_xml_limit;
-	   tmp_xml_limit = tmp_xml_limit->next)
-	{
-	  set_stats_limit (tmp_xml_limit, l);
-	}
-      g_hash_table_replace (cfg->account_limits,
-			    (gpointer) strdup ((account == NULL) ? mysql_name
-					       : account), l);
-    }
-
-  if (save_duplicate_config(xml)) {
-    fprintf(stderr, "Error save duplicate config file %s\n", DUPLICATE_CONFIG_PATH);
-  }
-
-  ezxml_free (xml);
-  return cfg;
+	}
+
+	if (ezxml_attr(tmp_xml, "user_max_connections")) {
+		cfg->max_user_connections = atoi(
+				ezxml_attr(tmp_xml, "user_max_connections"));
+		if (cfg->max_user_connections < 0)
+			cfg->max_user_connections = 30;
+	}
+
+	cfg->restrict_format = getRestrictFormat(ezxml_attr(tmp_xml, "format"));
+
+	cfg->level1
+			= ((ptr = ezxml_attr(tmp_xml, "level1")) == NULL) ? parse_period(
+					"60s") : parse_period(ptr);
+	cfg->level2
+			= ((ptr = ezxml_attr(tmp_xml, "level2")) == NULL) ? parse_period(
+					"15m") : parse_period(ptr);
+	cfg->level3
+			= ((ptr = ezxml_attr(tmp_xml, "level3")) == NULL) ? parse_period(
+					"1h") : parse_period(ptr);
+	cfg->level4
+			= ((ptr = ezxml_attr(tmp_xml, "level4")) == NULL) ? parse_period(
+					"1d") : parse_period(ptr);
+	cfg->timeout
+			= ((ptr = ezxml_attr(tmp_xml, "timeout")) == NULL) ? parse_period(
+					"1h") : parse_period(ptr);
+
+	if (ezxml_attr(tmp_xml, "script")) {
+		cfg->exec_script = strdup(ezxml_attr(tmp_xml, "script"));
+		if (cfg->exec_script) {
+			if (!cfg->exec_script[0]) {
+				free(cfg->exec_script);
+				cfg->exec_script = NULL;
+			} else {
+				int status_script;
+				struct stat buffer_script;
+				status_script = stat(cfg->exec_script, &buffer_script);
+				if (status_script) {
+					fprintf(stderr,
+							"Wrong script name - %s. Work without script\n",
+							cfg->exec_script);
+					free(cfg->exec_script);
+					cfg->exec_script = NULL;
+				} else {
+					if (S_ISDIR (buffer_script.st_mode)) {
+						fprintf(stderr, "Script is directory - %s\n",
+								cfg->exec_script);
+						free(cfg->exec_script);
+						cfg->exec_script = NULL;
+					}
+				}
+			}
+		}
+	} else {
+		cfg->exec_script = NULL;
+	}
+
+	tmp_xml = ezxml_child(xml, "connector");
+	if (tmp_xml == NULL) {
+		fprintf(stderr, "No connector parameter");
+		exit(-1);
+	}
+	cfg->db_login = strdup(
+			!ezxml_attr(tmp_xml, "login") ? "" : ezxml_attr(tmp_xml, "login"));
+	cfg->db_password = strdup(
+			!ezxml_attr(tmp_xml, "password") ? "" : ezxml_attr(tmp_xml,
+					"password"));
+	cfg->host = strdup(
+			!ezxml_attr(tmp_xml, "host") ? "" : ezxml_attr(tmp_xml, "host"));
+	cfg->separator = !ezxml_attr(tmp_xml, "prefix_separator") ? '_'
+			: *(ezxml_attr(tmp_xml, "prefix_separator"));
+
+	tmp_xml = ezxml_child(xml, "default");
+	if (tmp_xml == NULL) {
+		fprintf(stderr, "No default limits");
+		exit(-1);
+	}
+
+	cfg->default_limit.mode = RESTRICT_MODE;
+
+	for (tmp_xml_limit = ezxml_child(tmp_xml, "limit"); tmp_xml_limit; tmp_xml_limit
+			= tmp_xml_limit->next) {
+		set_stats_limit(tmp_xml_limit, &cfg->default_limit);
+	}
+	cfg->default_limit.mode = RESTRICT_MODE;
+	cfg->default_limit.account_flag = true;
+
+	for (tmp_xml = ezxml_child(xml, "user"); tmp_xml; tmp_xml = tmp_xml->next) {
+		const char *account = ezxml_attr(tmp_xml, "name");
+		const char *mysql_name = ezxml_attr(tmp_xml, "mysql_name");
+		if ((account == NULL) && (mysql_name == NULL)) {
+			fprintf(stderr,
+					"Error: both 'name' and 'mysql_name' attributes are absent\n");
+			exit(-1);
+		}
+		if ((account != NULL) && (mysql_name != NULL)) {
+			fprintf(stderr,
+					"Error: both 'name' and 'mysql_name' attributes are present\n");
+			exit(-1);
+		}
+		stats_limit_cfg *l = calloc(1, sizeof(stats_limit_cfg));
+
+		// inheritance of limits from default
+		memcpy(l, &cfg->default_limit, sizeof(stats_limit_cfg));
+
+		l->account_flag = account != NULL;
+		l->mode = ((ptr = ezxml_attr(tmp_xml, "mode")) == NULL) ? RESTRICT_MODE
+				: mode_type_str_to_enum(ptr);
+		for (tmp_xml_limit = ezxml_child(tmp_xml, "limit"); tmp_xml_limit; tmp_xml_limit
+				= tmp_xml_limit->next) {
+			set_stats_limit(tmp_xml_limit, l);
+		}
+		g_hash_table_replace(cfg->account_limits,
+				(gpointer) strdup((account == NULL) ? mysql_name : account), l);
+	}
+
+	if (save_duplicate_config(xml)) {
+		fprintf(stderr, "Error save duplicate config file %s\n",
+				DUPLICATE_CONFIG_PATH);
+	}
+
+	ezxml_free(xml);
+	return cfg;
 }
 
 /**
  * Save duplicate config file without connector tag
  */
 int save_duplicate_config(ezxml_t xml) {
-  ezxml_t tmp_xml;
-  tmp_xml = ezxml_child (xml, "connector");
-  if (tmp_xml != NULL) {
-    ezxml_remove(tmp_xml);
-  } else {
-    fprintf(stderr, "No connector tag in xml struct\n");
-  }
-
-  FILE *db_governor_cfg;
-  if ((db_governor_cfg = fopen(DUPLICATE_CONFIG_PATH, "w+")) == NULL) {
-    fprintf(stderr, "Error reading config file %s\n", DUPLICATE_CONFIG_PATH);
-    return 1;
-  }
-
-  char *str = ezxml_toxml(xml);
-  fwrite(str, 1, strlen(str), db_governor_cfg);
-  fclose(db_governor_cfg);
-  return 0;
+	ezxml_t tmp_xml;
+	tmp_xml = ezxml_child(xml, "connector");
+	if (tmp_xml != NULL) {
+		ezxml_remove(tmp_xml);
+	} else {
+		fprintf(stderr, "No connector tag in xml struct\n");
+	}
+
+	FILE *db_governor_cfg;
+	if ((db_governor_cfg = fopen(DUPLICATE_CONFIG_PATH, "w+")) == NULL) {
+		fprintf(stderr, "Error reading config file %s\n", DUPLICATE_CONFIG_PATH);
+		return 1;
+	}
+
+	char *str = ezxml_toxml(xml);
+	fwrite(str, 1, strlen(str), db_governor_cfg);
+	fclose(db_governor_cfg);
+	return 0;
 }
 
-struct governor_config * get_config(){
+struct governor_config * get_config() {
 	return cfg;
 }
 
-void get_config_data( struct governor_config *data )
-{
-  int rc;
+void get_config_data(struct governor_config *data) {
+	int rc;
 
-  rc = pthread_rwlock_rdlock( &rwlock );
-  *data = *cfg;
-  rc = pthread_rwlock_unlock( &rwlock );
+	rc = pthread_rwlock_rdlock(&rwlock);
+	*data = *cfg;
+	rc = pthread_rwlock_unlock(&rwlock);
 }
 
-MODE_TYPE get_config_log_mode()
-{
-  int rc;
-  MODE_TYPE _log_mode;
+MODE_TYPE get_config_log_mode() {
+	int rc;
+	MODE_TYPE _log_mode;
 
-  rc = pthread_rwlock_rdlock( &rwlock );
-  _log_mode = cfg->log_mode;
-  rc = pthread_rwlock_unlock( &rwlock );
+	rc = pthread_rwlock_rdlock(&rwlock);
+	_log_mode = cfg->log_mode;
+	rc = pthread_rwlock_unlock(&rwlock);
 
-  return _log_mode;
+	return _log_mode;
 }
 
-void reread_config()
-{
-  int rc;
+void reread_config() {
+	int rc;
 
-  rc = pthread_rwlock_wrlock( &rwlock );
-  config_free();
-  config_init( CONFIG_PATH );
-  rc = pthread_rwlock_unlock( &rwlock );
+	rc = pthread_rwlock_wrlock(&rwlock);
+	config_free();
+	config_init(CONFIG_PATH);
+	rc = pthread_rwlock_unlock(&rwlock);
 }
 
-void config_destroy_lock()
-{
-  pthread_rwlock_destroy( &rwlock );
-  pthread_rwlock_init( &rwlock, NULL );
+void config_destroy_lock() {
+	pthread_rwlock_destroy(&rwlock);
+	pthread_rwlock_init(&rwlock, NULL);
 }
 
-int check_liblve()
-{
-  void *lve_library_handle = NULL;
-  
-  lve_library_handle = dlopen( "liblve.so.0", RTLD_LAZY );
-  if( lve_library_handle )
-  {
-    dlclose( lve_library_handle );
-    return 0;
-  }
-  else
-  {
-    return 1;
-  }
+int check_liblve() {
+	void *lve_library_handle = NULL;
+
+	lve_library_handle = dlopen("liblve.so.0", RTLD_LAZY);
+	if (lve_library_handle) {
+		dlclose(lve_library_handle);
+		return 0;
+	} else {
+		return 1;
+	}
 }
diff --git a/src/log-decoder.c b/src/log-decoder.c
index e06968a..bade260 100644
--- a/src/log-decoder.c
+++ b/src/log-decoder.c
@@ -22,164 +22,141 @@
 extern struct governor_config *cfg;
 
 /*Получить значение лимита, по которому произвелось ограничение*/
-long
-getLimitValuePeriod (Account * ac, T_LONG lm)
-{
-  switch (ac->info.field_restrict)
-    {
-    case CURRENT_PERIOD:
-      return lm._current;
-    case SHORT_PERIOD:
-      return lm._short;
-    case MID_PERIOD:
-      return lm._mid;
-    case LONG_PERIOD:
-      return lm._long;
-    default:
-      return -1;
-    };
+long getLimitValuePeriod(Account * ac, T_LONG lm) {
+	switch (ac->info.field_restrict) {
+	case CURRENT_PERIOD:
+		return lm._current;
+	case SHORT_PERIOD:
+		return lm._short;
+	case MID_PERIOD:
+		return lm._mid;
+	case LONG_PERIOD:
+		return lm._long;
+	default:
+		return -1;
+	};
 }
 
 /*Получить значение параметра по которому произошло ограничение*/
-long long
-getRestrictValue (Account * ac)
-{
-  switch (ac->info.field_restrict)
-    {
-    case CURRENT_PERIOD:
-      return getCurrentRestrictValue (ac);
-    case SHORT_PERIOD:
-      return getShortRestrictValue (ac);
-    case MID_PERIOD:
-      return getMidRestrictValue (ac);
-    case LONG_PERIOD:
-      return getLongRestrictValue (ac);
-    };
-  return -1;
+long long getRestrictValue(Account * ac) {
+	switch (ac->info.field_restrict) {
+	case CURRENT_PERIOD:
+		return getCurrentRestrictValue(ac);
+	case SHORT_PERIOD:
+		return getShortRestrictValue(ac);
+	case MID_PERIOD:
+		return getMidRestrictValue(ac);
+	case LONG_PERIOD:
+		return getLongRestrictValue(ac);
+	};
+	return -1;
 }
 
 /*Получить значение параметра текущего периода*/
-long long
-getCurrentRestrictValue (Account * ac)
-{
-  switch (ac->info.field_level_restrict)
-    {
-    case CPU_PARAM:
-      return (long long)ceil(ac->current.cpu * 100.0);
-    case READ_PARAM:
-      return ac->current.read;
-    case WRITE_PARAM:
-      return ac->current.write;
-    default:
-      return -1;
-    }
+long long getCurrentRestrictValue(Account * ac) {
+	switch (ac->info.field_level_restrict) {
+	case CPU_PARAM:
+		return (long long) ceil(ac->current.cpu * 100.0);
+	case READ_PARAM:
+		return ac->current.read;
+	case WRITE_PARAM:
+		return ac->current.write;
+	default:
+		return -1;
+	}
 }
 
 /*Получить значение параметра короткого периода*/
-long long
-getShortRestrictValue (Account * ac)
-{
-  switch (ac->info.field_level_restrict)
-    {
-    case CPU_PARAM:
-      return (long long)ceil(ac->short_average.cpu * 100.0);
-    case READ_PARAM:
-      return ac->short_average.read;
-    case WRITE_PARAM:
-      return ac->short_average.write;
-    default:
-      return -1;
-    }
+long long getShortRestrictValue(Account * ac) {
+	switch (ac->info.field_level_restrict) {
+	case CPU_PARAM:
+		return (long long) ceil(ac->short_average.cpu * 100.0);
+	case READ_PARAM:
+		return ac->short_average.read;
+	case WRITE_PARAM:
+		return ac->short_average.write;
+	default:
+		return -1;
+	}
 }
 
 /*Получить значение параметра среднего периода*/
-long long
-getMidRestrictValue (Account * ac)
-{
-  switch (ac->info.field_level_restrict)
-    {
-    case CPU_PARAM:
-      return (long long)ceil(ac->mid_average.cpu * 100.0);
-    case READ_PARAM:
-      return ac->mid_average.read;
-    case WRITE_PARAM:
-      return ac->mid_average.write;
-    default:
-      return -1;
-    }
+long long getMidRestrictValue(Account * ac) {
+	switch (ac->info.field_level_restrict) {
+	case CPU_PARAM:
+		return (long long) ceil(ac->mid_average.cpu * 100.0);
+	case READ_PARAM:
+		return ac->mid_average.read;
+	case WRITE_PARAM:
+		return ac->mid_average.write;
+	default:
+		return -1;
+	}
 }
 
 /*Получить значение параметра длинного периода*/
-long long
-getLongRestrictValue (Account * ac)
-{
-  switch (ac->info.field_level_restrict)
-    {
-    case CPU_PARAM:
-      return (long long)ceil(ac->long_average.cpu * 100.0);
-    case READ_PARAM:
-      return ac->long_average.read;
-    case WRITE_PARAM:
-      return ac->long_average.write;
-    default:
-      return -1;
-    }
+long long getLongRestrictValue(Account * ac) {
+	switch (ac->info.field_level_restrict) {
+	case CPU_PARAM:
+		return (long long) ceil(ac->long_average.cpu * 100.0);
+	case READ_PARAM:
+		return ac->long_average.read;
+	case WRITE_PARAM:
+		return ac->long_average.write;
+	default:
+		return -1;
+	}
 }
 
 /*Получить значение лимита по которому прошел рестрикт*/
-long
-getLimitValue (Account * ac, stats_limit_cfg * lm)
-{
-  switch (ac->info.field_level_restrict)
-    {
-    case CPU_PARAM:
-      return getLimitValuePeriod (ac, lm->cpu);
-    case READ_PARAM:
-      return getLimitValuePeriod (ac, lm->read);
-    case WRITE_PARAM:
-      return getLimitValuePeriod (ac, lm->write);
-    default:
-      return -1;
-    }
+long getLimitValue(Account * ac, stats_limit_cfg * lm) {
+	switch (ac->info.field_level_restrict) {
+	case CPU_PARAM:
+		return getLimitValuePeriod(ac, lm->cpu);
+	case READ_PARAM:
+		return getLimitValuePeriod(ac, lm->read);
+	case WRITE_PARAM:
+		return getLimitValuePeriod(ac, lm->write);
+	default:
+		return -1;
+	}
 }
 
-void getPeriodName(char *ch, Account * ac){
-	switch (ac->info.field_restrict)
-		{
-		case CURRENT_PERIOD:
-		  strcpy (ch, "current value");
-		  break;
-		case SHORT_PERIOD:
-		  strcpy (ch, "short av.value");
-		  break;
-		case MID_PERIOD:
-		  strcpy (ch, "middle av.value");
-		  break;
-		case LONG_PERIOD:
-		  strcpy (ch, "long av.value");
-		  break;
-		default:
-		  strcpy (ch, "undef");
-		  break;
-		};
+void getPeriodName(char *ch, Account * ac) {
+	switch (ac->info.field_restrict) {
+	case CURRENT_PERIOD:
+		strcpy(ch, "current value");
+		break;
+	case SHORT_PERIOD:
+		strcpy(ch, "short av.value");
+		break;
+	case MID_PERIOD:
+		strcpy(ch, "middle av.value");
+		break;
+	case LONG_PERIOD:
+		strcpy(ch, "long av.value");
+		break;
+	default:
+		strcpy(ch, "undef");
+		break;
+	};
 }
 
-void getParamName(char *buffer, Account * ac){
-	switch (ac->info.field_level_restrict)
-		{
-		case CPU_PARAM:
-		  strcpy (buffer, "cpu");
-		  break;
-		case READ_PARAM:
-		  strcpy (buffer, "read");
-		  break;
-		case WRITE_PARAM:
-		  strcpy(buffer, "write");
-		  break;
-		default:
-		  strcpy(buffer, "manual");
-		  break;
-		}
+void getParamName(char *buffer, Account * ac) {
+	switch (ac->info.field_level_restrict) {
+	case CPU_PARAM:
+		strcpy(buffer, "cpu");
+		break;
+	case READ_PARAM:
+		strcpy(buffer, "read");
+		break;
+	case WRITE_PARAM:
+		strcpy(buffer, "write");
+		break;
+	default:
+		strcpy(buffer, "manual");
+		break;
+	}
 }
 
 void insertSystemInfo(char *buffer) {
@@ -193,80 +170,69 @@ void insertSystemInfo(char *buffer) {
 	strlcpy(buffer, innerBuffer, _DBGOVERNOR_BUFFER_8192);
 }
 
-void
-prepareRestrictDescription (char *buffer, Account * ac,
-			    stats_limit_cfg * limit)
-{
-  char ch[32];
-  char varName[_DBGOVERNOR_BUFFER_128];
-  strcpy (buffer, "");
-  if (ac->info.field_restrict==NO_PERIOD)
-    {
-      strcpy (buffer, "unrestrict");
-      if (cfg->restrict_format >= 2)
-	insertSystemInfo (buffer);
-      return;
-    }
-  else
-    {
-
-	  getPeriodName(ch, ac);
-	  getParamName(varName, ac);
-	  sprintf (buffer,
-		   "%s LIMIT_ENFORCED period %s, field %s value %llu/limit %ld restrict level %d",
-		   ac->id, ch, varName, getRestrictValue (ac),
-		   getLimitValue (ac, limit), ac->restricted + 1);
-      if (cfg->restrict_format >= 2){
-    	  insertSystemInfo (buffer);
-      }
-      return;
-    }
+void prepareRestrictDescription(char *buffer, Account * ac,
+		stats_limit_cfg * limit) {
+	char ch[32];
+	char varName[_DBGOVERNOR_BUFFER_128];
+	strcpy(buffer, "");
+	if (ac->info.field_restrict == NO_PERIOD) {
+		strcpy(buffer, "unrestrict");
+		if (cfg->restrict_format >= 2)
+			insertSystemInfo(buffer);
+		return;
+	} else {
+
+		getPeriodName(ch, ac);
+		getParamName(varName, ac);
+		sprintf(
+				buffer,
+				"%s LIMIT_ENFORCED period %s, field %s value %llu/limit %ld restrict level %d",
+				ac->id, ch, varName, (unsigned long long)getRestrictValue(ac),
+				getLimitValue(ac, limit), ac->restricted + 1);
+		if (cfg->restrict_format >= 2) {
+			insertSystemInfo(buffer);
+		}
+		return;
+	}
 }
 
-void
-prepareRestrictDescriptionLimit (char *buffer, Account * ac,
-			    stats_limit_cfg * limit)
-{
-  char ch[32];
-  char varName[_DBGOVERNOR_BUFFER_128];
-  strcpy (buffer, "");
-  if (ac->info.field_restrict==NO_PERIOD)
-    {
-      strcpy (buffer, "unrestrict");
-      if (cfg->restrict_format >= 2)
-	insertSystemInfo (buffer);
-      return;
-    }
-  else
-    {
-
-	  getPeriodName(ch, ac);
-	  getParamName(varName, ac);
-	  sprintf (buffer,
-		   "%s LIMIT_ENFORCED period %s, field %s value %llu/limit %ld",
-		   ac->id, ch, varName, getRestrictValue (ac),
-		   getLimitValue (ac, limit));
-      if (cfg->restrict_format >= 2){
-    	  insertSystemInfo (buffer);
-      }
-      return;
-    }
+void prepareRestrictDescriptionLimit(char *buffer, Account * ac,
+		stats_limit_cfg * limit) {
+	char ch[32];
+	char varName[_DBGOVERNOR_BUFFER_128];
+	strcpy(buffer, "");
+	if (ac->info.field_restrict == NO_PERIOD) {
+		strcpy(buffer, "unrestrict");
+		if (cfg->restrict_format >= 2)
+			insertSystemInfo(buffer);
+		return;
+	} else {
+
+		getPeriodName(ch, ac);
+		getParamName(varName, ac);
+		sprintf(buffer,
+				"%s LIMIT_ENFORCED period %s, field %s value %llu/limit %ld",
+				ac->id, ch, varName, (unsigned long long)getRestrictValue(ac),
+				getLimitValue(ac, limit));
+		if (cfg->restrict_format >= 2) {
+			insertSystemInfo(buffer);
+		}
+		return;
+	}
 }
 
 /*Получить соответсвующий периоду список параметров, т.н дамп*/
 stats_limit *
-getRestrictDump(Account * ac)
-{
-  switch (ac->info.field_restrict)
-    {
-    case CURRENT_PERIOD:
-      return (stats_limit *)&ac->current;
-    case SHORT_PERIOD:
-      return (stats_limit *)&ac->short_average;
-    case MID_PERIOD:
-      return (stats_limit *)&ac->mid_average;
-    case LONG_PERIOD:
-      return (stats_limit *)&ac->long_average;
-    };
-  return (stats_limit *)NULL;
+getRestrictDump(Account * ac) {
+	switch (ac->info.field_restrict) {
+	case CURRENT_PERIOD:
+		return (stats_limit *) &ac->current;
+	case SHORT_PERIOD:
+		return (stats_limit *) &ac->short_average;
+	case MID_PERIOD:
+		return (stats_limit *) &ac->mid_average;
+	case LONG_PERIOD:
+		return (stats_limit *) &ac->long_average;
+	};
+	return (stats_limit *) NULL;
 }
diff --git a/src/log.c b/src/log.c
index 487dce7..5ca0f46 100644
--- a/src/log.c
+++ b/src/log.c
@@ -19,14 +19,9 @@
 #include "governor_config.h"
 #include "log.h"
 
-static char *mode_type_enum_to_str[] = { "TEST_MODE",
-  "PRODUCTION_MODE",
-  "DEBUG_MODE",
-  "ERROR_MODE",
-  "RESTRICT_MODE",
-  "NORESTRICT_MODE",
-  "IGNORE_MODE"
-};
+static char *mode_type_enum_to_str[] = { "TEST_MODE", "PRODUCTION_MODE",
+		"DEBUG_MODE", "ERROR_MODE", "RESTRICT_MODE", "NORESTRICT_MODE",
+		"IGNORE_MODE" };
 
 static FILE *log = NULL, *restrict_log = NULL, *slow_queries_log = NULL;
 
@@ -150,15 +145,13 @@ static void print_double(FILE * f, double val) {
 	fprintf(f, "= %f, ", val);
 }
 
-void
-print_stats_easy (FILE * f, stats_limit * s)
-{
-  fprintf (f, "cpu ");
-  print_double (f, s->cpu);
-  fprintf (f, "read ");
-  print_long (f, s->read);
-  fprintf (f, "write ");
-  print_long_last (f, s->write);
+void print_stats_easy(FILE * f, stats_limit * s) {
+	fprintf(f, "cpu ");
+	print_double(f, s->cpu);
+	fprintf(f, "read ");
+	print_long(f, s->read);
+	fprintf(f, "write ");
+	print_long_last(f, s->write);
 }
 
 int write_restrict_log(const char *error_string, Stats * limits) {
@@ -169,8 +162,8 @@ int write_restrict_log(const char *error_string, Stats * limits) {
 	time_t rawtime;
 	struct tm timeinfo;
 	int rc;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	time(&rawtime);
 	if (!localtime_r(&rawtime, &timeinfo))
@@ -201,8 +194,8 @@ int write_slow_queries_log(const char *error_string) {
 	time_t rawtime;
 	struct tm timeinfo;
 	int rc;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	time(&rawtime);
 	if (!localtime_r(&rawtime, &timeinfo))
@@ -245,13 +238,13 @@ void print_stats_cfg(FILE * f, stats_limit_cfg * s) {
 
 static void print_account_limits(gpointer key, gpointer value,
 		gpointer user_data) {
-	fprintf(log, "%s -- ", (char *)key);
+	fprintf(log, "%s -- ", (char *) key);
 	print_stats(log, value);
 	fprintf(log, "\n");
 }
 
 void print_config(void *icfg) {
-	struct governor_config *cfg = (struct governor_config *)icfg;
+	struct governor_config *cfg = (struct governor_config *) icfg;
 	if ((cfg->log_mode == DEBUG_MODE) && (log != NULL)) {
 		fprintf(log, "db_login %s\n", cfg->db_login);
 		fprintf(log, "db_password %s\n", cfg->db_password);
@@ -260,39 +253,37 @@ void print_config(void *icfg) {
 		fprintf(log, "log_mode %s\n", mode_type_enum_to_str[cfg->log_mode]);
 		fprintf(log, "restrict_log %s\n", cfg->restrict_log);
 		fprintf(log, "separator %c\n", cfg->separator);
-		fprintf(log, "level1 %u, level2 %u, level3 %u, level4 %u\n", cfg->level1,
-				cfg->level2, cfg->level3, cfg->level4);
+		fprintf(log, "level1 %u, level2 %u, level3 %u, level4 %u\n",
+				cfg->level1, cfg->level2, cfg->level3, cfg->level4);
 		fprintf(log, "timeout %u\n", cfg->timeout);
 		fprintf(log, "interval_short %u\n", cfg->interval_short);
 		fprintf(log, "interval_mid %u\n", cfg->interval_mid);
 		fprintf(log, "interval_long %u\n", cfg->interval_long);
-		fprintf(log, "restrict log format %d\n", cfg->restrict_format);
+		fprintf(log, "restrict log format %u\n", cfg->restrict_format);
 
 		fprintf(log, "\ndefault\n");
 		print_stats_cfg(log, &cfg->default_limit);
 
-		g_hash_table_foreach(cfg->account_limits, (GHFunc) print_account_limits,
-				"");
+		g_hash_table_foreach(cfg->account_limits,
+				(GHFunc) print_account_limits, "");
 		fprintf(log, "\n");
 	}
 }
 
-int
-write_restrict_log_second_line (const char *error_string, int need_end_line)
-{
-  int rc;
+int write_restrict_log_second_line(const char *error_string, int need_end_line) {
+	int rc;
 
-  rc = fprintf (restrict_log, "%s", error_string);
+	rc = fprintf(restrict_log, "%s", error_string);
 
-  if (rc < 0)
-    return EIO;
+	if (rc < 0)
+		return EIO;
 
-  if (need_end_line)
-    fprintf (restrict_log, "\n");
+	if (need_end_line)
+		fprintf(restrict_log, "\n");
 
-  if (fflush (restrict_log))
-    return errno;
+	if (fflush(restrict_log))
+		return errno;
 
-  return 0;
+	return 0;
 }
 
diff --git a/src/mysql_connector_common.c b/src/mysql_connector_common.c
index 13095bf..8263d9d 100644
--- a/src/mysql_connector_common.c
+++ b/src/mysql_connector_common.c
@@ -87,16 +87,15 @@ int db_connect_common(MYSQL ** internal_db, const char *host,
 	int db_connection_method = 0;
 	my_bool reconnect = 1;
 
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	//Prepare local options name for default access with name and password from my.cnf, .my.cnf
 	struct option long_options[] = { { "host", optional_argument, NULL, 'r' },
-					 { "user", optional_argument, NULL, 'g' }, 
-					 { "password", optional_argument, NULL, 'j' }, 
-					 { "pass", optional_argument, NULL, 'i' }, 
-					 { "socket", optional_argument, NULL, 'S' }, 
-					 { 0, 0, 0, 0 } };
+			{ "user", optional_argument, NULL, 'g' }, { "password",
+					optional_argument, NULL, 'j' }, { "pass",
+					optional_argument, NULL, 'i' }, { "socket",
+					optional_argument, NULL, 'S' }, { 0, 0, 0, 0 } };
 
 	if (*internal_db != NULL) {
 		//Already connected
@@ -121,7 +120,7 @@ int db_connect_common(MYSQL ** internal_db, const char *host,
 		case 'S':
 			unix_socket_address = optarg;
 			break;
-                case 'r':
+		case 'r':
 			hst = optarg;
 			break;
 		case 'g':
@@ -174,50 +173,57 @@ int db_connect_common(MYSQL ** internal_db, const char *host,
 		} else {
 			//Сохраним праматеры с которыми успешно соединились
 			if (save_global) {
-				strlcpy(global_user_name, (user?user:""), _DBGOVERNOR_BUFFER_128);
-				strlcpy(global_host, (host?host:""), _DBGOVERNOR_BUFFER_512);
-				strlcpy(global_user_password, (password?password:""), _DBGOVERNOR_BUFFER_256);
-				strlcpy(global_db_name, (db_name?db_name:""), _DBGOVERNOR_BUFFER_512);
+				strlcpy(global_user_name, (user ? user : ""),
+						_DBGOVERNOR_BUFFER_128);
+				strlcpy(global_host, (host ? host : ""), _DBGOVERNOR_BUFFER_512);
+				strlcpy(global_user_password, (password ? password : ""),
+						_DBGOVERNOR_BUFFER_256);
+				strlcpy(global_db_name, (db_name ? db_name : ""),
+						_DBGOVERNOR_BUFFER_512);
 			}
 		}
 	} else {
 		//Сохраним праматеры с которыми успешно соединились
 		if (save_global) {
-			strlcpy(global_user_name, (user_name?user_name:""), _DBGOVERNOR_BUFFER_128);
-			strlcpy(global_host, (host?host:""), _DBGOVERNOR_BUFFER_512);
-			strlcpy(global_user_password, (user_password?user_password:""), _DBGOVERNOR_BUFFER_256);
-			strlcpy(global_db_name, (db_name?db_name:""), _DBGOVERNOR_BUFFER_512);
+			strlcpy(global_user_name, (user_name ? user_name : ""),
+					_DBGOVERNOR_BUFFER_128);
+			strlcpy(global_host, (host ? host : ""), _DBGOVERNOR_BUFFER_512);
+			strlcpy(global_user_password, (user_password ? user_password : ""),
+					_DBGOVERNOR_BUFFER_256);
+			strlcpy(global_db_name, (db_name ? db_name : ""),
+					_DBGOVERNOR_BUFFER_512);
 		}
 	}
 	return 0;
 }
 
-static int local_reconnect(MYSQL **mysql_internal,	MODE_TYPE debug_mode){
+static int local_reconnect(MYSQL **mysql_internal, MODE_TYPE debug_mode) {
 	char buf[_DBGOVERNOR_BUFFER_512];
 	struct governor_config data_cfg;
-	get_config_data( &data_cfg );
+	get_config_data(&data_cfg);
 	char *unm = NULL;
 	char *upwd = NULL;
 	(*_mysql_close)(*mysql_internal);
 	*mysql_internal = NULL;
 
-	* mysql_internal = (*_mysql_init)(NULL);
+	*mysql_internal = (*_mysql_init)(NULL);
 	if (*mysql_internal == NULL) {
-			WRITE_LOG(NULL, 0, buf, _DBGOVERNOR_BUFFER_512,
-					"Can't init mysql structure(on reconnect)",
-					data_cfg.log_mode);
-			return -1;
+		WRITE_LOG(NULL, 0, buf, _DBGOVERNOR_BUFFER_512,
+				"Can't init mysql structure(on reconnect)",
+				data_cfg.log_mode);
+		return -1;
 	}
 
-	if(global_user_name[0]) unm = global_user_name;
-	if(global_user_password[0]) upwd = global_user_password;
+	if (global_user_name[0])
+		unm = global_user_name;
+	if (global_user_password[0])
+		upwd = global_user_password;
 	my_bool reconnect = 1;
 	//Авторекоонет - подключить
 	(*_mysql_options)(*mysql_internal, MYSQL_OPT_RECONNECT, &reconnect);
 	//Еще разок соединимся
-	if (!(*_mysql_real_connect)(*mysql_internal, global_host,
-			unm, upwd, global_db_name, 0,
-			unix_socket_address, 0)) {
+	if (!(*_mysql_real_connect)(*mysql_internal, global_host, unm, upwd,
+			global_db_name, 0, unix_socket_address, 0)) {
 		return -1;
 	}
 	return 0;
@@ -227,14 +233,14 @@ static int local_reconnect(MYSQL **mysql_internal,	MODE_TYPE debug_mode){
 int db_mysql_exec_query(const char *query, MYSQL ** mysql_internal,
 		MODE_TYPE debug_mode) {
 	char buf[_DBGOVERNOR_BUFFER_2048];
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	//Проверим наличие соединения, а вдруг пропало
 	if ((*_mysql_ping)(*mysql_internal)) {
 		//База действительно ушла прочь, что даже реконнект не помог
 
-		if(local_reconnect(mysql_internal, debug_mode)<0){
+		if (local_reconnect(mysql_internal, debug_mode) < 0) {
 			return -1;
 		}
 	}
@@ -270,14 +276,14 @@ void db_close_kill() {
 	}
 }
 
-void db_close_command(){
+void db_close_command() {
 	if (mysql_do_command != NULL) {
 		(*_mysql_close)(mysql_do_command);
 		mysql_do_command = NULL;
 	}
 }
 
-void db_close_send(){
+void db_close_send() {
 	if (mysql_send_governor != NULL) {
 		(*_mysql_close)(mysql_send_governor);
 		mysql_send_governor = NULL;
@@ -295,18 +301,17 @@ int db_close() {
 //Unfreaze all accounts.
 void unfreaze_all(MODE_TYPE debug_mode) {
 	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
-	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_2048-1,
+	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_2048 - 1,
 			QUERY_USER_CONN_LIMIT_UNFREEZE, (unsigned long) -1);
-	if (db_mysql_exec_query(sql_buffer, &mysql_do_command,
-			debug_mode))
+	if (db_mysql_exec_query(sql_buffer, &mysql_do_command, debug_mode))
 		return;
 	flush_user_priv(debug_mode);
 }
 
 //Unfreaze all accounts.
 void unfreaze_lve(MODE_TYPE debug_mode) {
-	if (db_mysql_exec_query(QUERY_USER_CONN_LIMIT_UNFREEZE_LVE, &mysql_do_command,
-			debug_mode))
+	if (db_mysql_exec_query(QUERY_USER_CONN_LIMIT_UNFREEZE_LVE,
+			&mysql_do_command, debug_mode))
 		return;
 	flush_user_priv(debug_mode);
 }
@@ -314,8 +319,9 @@ void unfreaze_lve(MODE_TYPE debug_mode) {
 //Unfreaze daily
 void unfreaze_daily(MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
-	if(mysql_do_command == NULL) return;
-	snprintf(buffer, _DBGOVERNOR_BUFFER_2048-1,
+	if (mysql_do_command == NULL)
+		return;
+	snprintf(buffer, _DBGOVERNOR_BUFFER_2048 - 1,
 			QUERY_USER_CONN_LIMIT_UNFREEZE_DAILY, (unsigned long) -1);
 	if (db_mysql_exec_query(buffer, &mysql_do_command, debug_mode))
 		return;
@@ -327,8 +333,7 @@ long db_mysql_get_integer(char *result, unsigned long length) {
 	int index = 0;
 	long result_number = 0;
 	while (index < length) {
-		if ((result[index] != 0) && (result[index] >= '0') && (result[index]
-				<= '9'))
+		if ((result[index] >= '0') && (result[index] <= '9'))
 			result_number = result_number * 10 + (result[index++] - '0');
 		else
 			break;
@@ -364,13 +369,14 @@ double db_mysql_get_float(char *result, unsigned long length) {
 }
 
 //Get ranged string from string. NULL at end safety
-void db_mysql_get_string(char *buffer, char *result, unsigned long length, unsigned long max_bufer_len) {
-        unsigned long nlen = 0;
-	if(max_bufer_len<length)
+void db_mysql_get_string(char *buffer, char *result, unsigned long length,
+		unsigned long max_bufer_len) {
+	unsigned long nlen = 0;
+	if (max_bufer_len < length)
 		nlen = max_bufer_len - 1;
 	else
 		nlen = length;
-        memcpy(buffer, result, nlen);
+	memcpy(buffer, result, nlen);
 	buffer[nlen] = 0;
 }
 
@@ -389,16 +395,17 @@ void update_user_limit_no_flush(char *user_name, unsigned int limit,
 	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
 	char user_name_alloc[USERNAMEMAXLEN * 2];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
+	struct governor_config data_cfg;
 
-    get_config_data( &data_cfg );
+	get_config_data(&data_cfg);
 
-    if(mysql_do_command == NULL) return;
+	if (mysql_do_command == NULL)
+		return;
 
 	(*_mysql_real_escape_string)(mysql_do_command, user_name_alloc, user_name,
 			strlen(user_name));
-	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_8192-1, QUERY_USER_CONN_LIMIT,
-			(unsigned long)limit, user_name_alloc);
+	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_8192 - 1, QUERY_USER_CONN_LIMIT,
+			(unsigned long) limit, user_name_alloc);
 	if (db_mysql_exec_query(sql_buffer, &mysql_do_command, debug_mode)) {
 		if (debug_mode != DEBUG_MODE) {
 			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
@@ -432,11 +439,13 @@ void flush_user_stat(MODE_TYPE debug_mode) {
 void flush_user_priv(MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
-    if(mysql_do_command == NULL) return;
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
+	if (mysql_do_command == NULL)
+		return;
 
-	if (db_mysql_exec_query(QUERY_FLUSH_USER_PRIV, &mysql_do_command, debug_mode)) {
+	if (db_mysql_exec_query(QUERY_FLUSH_USER_PRIV, &mysql_do_command,
+			debug_mode)) {
 		if (debug_mode != DEBUG_MODE) {
 			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
 					"Can't flush user privs",
@@ -458,9 +467,10 @@ void kill_query(char *user_name, MODE_TYPE debug_mode) {
 	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
 	char user_name_alloc[USERNAMEMAXLEN * 2];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
-    if(mysql_do_command == NULL) return;
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
+	if (mysql_do_command == NULL)
+		return;
 
 	(*_mysql_real_escape_string)(mysql_do_command, user_name_alloc, user_name,
 			strlen(user_name));
@@ -487,11 +497,13 @@ void kill_query_by_id(long id, MODE_TYPE debug_mode, MYSQL ** mysql_internal) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
 	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
-    if(*mysql_internal==NULL) return;
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
+	if (*mysql_internal == NULL)
+		return;
 
-	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_8192-1, QUERY_KILL_USER_QUERY_ID, id);
+	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_8192 - 1, QUERY_KILL_USER_QUERY_ID,
+			id);
 	if (db_mysql_exec_query(sql_buffer, mysql_internal, debug_mode)) {
 
 		if (debug_mode != DEBUG_MODE) {
@@ -512,157 +524,157 @@ void kill_query_by_id(long id, MODE_TYPE debug_mode, MYSQL ** mysql_internal) {
 void governor_enable(MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
-    if(is_plugin_version){
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_PLG, &mysql_send_governor,
-    				debug_mode)) {
+	if (is_plugin_version) {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_PLG,
+				&mysql_send_governor, debug_mode)) {
 
-    	    	WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR_PLG",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR_PLG",
+					data_cfg.log_mode);
 
-    	}
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2, &mysql_send_governor,
-    	    	    				debug_mode)) {
+		}
+		if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2,
+				&mysql_send_governor, debug_mode)) {
 
-    	   		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
+					data_cfg.log_mode);
 
-    	}
-    } else {
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE, &mysql_send_governor,
-			debug_mode)) {
+		}
+	} else {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-				"Can't execute sql request. ENABLE_GOVERNOR",
-				data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
 		}
-    }
-    if(mysql_send_governor){
-    	res = (*_mysql_store_result)(mysql_send_governor);
-    	(*_mysql_free_result)(res);
-    }
+	}
+	if (mysql_send_governor) {
+		res = (*_mysql_store_result)(mysql_send_governor);
+		(*_mysql_free_result)(res);
+	}
 }
 
 void governor_enable_reconn(MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
-    if(is_plugin_version){
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON_PLG, &mysql_send_governor,
-    				debug_mode)) {
+	if (is_plugin_version) {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON_PLG,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
-    	}
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2, &mysql_send_governor,
-    	    				debug_mode)) {
+		}
+		if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
+					data_cfg.log_mode);
 
-    	}
-    } else {
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON, &mysql_send_governor,
-			debug_mode)) {
+		}
+	} else {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON,
+				&mysql_send_governor, debug_mode)) {
 
 			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-				"Can't execute sql request. ENABLE_GOVERNOR",
-				data_cfg.log_mode);
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
 		}
-    }
-    if(mysql_send_governor){
-    	res = (*_mysql_store_result)(mysql_send_governor);
-    	(*_mysql_free_result)(res);
-    }
+	}
+	if (mysql_send_governor) {
+		res = (*_mysql_store_result)(mysql_send_governor);
+		(*_mysql_free_result)(res);
+	}
 }
 
 void governor_enable_lve(MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
-    if(is_plugin_version){
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_LVE_PLG, &mysql_send_governor,
-    			debug_mode)) {
+	if (is_plugin_version) {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_LVE_PLG,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
-    	}
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2, &mysql_send_governor,
-    	    	    				debug_mode)) {
+		}
+		if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
+					data_cfg.log_mode);
 
-    	}
-    } else {
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_LVE, &mysql_send_governor,
-			debug_mode)) {
+		}
+	} else {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_LVE,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-				"Can't execute sql request. ENABLE_GOVERNOR",
-				data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
 		}
-    }
-    if(mysql_send_governor){
-    	res = (*_mysql_store_result)(mysql_send_governor);
-    	(*_mysql_free_result)(res);
-    }
+	}
+	if (mysql_send_governor) {
+		res = (*_mysql_store_result)(mysql_send_governor);
+		(*_mysql_free_result)(res);
+	}
 }
 
 void governor_enable_reconn_lve(MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
-    if(is_plugin_version){
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON_LVE_PLG, &mysql_send_governor,
-    		debug_mode)) {
+	if (is_plugin_version) {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON_LVE_PLG,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    			"Can't execute sql request. ENABLE_GOVERNOR",
-    			data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
-    	}
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2, &mysql_send_governor,
-    	    	    				debug_mode)) {
+		}
+		if (db_mysql_exec_query(QUERY_GOVERNOR_RECON_LVE_PLG2,
+				&mysql_send_governor, debug_mode)) {
 
-    		WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-    		"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
-    		data_cfg.log_mode);
+			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+					"Can't execute sql request. ENABLE_GOVERNOR_SECOND",
+					data_cfg.log_mode);
 
-    	}
-    } else {
-    	if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON_LVE, &mysql_send_governor,
-			debug_mode)) {
+		}
+	} else {
+		if (db_mysql_exec_query(QUERY_GOVERNOR_MODE_ENABLE_RECON_LVE,
+				&mysql_send_governor, debug_mode)) {
 
 			WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-				"Can't execute sql request. ENABLE_GOVERNOR",
-				data_cfg.log_mode);
+					"Can't execute sql request. ENABLE_GOVERNOR",
+					data_cfg.log_mode);
 
 		}
-    }
-    if(mysql_send_governor){
-    	res = (*_mysql_store_result)(mysql_send_governor);
-    	(*_mysql_free_result)(res);
-    }
+	}
+	if (mysql_send_governor) {
+		res = (*_mysql_store_result)(mysql_send_governor);
+		(*_mysql_free_result)(res);
+	}
 }
 
 //KILL CONNECTION request
@@ -671,9 +683,10 @@ void kill_connection(char *user_name, MODE_TYPE debug_mode) {
 	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
 	char user_name_alloc[USERNAMEMAXLEN * 2];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
-    if(mysql_do_command==NULL) return;
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
+	if (mysql_do_command == NULL)
+		return;
 
 	(*_mysql_real_escape_string)(mysql_do_command, user_name_alloc, user_name,
 			strlen(user_name));
@@ -700,8 +713,8 @@ int db_connect(const char *host, const char *user_name,
 		const char *user_password, const char *db_name, int argc, char *argv[],
 		MODE_TYPE debug_mode) {
 	char buffer[_DBGOVERNOR_BUFFER_2048];
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	//Обнулим глобальные переменные доступа
 	strcpy(global_user_name, "");
@@ -732,10 +745,10 @@ int db_connect(const char *host, const char *user_name,
 			return -1;
 		} else {
 			if (db_connect_common(&mysql_do_kill, host, user_name,
-							user_password, db_name, debug_mode, argc, argv, 0) < 0) {
-					WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-							"Kill connection error",
-							data_cfg.log_mode);
+					user_password, db_name, debug_mode, argc, argv, 0) < 0) {
+				WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+						"Kill connection error",
+						data_cfg.log_mode);
 				return -1;
 			}
 		}
@@ -750,8 +763,8 @@ int check_mysql_version(MODE_TYPE debug_mode) {
 	MYSQL_ROW row;
 	unsigned long *lengths;
 	char buffer[_DBGOVERNOR_BUFFER_2048], outbuffer[_DBGOVERNOR_BUFFER_2048];
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	if (mysql_send_governor != NULL) {
 		if (db_mysql_exec_query(QUERY_GET_SERVER_INFO, &mysql_send_governor,
@@ -766,24 +779,28 @@ int check_mysql_version(MODE_TYPE debug_mode) {
 		row = (*_mysql_fetch_row)(res);
 		if (row) {
 			lengths = (*_mysql_fetch_lengths)(res);
-			db_mysql_get_string(buffer, row[0], lengths[0], _DBGOVERNOR_BUFFER_2048);
+			db_mysql_get_string(buffer, row[0], lengths[0],
+					_DBGOVERNOR_BUFFER_2048);
 			if (strstr(buffer, "-cll-lve")) {
-				snprintf(outbuffer, _DBGOVERNOR_BUFFER_2048 - 1, "MySQL version correct %s", buffer);
+				snprintf(outbuffer, _DBGOVERNOR_BUFFER_2048 - 1,
+						"MySQL version correct %s", buffer);
 				WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
 						outbuffer,
 						data_cfg.log_mode);
 				(*_mysql_free_result)(res);
-				if(strstr(buffer, "-cll-lve-plg")){
+				if (strstr(buffer, "-cll-lve-plg")) {
 					is_plugin_version = 1;
-					snprintf(outbuffer, _DBGOVERNOR_BUFFER_2048 - 1, "Governor with plugin mode enabled");
-								WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
-								outbuffer,
-								data_cfg.log_mode);
+					snprintf(outbuffer, _DBGOVERNOR_BUFFER_2048 - 1,
+							"Governor with plugin mode enabled");
+					WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+							outbuffer,
+							data_cfg.log_mode);
 				}
 				return 1;
 			} else {
 				snprintf(
-						outbuffer, _DBGOVERNOR_BUFFER_2048 - 1,
+						outbuffer,
+						_DBGOVERNOR_BUFFER_2048 - 1,
 						"Update your MySQL to CLL version from repo.cloudlinux.com. Current is %s",
 						buffer);
 				WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
@@ -809,7 +826,7 @@ int check_mysql_version(MODE_TYPE debug_mode) {
 	}
 }
 
-char *get_work_user(){
+char *get_work_user() {
 	return work_user;
 }
 
@@ -819,8 +836,8 @@ void lve_connection(char *user_name, MODE_TYPE debug_mode) {
 	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
 	char user_name_alloc[USERNAMEMAXLEN * 2];
 	MYSQL_RES *res;
-    struct governor_config data_cfg;
-    get_config_data( &data_cfg );
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
 
 	(*_mysql_real_escape_string)(mysql_do_command, user_name_alloc, user_name,
 			strlen(user_name));
@@ -844,125 +861,125 @@ void lve_connection(char *user_name, MODE_TYPE debug_mode) {
 }
 
 //LOGGER USER QUERIES
-int create_dir()
-{
-  char tek_day_dir[ 11 ];
-  GDate *date = g_date_new();
-  const time_t timestamp = time( NULL );
-  g_date_set_time_t( date, timestamp );
-
-  if( g_mkdir_with_parents( PATH_TO_LOG_USER_QUERIES, 0755 ) == 0 )
-  {
-    if( g_chdir( PATH_TO_LOG_USER_QUERIES ) == 0 )
-    {
-      sprintf( tek_day_dir, "%d-%d-%d", g_date_get_year( date ), g_date_get_month( date ), g_date_get_day( date ) );
-      if( g_mkdir_with_parents( tek_day_dir, 0755 ) == 0 )
-      {
-        g_date_free( date );
-        if( g_chdir( tek_day_dir ) == 0 ) return 1;
-      }
-    }
-  }
-  g_date_free( date );
-  return 0;
-}
-
-void log_user_queries( char *user_name, MODE_TYPE debug_mode )
-{
-  char buffer[ _DBGOVERNOR_BUFFER_8192 ];
-  char sql_buffer[ _DBGOVERNOR_BUFFER_8192 ];
-  char user_name_alloc[ USERNAMEMAXLEN * 2 ];
-  char file_name[ USERNAMEMAXLEN + 1 + 10 ];
-
-  unsigned long counts;
-  unsigned long *lengths;
-  MYSQL_RES *res;
-  MYSQL_ROW row;
-  FILE *log_queries;
-  const time_t timestamp = time( NULL );
-  struct governor_config data_cfg;
-  get_config_data( &data_cfg );
-
-  if(mysql_do_command == NULL) return;
-
-  (*_mysql_real_escape_string)( mysql_do_command, user_name_alloc, user_name, strlen( user_name ) );
-  snprintf( sql_buffer, _DBGOVERNOR_BUFFER_8192, QUERY_GET_PROCESSLIST_INFO );
-  if( db_mysql_exec_query( sql_buffer, &mysql_do_command, debug_mode ) )
-  {
-    WRITE_LOG( NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048, "Get show processlist failed", data_cfg.log_mode );
-    return;
-  }
-
-  res = (*_mysql_store_result)( mysql_do_command );
-  counts = (*_mysql_num_rows)( res );
-  int tek_r = 0;
-
-  if( create_dir() && counts > 0 )
-  {
-    snprintf( file_name, USERNAMEMAXLEN + 1 + 10, "%s.%lld", user_name, timestamp );
-    log_queries = fopen( file_name, "w" );
-    if(log_queries!=NULL){
-    while( ( row = (*_mysql_fetch_row)( res ) ) )
-    {
-         if( strcmp( row[ 1 ], user_name ) == 0 )
-        {
-          lengths = (*_mysql_fetch_lengths)( res );
-          db_mysql_get_string( buffer, row[ 7 ], lengths[ 7 ], _DBGOVERNOR_BUFFER_8192 );
-          fprintf( log_queries, "%s\n", buffer );
-        }
-
-    }
-    fclose( log_queries );
-  } else {
-	  (*_mysql_free_result)( res );
-	  WRITE_LOG( NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,  "Can't open file %s", data_cfg.log_mode, file_name );
-	  return;
-  }
-  }
-  (*_mysql_free_result)( res );
-}
-
-MYSQL **get_mysql_connect()
-{
-  return &mysql_do_kill;
-}
-
-int activate_plugin( MODE_TYPE debug_mode ){
-	if(is_plugin_version){
+int create_dir() {
+	char tek_day_dir[11];
+	GDate *date = g_date_new();
+	const time_t timestamp = time(NULL);
+	g_date_set_time_t(date, timestamp);
+
+	if (g_mkdir_with_parents(PATH_TO_LOG_USER_QUERIES, 0755) == 0) {
+		if (g_chdir(PATH_TO_LOG_USER_QUERIES) == 0) {
+			sprintf(tek_day_dir, "%d-%d-%d", g_date_get_year(date),
+					g_date_get_month(date), g_date_get_day(date));
+			if (g_mkdir_with_parents(tek_day_dir, 0755) == 0) {
+				g_date_free(date);
+				if (g_chdir(tek_day_dir) == 0)
+					return 1;
+			}
+		}
+	}
+	g_date_free(date);
+	return 0;
+}
+
+void log_user_queries(char *user_name, MODE_TYPE debug_mode) {
+	char buffer[_DBGOVERNOR_BUFFER_8192];
+	char sql_buffer[_DBGOVERNOR_BUFFER_8192];
+	char user_name_alloc[USERNAMEMAXLEN * 2];
+	char file_name[USERNAMEMAXLEN + 1 + 10];
+
+	unsigned long counts;
+	unsigned long *lengths;
+	MYSQL_RES *res;
+	MYSQL_ROW row;
+	FILE *log_queries;
+	const time_t timestamp = time(NULL);
+	struct governor_config data_cfg;
+	get_config_data(&data_cfg);
+
+	if (mysql_do_command == NULL)
+		return;
+
+	(*_mysql_real_escape_string)(mysql_do_command, user_name_alloc, user_name,
+			strlen(user_name));
+	snprintf(sql_buffer, _DBGOVERNOR_BUFFER_8192, QUERY_GET_PROCESSLIST_INFO);
+	if (db_mysql_exec_query(sql_buffer, &mysql_do_command, debug_mode)) {
+		WRITE_LOG( NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048, "Get show processlist failed", data_cfg.log_mode );
+		return;
+	}
+
+	res = (*_mysql_store_result)(mysql_do_command);
+	counts = (*_mysql_num_rows)(res);
+	int tek_r = 0;
+
+	if (create_dir() && counts > 0) {
+		snprintf(file_name, USERNAMEMAXLEN + 1 + 10, "%s.%lld", user_name,
+				timestamp);
+		log_queries = fopen(file_name, "w");
+		if (log_queries != NULL) {
+			while ((row = (*_mysql_fetch_row)(res))) {
+				if (strcmp(row[1], user_name) == 0) {
+					lengths = (*_mysql_fetch_lengths)(res);
+					db_mysql_get_string(buffer, row[7], lengths[7],
+							_DBGOVERNOR_BUFFER_8192);
+					fprintf(log_queries, "%s\n", buffer);
+				}
+
+			}
+			fclose(log_queries);
+		} else {
+			(*_mysql_free_result)(res);
+			WRITE_LOG( NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048, "Can't open file %s", data_cfg.log_mode, file_name );
+			return;
+		}
+	}
+	(*_mysql_free_result)(res);
+}
+
+MYSQL **get_mysql_connect() {
+	return &mysql_do_kill;
+}
+
+int activate_plugin(MODE_TYPE debug_mode) {
+	if (is_plugin_version) {
 		int is_founf_plg = 0;
 		MYSQL_RES *res;
 		MYSQL_ROW row;
 		unsigned long *lengths;
-		char buffer[_DBGOVERNOR_BUFFER_2048], outbuffer[_DBGOVERNOR_BUFFER_2048];
-	    struct governor_config data_cfg;
-	    get_config_data( &data_cfg );
+		char buffer[_DBGOVERNOR_BUFFER_2048],
+				outbuffer[_DBGOVERNOR_BUFFER_2048];
+		struct governor_config data_cfg;
+		get_config_data(&data_cfg);
 
 		if (mysql_send_governor != NULL) {
-			if (db_mysql_exec_query(QUERY_GET_PLUGIN_INFO, &mysql_send_governor,
-					debug_mode)) {
+			if (db_mysql_exec_query(QUERY_GET_PLUGIN_INFO,
+					&mysql_send_governor, debug_mode)) {
 				WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
 						"Get mysql plugin request failed",
 						data_cfg.log_mode);
 				return 0;
 			}
 			res = (*_mysql_store_result)(mysql_send_governor);
-			while( ( row = (*_mysql_fetch_row)( res ) ) ){
+			while ((row = (*_mysql_fetch_row)(res))) {
 				lengths = (*_mysql_fetch_lengths)(res);
-				db_mysql_get_string(buffer, row[0], lengths[0], _DBGOVERNOR_BUFFER_2048);
-				if(!strncasecmp(buffer, "GOVERNOR", _DBGOVERNOR_BUFFER_2048)){
+				db_mysql_get_string(buffer, row[0], lengths[0],
+						_DBGOVERNOR_BUFFER_2048);
+				if (!strncasecmp(buffer, "GOVERNOR", _DBGOVERNOR_BUFFER_2048)) {
 					is_founf_plg = 1;
 				}
 			}
 			(*_mysql_free_result)(res);
-			if(!is_founf_plg){
-				if (db_mysql_exec_query(QUERY_SET_PLUGIN_INFO, &mysql_send_governor,
-									debug_mode)) {
-					if(!strstr((char *) (*_mysql_error)(mysql_send_governor),"Function 'governor' already exists")){}
+			if (!is_founf_plg) {
+				if (db_mysql_exec_query(QUERY_SET_PLUGIN_INFO,
+						&mysql_send_governor, debug_mode)) {
+					if (!strstr((char *) (*_mysql_error)(mysql_send_governor),
+							"Function 'governor' already exists")) {
+					}
 					{
-								WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
+						WRITE_LOG(NULL, 0, buffer, _DBGOVERNOR_BUFFER_2048,
 								"Set mysql plugin request failed",
 								data_cfg.log_mode);
-								return 0;
+						return 0;
 					}
 				}
 				res = (*_mysql_store_result)(mysql_do_command);
