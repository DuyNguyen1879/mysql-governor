#!/bin/sh
eval 'if [ -x /usr/local/cpanel/3rdparty/bin/perl ]; then exec /usr/local/cpanel/3rdparty/bin/perl -x -- $0 ${1+"$@"}; else exec /usr/bin/perl -x $0 ${1+"$@"}; fi;'
if 0;

#!/usr/bin/perl

BEGIN { unshift @INC, '/usr/local/cpanel', '/scripts'; }

my $pckg_name = 'Cpanel';
eval "use " . $pckg_name . ";";
use strict;

eval "use " .$pckg_name . "::SysPkgs          ();";
if ($@){
    $pckg_name = 'cPScript';
    eval "use " .$pckg_name . "::SysPkgs       ();";
}

#eval "use " .$pckg_name . "::SysPkgs              ();";
eval "use  " .$pckg_name . "::Sys 	           ();";
eval "use  " .$pckg_name . "::OSSys                ();";
eval "use  " .$pckg_name . "::HttpRequest          ();";
eval "use  " .$pckg_name . "::Config::LoadCpConf   ();";
eval "use  " .$pckg_name . "::RpmUtils             ();";
eval "use  " .$pckg_name . "::FileUtils::TouchFile ();";

my $mysqlTypeFileSet="/usr/share/lve/dbgovernor/mysql.type";
my $cPanelVersion=`/usr/local/cpanel/cpanel -V | cut -d'.' -f1`;
chomp $cPanelVersion;
my $cPanelsubVersion=`/usr/local/cpanel/cpanel -V | cut -d'.' -f2`;
chomp $cPanelsubVersion;

my $force   = 1;                                                                                                                                             
while ( $#ARGV != -1 ) {                                                                                                                                     
    if ( $ARGV[0] =~ m/^\-\-/ ) {                                                                                                                            
        my $arg = shift @ARGV;                                                                                                                               
        $arg =~ s/^\-\-//g;                                                                                                                                  
        $arg = lc $arg;                                                                                                                                      
        if ( $arg eq 'force' )   { $force   = 1; }                                                                                                           
    }                                                                                                                                                        
    else {                                                                                                                                                   
        last;                                                                                                                                                
    }                                                                                                                                                        
}   

my $httpClient = eval $pckg_name . "::HttpRequest->new( 'hideOutput' => 0 );";
my $url = 'http://repo.cloudlinux.com/cloudlinux';

my ( $system, $nodename, $release, $version, $machine ) = eval $pckg_name . "::OSSys::uname();";
my $system_tp = getSystemType($release);
if ($system_tp eq "") {
    print "Unknown system type --".$release.". Installation aborted\n";
    exit;
}
my $arch = $machine;
if ( $machine =~ /i.86/ ) {
    $arch = 'i386';
}

my %CPCONF =  eval $pckg_name . "::Config::LoadCpConf::loadcpconf();";

# Default to 5.5 if mysql-version is unset
if (   !exists $CPCONF{'mysql-version'}
    || !defined $CPCONF{'mysql-version'}
    || $CPCONF{'mysql-version'} eq ''
    || $CPCONF{'mysql-version'} eq '3' ) {
    $CPCONF{'mysql-version'} = '5.5';
}

my $updated = 0;
my $baseurl    = $url . '/sources/cpanel/cl';
my $cPPkg      =  eval $pckg_name . "::cPPkgs->new( 'MySQL', '$baseurl' );";

my $sql_version = $CPCONF{'mysql-version'};
my $sql_version_2 = $sql_version;

if( open( my $mysql_db, "<", $mysqlTypeFileSet ) ){
  my $type_db = <$mysql_db>;
  if( $type_db ne "auto" ){
    $sql_version_2=$type_db;
    if( $type_db eq "mysql50" ){
      $sql_version="5.0";
    }
    if( $type_db eq "mysql51" ){
      $sql_version="5.1";
    }
    if( $type_db eq "mysql55" ){
      $sql_version="5.5";
    }
    if( $type_db eq "mysql56" ){
      $sql_version="5.6";
    }
    if( $type_db eq "mariadb55" ){
      $sql_version="5.5";
    }
    if( $type_db eq "mariadb100" ){
      $sql_version="10.0";
    }
    if( $type_db eq "mariadb101" ){
      $sql_version="10.1";
    }
  }
  close( $mysql_db );
}

#stop mysql beffore reinstall (need for mysql 5.5)
if ( -e '/usr/lib/systemd/system/mysql.service' ){
  system '/bin/systemctl', 'stop', 'mysql.service'
} else {
  system '/sbin/service', 'mysql', 'stop';
}

if ($sql_version_2=="5.0"){
    $sql_version_2="mysql50";
    if ( -e '/usr/libexec/mysqld' ) {
        rename '/usr/libexec/mysqld', '/usr/libexec/mysqld.bak'
    }  
} 

if ($sql_version_2=="5.1"){
    $sql_version_2="mysql51";
    if ( -e '/usr/libexec/mysqld' ) {
        rename '/usr/libexec/mysqld', '/usr/libexec/mysqld.bak'
    }                          
} 

if ($sql_version_2=="5.5"){
    $sql_version_2="mysql55";
    if ( -e '/usr/libexec/mysqld' ) {
	rename '/usr/libexec/mysqld', '/usr/libexec/mysqld.bak'
    }  
} 

if ($sql_version_2=="5.6"){
    $sql_version_2="mysql56";
    if ( -e '/usr/libexec/mysqld' ) {
	rename '/usr/libexec/mysqld', '/usr/libexec/mysqld.bak'
    }  
} 

system '/usr/share/lve/dbgovernor/cpanel/check_mysql_leave_pid.sh';
system "/usr/share/lve/dbgovernor/cpanel/install-db-governor.sh $sql_version_2 --install --beta";
resmysql();

sub do_command
{
  my($arg) = shift;
  system("$arg");
  return $? >> 8;
}

sub check_package {
    my $pckgname = $_[0];
    open(READ,'rpm -qa | grep ^'.$pckgname.' |');                                                                                                                  
    my $res='';
    while(<READ>){                                                                                                                                               
	$res = $res . $_;                                                                                                                                                    
    } 
    if ($res eq ""){
	return 0;
    } else {
	return 1;
    }
}


sub resmysql {
    if ( -e '/var/cpanel/useapt' && -e '/usr/bin/apt-get' ) {
        system( '/usr/bin/apt-get', '-y', '--fix-broken', 'install' );
    }
    system '/scripts/restartsrv_mysql';
}

sub getSystemType(){
    my $tp = $_[0];
    my $tp2 = $_[1];
    if(index($tp,".el5.")!=-1){
        return "cl5";
    }
    if(index($tp,".el6.")!=-1){
        return "cl6";
    }
    if(index($tp,".el7.")!=-1){
        return "cl7";
    }
    if(-e '/etc/redhat-release'){
	my $redhat_rel5 = `cat /etc/redhat-release | grep "CloudLinux Server release 5."`;
	if ($redhat_rel5 ne "" ){
	    return "cl5";
	}
	my $redhat_rel6 = `cat /etc/redhat-release | grep "CloudLinux Server release 6."`;
	if ($redhat_rel6 ne "" ){
	    return "cl6";
    	}
	my $redhat_rel7 = `cat /etc/redhat-release | grep "CloudLinux Server release 7."`;
	if ($redhat_rel7 ne "" ){
	    return "cl7";
    	}
    }
    if(index($tp2,".el5.")!=-1){
        return "cl5";
    }
    if(index($tp2,".el6.")!=-1){
        return "cl6";
    }
    if(index($tp2,".el7.")!=-1){
        return "cl7";
    }
    return "";
}

sub remove_userstat(){
    system "sed", "/userstat/d", "-i", "/etc/my.cnf";
    system "sed", "/userstat_running/d",  "-i", "/etc/my.cnf";
}
