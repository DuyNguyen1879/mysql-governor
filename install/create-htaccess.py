#!/usr/bin/python

import os
import glob
import re
import sys
import getopt
import subprocess

ETC_MPFILE = '/etc/cagefs/cagefs.mp'

mounts = []

chroot = ''

silent = False

# Strips leading path to skeleton
def strip_path(path):
	jail = chroot
	# Strip path to skeleton from path
	jaillen = len(jail)
	if (path[:jaillen] == jail):
		path = path[jaillen:]
	return path


def striptrailingslash(dir):
	if dir != '':
		if (dir[-1] == '/'):
			return dir[:-1]
	return dir


def addtrailingslash(dir):
	if dir == '':
		return '/'
	if (dir[-1] != '/'):
		return '%s/' % (dir,)
	return dir


def path_is_mounted(path):
	if mounts:
		path = strip_path(path)
		path = addtrailingslash(path)
		for line in mounts:
			if line != '' and line[0] == '/':
				line = line.rstrip()
				line = addtrailingslash(line)
				if path.startswith(line):
					return True
	return False



#Create empty index.html
def MakeFile(file_name):
	try:
		open(file_name, 'w').close()
		os.chmod(file_name, 0644)
	except (OSError, IOError):
		pass


#Create .htaccess
def MakeFileHtaccess(file_name):
	try:
		file = open(file_name, 'w')
		file.write('#CageFS autogenerated file\n')
		file.write('deny from all')
		file.close()
		os.chmod(file_name, 0644)
	except (OSError, IOError):
		pass


def check_if_dir(path):
	if os.path.islink(path):
		return False
	if os.path.isdir(path):
		return True
	return False


def allow_path_full(file_name, dirs):
	if chroot != '':
		file_name = strip_path(file_name)
	for dr in dirs:
		f_n = re.escape(dr)
		me = re.search('^'+f_n, file_name)
		if me:
			return False
	return True


def allow_path_partially(file_name, dirs):
	if chroot != '':
		file_name = strip_path(file_name)
	f_n = re.escape(file_name)
	for dr in dirs:
		me = re.search('^'+f_n, dr)
		if me:
			return False
	return True



def MakeFileHtaccessInDirs(root, dirs):
	if not silent:
		print 'Proceed: '+root
	if chroot != '':
		if path_is_mounted(root):
			return
	if allow_path_full(root, dirs)==False:
		return
	if allow_path_partially(root, dirs)==False:
		lst = glob.glob(root+"index.*")
		if not lst:
			MakeFile(root+"index.html")
	else:
		if not os.path.exists(root+".htaccess"):
			MakeFileHtaccess(root+".htaccess")
	listing2 = os.listdir(root)
	for infile2 in listing2:
		if check_if_dir(root+infile2) == True:
			need_file = root+infile2+'/'
			MakeFileHtaccessInDirs(need_file, dirs)



def DeleteFileHtaccessInDirs(root, dirs):
	if not silent:
		print 'Proceed: '+root
	if chroot != '':
		if path_is_mounted(root):
			return
	if allow_path_full(root, dirs)==False:
		return
	if os.path.isfile(root+".htaccess"):
		f = open(root+".htaccess")
		line = f.readline()
		f.close()
		if line.strip()=='#CageFS autogenerated file':
			try:
				os.remove(root+".htaccess")
			except (OSError, IOError):
				pass
	listing2 = os.listdir(root)
	for infile2 in listing2:
		if check_if_dir(root+infile2) == True:
			need_file = root+infile2+'/'
			DeleteFileHtaccessInDirs(need_file, dirs)



def DeleteFileHtaccess(path):
	if not silent:
		print 'Proceed:', path
	if chroot != '':
		if path_is_mounted(path):
			return
	path = addtrailingslash(path)
	if os.path.isfile(path+".htaccess"):
		f = open(path+".htaccess")
		line = f.readline()
		f.close()
		if line.strip()=='#CageFS autogenerated file':
			try:
				os.remove(path+".htaccess")
			except (OSError, IOError):
				pass



def is_text_file(path):
	if os.path.isfile(path):
		p = subprocess.Popen(['file','-bi', path], stdout=subprocess.PIPE)
		out, err = p.communicate()
		if 'text' in out:
			return True

	return False



def get_cpanel_users_dirs():
	USERDATA = '/var/cpanel/userdata'
	if not os.path.isdir(USERDATA):
		return []

	dirs = {}
	for userdir in os.listdir(USERDATA):
		if os.path.isdir(USERDATA+'/'+userdir):
			for filename in os.listdir(USERDATA+'/'+userdir):
				path = USERDATA+'/'+userdir+'/'+filename
				if is_text_file(path):
					userdata_file = open(path, 'r')
					for line in userdata_file:
						if line.find('homedir:') != -1:
							v = line.split(':', 1)
							homedir = v[1].strip()
							homedir = striptrailingslash(homedir)
							dirs[homedir] = 1
							break
					userdata_file.close()

	return dirs.keys()



def check_exclusions(dirs):
	excl = ['/usr/share/cagefs-skeleton', '/usr/share/cagefs-skeleton.old',\
	'/usr/share/cagefs/etc', '/usr/share/cagefs/etc.new/etc']
	for path in dirs:
		path = striptrailingslash(path)
		if path not in excl:
			spath = path.split('/')
			cur_path = '/'
			for elem in spath:
				if elem != '':
					cur_path += elem + '/'
					DeleteFileHtaccess(chroot + cur_path)
			if check_if_dir(chroot + path):
				DeleteFileHtaccessInDirs(chroot + path + '/', [])



def process_old(mode, ignore_exclusions = False):
	deny_dirs = []
	deny_dirs_short = []

	if not ignore_exclusions:
		lst = glob.glob('/etc/cagefs/securelinks/*.htaccess')
		for infile in lst:
			f = open(infile)
			lines = f.readlines()
			f.close()
			deny_dirs = deny_dirs + lines
	
		if chroot == '':	
			deny_dirs += get_cpanel_users_dirs()
	
		for dd in deny_dirs:
			elem = dd.strip()
			if elem[-1]!='/':
				elem = elem + '/'
			if elem not in deny_dirs_short:
				deny_dirs_short.append(elem)
	
	if mode == 'check-exclusions':
		check_exclusions(deny_dirs_short)
		return

	if chroot == '':	
		path = '/'
	else:
		path = chroot+'/'

	listing = os.listdir(path)
	for infile in listing:
		if check_if_dir(path+infile) == True:
			if mode == 'delete-old':
				DeleteFileHtaccessInDirs(path+infile+'/', deny_dirs_short)
			elif mode == 'install':
				MakeFileHtaccessInDirs(path+infile+'/', deny_dirs_short)



def create_file(dirname, basename):
	dirname = addtrailingslash(dirname)
	if not silent:
		print 'Proceed:', dirname+basename
	if chroot != '':
		if path_is_mounted(dirname):
			return
	if basename == 'index.html':
		lst = glob.glob(dirname+"index.*")
		if not lst:
			MakeFile(dirname+"index.html")
	elif basename == '.htaccess':
		if not os.path.lexists(dirname+".htaccess"):
			MakeFileHtaccess(dirname+".htaccess")



def process(mode):
	paths = []
	lst = glob.glob('/etc/cagefs/securelinks/*.paths')
	for infile in lst:
		f = open(infile)
		lines = f.readlines()
		f.close()
		paths += lines

	for path in paths:
		path = path.strip()
		if path != '' and path[0] == '/' and path[-1] != '/':
			dirname = os.path.dirname(path)
			if os.path.isdir(chroot+dirname):
				basename = os.path.basename(path)
				if mode == 'install':
					create_file(chroot+dirname, basename)
				elif mode == 'delete' and basename == '.htaccess':
					DeleteFileHtaccess(chroot+dirname)

	if chroot == '' and mode == 'install':
		home_dirs = get_cpanel_users_dirs()
		basedirs = []
		for home in home_dirs:
			basedir = os.path.dirname(home)
			if basedir not in basedirs:
				basedirs.append(basedir)
		for path in basedirs:
			create_file(path, 'index.html')




try:
	opts, args = getopt.getopt(sys.argv[1:], "id", ["install", "delete", 'chroot=', 'silent',\
	'ignore-exclusions', 'check-exclusions', "delete-old"])
except getopt.GetoptError, err:
	# print help information and exit:
	print str(err) # will print something like "option -a not recognized"
	sys.exit(2)

mode = ''
for o, a in opts:
	if o in ("-i", "--install"):
		mode = 'install'
	elif o in ("-d", "--delete"):
		mode = 'delete'
	elif o in ("--delete-old"):
		mode = 'delete-old'
	elif o in ("--check-exclusions",):
		mode = 'check-exclusions'
	elif o in ('--silent',):
		silent = True
	elif o in ('--chroot',):
		chroot = a

if not os.path.isfile('/etc/cagefs/securelinks/securelinks.enabled') and mode != "delete" and mode != "delete-old":
	if not silent:
		print 'SecureLinks disabled. Exiting...'
	sys.exit(0)


if os.path.isfile(ETC_MPFILE):
	try:
		file = open(ETC_MPFILE, "r")
		mounts = file.readlines()
		file.close()
	except (IOError, OSError):
		print >>sys.stderr, 'Error: failed to read', ETC_MPFILE
		sys.exit(1)

ignore_exclusions = False

for o, a in opts:
	if o in ('--ignore-exclusions',):
		if mode == 'delete-old':
			ignore_exclusions = True

if mode in ('delete-old', 'check-exclusions'):
	process_old(mode, ignore_exclusions)
else:
	process(mode)

