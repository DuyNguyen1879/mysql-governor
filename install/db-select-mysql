#!/usr/bin/perl

#  options:
#  --mysql-version=<mysql type> or -m <mysql type>
#  --install-now
#  --current-mysql
#  --current-running-mysql
#

my $path = "/usr/share/lve/dbgovernor/";
my $type_db = "";

my $set_mysql_type = 0;
my $install_now = 0;
my $install_now_beta = 0;
my $current_mysql = 0;
my $current_running_mysql = 0;

while( $#ARGV != -1 )
{
  my $arg = shift @ARGV;
  if( $arg eq "-m" )
  {
    $type_db = shift @ARGV;
    $set_mysql_type = 1;
  }
  if( substr( $arg, 0, 15 ) eq "--mysql-version" )
  {
    my @opt = split( /=/, $arg );
    if( $opt[ 0 ] == "--mysql-version" )
    {
      $type_db = $opt[ 1 ];
      $set_mysql_type = 1;
    }
  }
  if( $arg eq "--install-now" )
  {
    $install_now = 1;
  }
  if( $arg eq "--install-now-beta" )
  {
    $install_now_beta = 1;
  }  
  if( $arg eq "--current-mysql" )
  {
    $current_mysql = 1;
  }  
  if( $arg eq "--current-running-mysql" )
  {
    $current_running_mysql = 1;
  }
  if( $arg eq "--help" )
  {
    print "Usage: db-select-mysql [options]\n";
    print "  options:\n";
    print "  --mysql-version=<mysql type> or -m <mysql type>     set version of mysql\n";
    print "      mysql type: auto, mysql50, mysql51, mysql55, mysql56, mariadb55\n";
    print "  --install-now                                       if need reinstall mysql now\n";
    print "  --current-mysql                                     show current installed mysql\n";
    print "  --current-running-mysql                             show current running mysql\n";
    print "  --install-now-beta                                  if need reinstall mysql beta now\n";
    print "\n";
  }
}

if( $set_mysql_type )
{
  _set_mysql_type( $type_db );
}

if( $current_mysql )
{
  _current_mysql();
}

if( $current_running_mysql )
{
  _current_running_mysql();
}

if( $install_now and !$set_mysql_type )
{
  system( "/usr/share/lve/dbgovernor/mysqlgovernor.py --upgrade" );
}

if( $install_now_beta and !$set_mysql_type )
{
  system( "/usr/share/lve/dbgovernor/mysqlgovernor.py --update-mysql-beta" );
}

exit 0;

#-----------------------------------------------
#-----------------------------------------------
sub _set_mysql_type
{
  $type_db_ = $_[ 0 ];

  open( my $mysql_db, ">", $path . "mysql.type" );
  print( $mysql_db $type_db_ );
  close( $mysql_db );

  print "now set MySql type '$type_db_'\n";
  if( $install_now )
  {
    print "install now...\n";
    system( "/usr/share/lve/dbgovernor/mysqlgovernor.py --upgrade" );
  }
  if( $install_now_beta )
  {
    print "install now beta...\n";
    system( "/usr/share/lve/dbgovernor/mysqlgovernor.py --update-mysql-beta" );
  }
}

sub _current_mysql()
{
  my $chk_ver = 0;
  if( open( my $mysql_db, "<", $path . "mysql.type" ) )
  {
    my $type_db = <$mysql_db>;
    if( $type_db ne "auto" )
    {
      if( $type_db eq "mysql50" )
      {
        print "mysql 5.0\n";
      } elsif( $type_db eq "mysql51" ) {
        print "mysql 5.1\n";
      } elsif( $type_db eq "mysql55" ) {
        print "mysql 5.5\n";
      } elsif( $type_db eq "mysql56" ) {
        print "mysql 5.6\n";
      } elsif( $type_db eq "mariadb55" ) {
        print "mariadb 55\n";
      } else {
	print "Unknown version\n";
      }
      $chk_ver = 1;
    }
    close( $mysql_db );
  } 

  if ( $chk_ver == 0 ){
    open( READ, "rpm -qa | grep -i mysql-server |" );
    my $result = "";
    while( <READ> )
    {
      $result = $result . $_;
    }
    close( READ );
    my @res = split( /-/, $result );
    my @res2 = split( /\./, $res[ 2 ]);
    my $sql = $res[ 0 ];
    if( $res[ 0 ] eq "cl" ){
	$sql = $res[ 1 ];
	@res2 = split( /\./, $res[ 3 ]);
    }     
    print $sql, " ", $res2[ 0 ], ".", $res2[1], "\n";
  }
}

sub _current_running_mysql()
{
  open( READ, "mysql --version |" );
  my $result = "";
  while( <READ> )
  {
    $result = $result . $_;
  }
  close( READ );
  my @res = split( / /, $result );
  my @res2 = split( /\./, $res[ 5 ]);
  print $res[ 0 ], " ", $res2[ 0 ], ".", $res2[1], "\n";
}

