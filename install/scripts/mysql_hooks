#!/usr/local/cpanel/3rdparty/bin/perl

# Return errors if Perl experiences problems.
use strict;
use warnings;

# Use objects to handle input.
use IO::Select;

# Properly decode JSON.
use JSON::Syck;

# Get decoded input.
my $input = get_passed_data();

my $db_user = $input->{ 'data' }->{ 'args' }->{ 'name' };
my $acc_user = $input->{ 'data' }->{ 'user' };
my $action = $input->{context}->{event};
my $old_db_user = $input->{ 'data' }->{ 'args' }->{ 'oldname' } if exists $input->{ 'data' }->{ 'args' }->{ 'oldname' };
my $new_db_user = $input->{ 'data' }->{ 'args' }->{ 'newname' } if exists $input->{ 'data' }->{ 'args' }->{ 'newname' };
#print "$acc_user" . "\n";
#print "$db_user" . "\n";
#print "$old_db_user" . "\n";
#print "$new_db_user" . "\n";
#print "$action" . "\n";

#while( my ($k, $v) = each %$input ) {
#        print "key: $k, value: $v.\n";
#        while( my ($k1, $v1) = each %$v ) {
#            print "key1: $k1, value1: $v1.\n";
#       }
#    }

if ($action eq 'UAPI::Mysql::rename_user') {
    system("/usr/share/lve/dbgovernor/scripts/cpanel-map-mysql-user.py " . "$action "  . "$acc_user " . "$new_db_user " . "$old_db_user");
} else {
    system("/usr/share/lve/dbgovernor/scripts/cpanel-map-mysql-user.py " . "$action "  . "$acc_user " . "$db_user");
}

# Process data from STDIN.
sub get_passed_data {
    # Declare input variables.
    my $raw_data   = '';
    my $input_data = {};

    # Set up an input object.
    my $selects    = IO::Select->new();

    # Get input from STDIN.
    $selects->add( \*STDIN );

    # Process the raw output, and JSON-decode.
    if ( $selects->can_read(.1) ) {
        while (<STDIN>) {
            $raw_data .= $_;
        }
        $input_data = JSON::Syck::Load($raw_data);
    }

    # Return the output.
    return $input_data;
}

1;